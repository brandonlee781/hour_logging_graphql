[
  {
    "entry": {
      "type": "method",
      "name": "add",
      "return": "jQuery",
      "title": ".add()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "selector",
            "type": "Selector",
            "desc":
              "A string representing a selector expression to find additional elements to add to the set of matched elements."
          }
        },
        {
          "added": "1.0",
          "argument": {
            "name": "elements",
            "type": "Element",
            "desc":
              "One or more elements to add to the set of matched elements."
          }
        },
        {
          "added": "1.0",
          "argument": {
            "name": "html",
            "type": "htmlString",
            "desc": "An HTML fragment to add to the set of matched elements."
          }
        },
        {
          "added": "1.3.2",
          "argument": {
            "name": "selection",
            "type": "jQuery",
            "desc":
              "An existing jQuery object to add to the set of matched elements."
          }
        },
        {
          "added": "1.4",
          "argument": [
            {
              "name": "selector",
              "type": "Selector",
              "desc":
                "A string representing a selector expression to find additional elements to add to the set of matched elements."
            },
            {
              "name": "context",
              "type": "Element",
              "desc": { "code": "$(selector, context)" }
            }
          ]
        }
      ],
      "desc":
        "Create a new jQuery object with elements added to the set of matched elements.",
      "longdesc": {
        "p": [
          { "code": [".add()", ".add()", "$()"] },
          { "code": [".add()", ".add()", "$(array_of_DOM_elements)"] },
          "The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:",
          { "em": "not", "code": ".add()" },
          "Consider a page with a simple list and a paragraph following it:",
          { "code": ".add()" },
          "Or:",
          { "code": ".add()" },
          "Although the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.",
          "As of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).",
          {
            "strong": "Note:",
            "code": ".add()",
            "a": [
              { "href": "/not/", "code": ".not( elements | selector )" },
              { "href": "/end/", "code": ".end()" }
            ]
          }
        ],
        "pre": [
          {
            "code":
              "$( \"p\" ).add( \"div\" ).addClass( \"widget\" );\nvar pdiv = $( \"p\" ).add( \"div\" );"
          },
          {
            "code":
              "var pdiv = $( \"p\" );\npdiv.add( \"div\" ); // WRONG, pdiv will not change"
          },
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n</ul>\n<p>a paragraph</p>"
          },
          {
            "code":
              "$( \"li\" ).add( \"p\" ).css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "$( \"li\" ).add( document.getElementsByTagName( \"p\" )[ 0 ] )\n  .css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "$( \"li\" ).add( \"<p id='new'>new paragraph</p>\" )\n  .css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.",
          "code":
            "$( \"div\" ).css( \"border\", \"2px solid red\" )\n  .add( \"p\" )\n  .css( \"background\", \"yellow\" );",
          "css":
            "div { \n    width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n  }\n  p { \n    clear: left;\n    font-weight: bold;\n    font-size: 16px;\n    color: blue;\n    margin: 0 10px;\n    padding: 2px;\n  }",
          "html":
            "<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n\n<p>Added this... (notice no border)</p>"
        },
        {
          "desc":
            "Adds more elements, matched by the given expression, to the set of matched elements.",
          "code":
            "$( \"p\" ).add( \"span\" ).css( \"background\", \"yellow\" );",
          "html": "<p>Hello</p>\n<span>Hello Again</span>"
        },
        {
          "desc":
            "Adds more elements, created on the fly, to the set of matched elements.",
          "code":
            "$( \"p\" ).clone().add( \"<span>Again</span>\" ).appendTo( document.body );",
          "html": "<p>Hello</p>"
        },
        {
          "desc": "Adds one or more Elements to the set of matched elements.",
          "code":
            "$( \"p\" ).add( document.getElementById( \"a\" ) ).css( \"background\", \"yellow\" );",
          "html": "<p>Hello</p>\n<span id=\"a\">Hello Again</span>"
        },
        {
          "desc":
            "Demonstrates how to add (or push) elements to an existing collection",
          "code":
            "var collection = $( \"p\" );\n// Capture the new collection\ncollection = collection.add( document.getElementById( \"a\" ) );\ncollection.css( \"background\", \"yellow\" );",
          "html": "<p>Hello</p>\n<span id=\"a\">Hello Again</span>"
        }
      ],
      "category": [
        { "slug": "traversing/miscellaneous-traversal" },
        { "slug": "version/1.0" },
        { "slug": "version/1.4" }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "addBack",
      "return": "jQuery",
      "title": ".addBack()",
      "signature": {
        "added": "1.8",
        "argument": {
          "name": "selector",
          "type": "Selector",
          "optional": "true",
          "desc":
            "A string containing a selector expression to match the current set of elements against."
        }
      },
      "desc":
        "Add the previous set of elements on the stack to the current set, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/end/",
                  "$t": ".end()"
                }
              },
              ".addBack()"
            ]
          },
          "Consider a page with a simple list on it:",
          "The result of the following code is a red background behind items 3, 4 and 5:",
          {
            "code": [
              ".nextAll()",
              ".addBack()",
              "{ [<li.third-item>,<li>,<li> ]}"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).nextAll().addBack()\n  .css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": {
          "code": [
            ".addBack()",
            ".find(\"p\")",
            ".addBack()",
            "$(\"div.after-addback\")"
          ]
        },
        "code":
          "$( \"div.left, div.right\" ).find( \"div, div > p\" ).addClass( \"border\" );\n\n// First Example\n$( \"div.before-addback\" ).find( \"p\" ).addClass( \"background\" );\n\n// Second Example\n$( \"div.after-addback\" ).find( \"p\" ).addBack().addClass( \"background\" );",
        "css":
          "p, div { \n    margin: 5px;\n    padding: 5px;\n  }\n  .border { \n    border: 2px solid red;\n  }\n  .background { \n    background: yellow;\n  }\n  .left, .right { \n    width: 45%;\n    float: left;\n  }\n  .right { \n    margin-left: 3%;\n  }",
        "html":
          "<div class=\"left\">\n  <p><strong>Before <code>addBack()</code></strong></p>\n  <div class=\"before-addback\">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>\n<div class=\"right\">\n  <p><strong>After <code>addBack()</code></strong></p>\n  <div class=\"after-addback\">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>"
      },
      "category": [
        {
          "slug": "traversing/miscellaneous-traversal"
        },
        {
          "slug": "version/1.8"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "addClass",
      "return": "jQuery",
      "title": ".addClass()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "className",
            "type": "String",
            "desc":
              "One or more space-separated classes to be added to the class attribute of each matched element."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "currentClassName",
                "type": "String"
              }
            ],
            "return": {
              "type": "String"
            }
          }
        }
      ],
      "desc":
        "Adds the specified class(es) to each element in the set of matched elements.",
      "longdesc": {
        "p": [
          "It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.",
          {
            "code": [".addClass()", "className", "class"],
            "em": ["property", "attribute"]
          },
          {
            "code": ["class", ".addClass()"],
            "em": "attribute"
          },
          "More than one class may be added at a time, separated by a space, to the set of matched elements, like so:",
          {
            "code": ".removeClass()"
          },
          {
            "code": ["myClass", "noClass", "yourClass"]
          },
          {
            "code": ".addClass()"
          },
          {
            "code": ["<li>", "<li>"]
          }
        ],
        "pre": [
          {
            "code": "$( \"p\" ).addClass( \"myClass yourClass\" );"
          },
          {
            "code":
              "$( \"p\" ).removeClass( \"myClass noClass\" ).addClass( \"yourClass\" );"
          },
          {
            "code":
              "$( \"ul li\" ).addClass(function( index ) { \n  return \"item-\" + index;\n});"
          }
        ]
      },
      "example": [
        {
          "desc": "Add the class \"selected\" to the matched elements.",
          "code": "$( \"p\" ).last().addClass( \"selected\" );",
          "css":
            "p { \n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected { \n    color: blue;\n  }\n  .highlight { \n    background: yellow;\n  }",
          "html": "<p>Hello</p>\n<p>and</p>\n<p>Goodbye</p>"
        },
        {
          "desc":
            "Add the classes \"selected\" and \"highlight\" to the matched elements.",
          "code": "$( \"p:last\" ).addClass( \"selected highlight\" );",
          "css":
            "p { \n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected { \n    color: red;\n  }\n  .highlight { \n    background: yellow;\n  }",
          "html": "<p>Hello</p>\n<p>and</p>\n<p>Goodbye</p>"
        },
        {
          "desc": {
            "code": ".addClass()"
          },
          "code":
            "$( \"div\" ).addClass(function( index, currentClass ) { \n  var addedClass;\n\n  if ( currentClass === \"red\" ) { \n    addedClass = \"green\";\n    $( \"p\" ).text( \"There is one green div\" );\n  }\n\n  return addedClass;\n});",
          "css":
            "div { \n    background: white;\n  }\n  .red { \n    background: red;\n  }\n  .red.green { \n    background: green;\n  }",
          "html":
            "<div>This div should be white</div>\n <div class=\"red\">This div will be green because it now has the \"green\" and \"red\" classes.\n   It would be red if the addClass function failed.</div>\n <div>This div should be white</div>\n <p>There are zero green divs</p>"
        }
      ],
      "category": [
        {
          "slug": "attributes"
        },
        {
          "slug": "manipulation/class-attribute"
        },
        {
          "slug": "css"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "after",
      "return": "jQuery",
      "title": ".after()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "content",
              "desc":
                "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            {
              "name": "content",
              "optional": "true",
              "desc":
                "One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert after each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          ]
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": {
              "name": "index",
              "type": "Integer"
            },
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          }
        },
        {
          "added": "1.10",
          "argument": {
            "name": "function-html",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "html",
                "type": "String"
              }
            ],
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          }
        }
      ],
      "desc":
        "Insert content, specified by the parameter, after each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".after()",
              {
                "a": {
                  "href": "/insertAfter/",
                  "$t": ".insertAfter()"
                }
              },
              ".after()",
              "$(target).after(contentToBeInserted)",
              ".insertAfter()",
              ".insertAfter()",
              "$(contentToBeInserted).insertAfter(target)"
            ]
          },
          "Using the following HTML:",
          "Content can be created and then inserted after several elements at once:",
          {
            "code": "<div>"
          },
          "An element in the DOM can also be selected and inserted after another element:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved rather than cloned:",
          {
            "strong": "Important"
          },
          {
            "code": ".after()"
          },
          {
            "code": ["<div>", "<div>"]
          },
          {
            "code": [
              {
                "a": {
                  "href": "/prepend/",
                  "$t": ".prepend()"
                }
              },
              {
                "a": {
                  "href": "/before/",
                  "$t": ".before()"
                }
              },
              ".after()"
            ]
          },
          {
            "code": ["<div>", "<div>"]
          },
          {
            "code": [
              ".after()",
              "<div>",
              "$( \"p\" ).first().after( $newdiv1, newdiv2, existingdiv1 )"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).after( \"<p>Test</p>\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <p>Test</p>\n  <div class=\"inner\">Goodbye</div>\n  <p>Test</p>\n</div>"
          },
          {
            "code": "$( \".container\" ).after( $( \"h2\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n<h2>Greetings</h2>"
          },
          {
            "code":
              "$( \"p\" ).after(function() { \n  return \"<div>\" + this.className + \"</div>\";\n});"
          },
          {
            "code":
              "var $newdiv1 = $( \"<div id='object1'></div>\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n\n$( \"p\" ).first().after( $newdiv1, [ newdiv2, existingdiv1 ] );"
          }
        ],
        "h4": [
          {
            "id": "passing-a-function",
            "$t": "Passing a Function"
          },
          {
            "id": "additional-arguments",
            "$t": "Additional Arguments"
          }
        ]
      },
      "note": [
        {
          "id": "disconnected-manipulation",
          "type": "additional",
          "data-title": ".after()"
        },
        {
          "id": "html-code-execution",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc": "Inserts some HTML after all paragraphs.",
          "code": "$( \"p\" ).after( \"<b>Hello</b>\" );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p>I would like to say: </p>"
        },
        {
          "desc": "Inserts a DOM element after all paragraphs.",
          "code": "$( \"p\" ).after( document.createTextNode( \"Hello\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p>I would like to say: </p>"
        },
        {
          "desc":
            "Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.",
          "code": "$( \"p\" ).after( $( \"b\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<b>Hello</b>\n<p>I would like to say: </p>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-outside"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxComplete",
      "return": "jQuery",
      "title": ".ajaxComplete()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "argument": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "jqXHR",
              "type": "jqXHR"
            },
            {
              "name": "ajaxOptions",
              "type": "PlainObject"
            }
          ],
          "desc": "The function to be invoked."
        }
      },
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "AjaxEvent"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxComplete", ".ajaxComplete()"]
          },
          "To observe this method in action, set up a basic Ajax load request:",
          "Attach the event handler to the document:",
          "Now, make an Ajax request using any jQuery method:",
          {
            "code": "trigger"
          },
          {
            "code": ["ajaxComplete", "ajaxComplete", "XMLHttpRequest"]
          },
          {
            "strong": "Note:",
            "code": "xhr.responseText"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"trigger\">Trigger</div>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$( document ).ajaxComplete(function() { \n  $( \".log\" ).text( \"Triggered ajaxComplete handler.\" );\n});"
          },
          {
            "code":
              "$( \".trigger\" ).click(function() { \n  $( \".result\" ).load( \"ajax/test.html\" );\n});"
          },
          {
            "code":
              "$( document ).ajaxComplete(function( event, xhr, settings ) { \n  if ( settings.url === \"ajax/test.html\" ) { \n    $( \".log\" ).text( \"Triggered ajaxComplete handler. The result is \" +\n      xhr.responseText );\n  }\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxComplete()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxComplete()"
        }
      ],
      "example": {
        "desc": "Show a message when an Ajax request completes.",
        "code":
          "$( document ).ajaxComplete(function( event, request, settings ) { \n  $( \"#msg\" ).append( \"<li>Request Complete.</li>\" );\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxError",
      "return": "jQuery",
      "title": ".ajaxError()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "$t": "",
          "desc": "The function to be invoked.",
          "argument": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "jqXHR",
              "type": "jqXHR"
            },
            {
              "name": "ajaxSettings",
              "type": "PlainObject"
            },
            {
              "name": "thrownError",
              "type": "String"
            }
          ]
        }
      },
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "Ajax Event"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxError", ".ajaxError()"],
            "strong": "Note:",
            "em":
              "This handler is not called for cross-domain script and cross-domain JSONP requests."
          },
          "To observe this method in action, set up a basic Ajax load request.",
          "Attach the event handler to the document:",
          "Now, make an Ajax request using any jQuery method:",
          "When the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.",
          {
            "code": [
              "ajaxError",
              "ajaxError",
              "jqXHR",
              {
                "abbr": {
                  "title": "XMLHttpRequest",
                  "$t": "XHR"
                }
              },
              "thrownError"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<button class=\"trigger\">Trigger</button>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$( document ).ajaxError(function() { \n  $( \".log\" ).text( \"Triggered ajaxError handler.\" );\n});"
          },
          {
            "code":
              "$( \"button.trigger\" ).on( \"click\", function() { \n  $( \"div.result\" ).load( \"ajax/missing.html\" );\n});"
          },
          {
            "code":
              "$( document ).ajaxError(function( event, jqxhr, settings, thrownError ) { \n  if ( settings.url == \"ajax/missing.html\" ) { \n    $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );\n  }\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxError()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxError()"
        }
      ],
      "example": {
        "desc": "Show a message when an Ajax request fails.",
        "code":
          "$( document ).ajaxError(function( event, request, settings ) { \n  $( \"#msg\" ).append( \"<li>Error requesting page \" + settings.url + \"</li>\" );\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxSend",
      "return": "jQuery",
      "title": ".ajaxSend()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "$t": "",
          "desc": "The function to be invoked.",
          "argument": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "jqXHR",
              "type": "jqXHR"
            },
            {
              "name": "ajaxOptions",
              "type": "PlainObject"
            }
          ]
        }
      },
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "Ajax Event"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxSend", ".ajaxSend()"]
          },
          "To observe this method in action, set up a basic Ajax load request:",
          "Attach the event handler to the document:",
          "Now, make an Ajax request using any jQuery method:",
          {
            "code": "trigger"
          },
          {
            "code": ["ajaxSend", "ajaxSend", "jqXHR", "XMLHttpRequest"],
            "a": {
              "href": "/jQuery.ajax/",
              "$t": "settings object"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"trigger\">Trigger</div>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$( document ).ajaxSend(function() { \n  $( \".log\" ).text( \"Triggered ajaxSend handler.\" );\n});"
          },
          {
            "code":
              "$( \".trigger\" ).click(function() { \n  $( \".result\" ).load( \"ajax/test.html\" );\n});"
          },
          {
            "code":
              "$( document ).ajaxSend(function( event, jqxhr, settings ) { \n  if ( settings.url == \"ajax/test.html\" ) { \n    $( \".log\" ).text( \"Triggered ajaxSend handler.\" );\n  }\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxSend()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxSend()"
        }
      ],
      "example": {
        "desc": "Show a message before an Ajax request is sent.",
        "code":
          "$( document ).ajaxSend(function( event, request, settings ) { \n  $( \"#msg\" ).append( \"<li>Starting request at \" + settings.url + \"</li>\" );\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxStart",
      "return": "jQuery",
      "title": ".ajaxStart()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "desc": "The function to be invoked."
        }
      },
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "Ajax Event"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxStart", ".ajaxStart()"]
          },
          "To observe this method in action, set up a basic Ajax load request:",
          "Attach the event handler to any element:",
          "Now, make an Ajax request using any jQuery method:",
          {
            "code": "trigger"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"trigger\">Trigger</div>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$( document ).ajaxStart(function() { \n  $( \".log\" ).text( \"Triggered ajaxStart handler.\" );\n});"
          },
          {
            "code":
              "$( \".trigger\" ).click(function() { \n  $( \".result\" ).load( \"ajax/test.html\" );\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxStart()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxStart()"
        }
      ],
      "example": {
        "desc":
          "Show a loading message whenever an Ajax request starts (and none is already active).",
        "code":
          "$( document ).ajaxStart(function() { \n  $( \"#loading\" ).show();\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxStop",
      "return": "jQuery",
      "title": ".ajaxStop()",
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "Ajax Event"
        }
      },
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "desc": "The function to be invoked."
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxStop", ".ajaxStop()", "ajaxStop", "beforeSend"]
          },
          "To observe this method in action, set up a basic Ajax load request:",
          "Attach the event handler to the document:",
          "Now, make an Ajax request using any jQuery method:",
          {
            "code": "trigger"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"trigger\">Trigger</div>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$( document ).ajaxStop(function() { \n  $( \".log\" ).text( \"Triggered ajaxStop handler.\" );\n});"
          },
          {
            "code":
              "$( \".trigger\" ).click(function() { \n  $( \".result\" ).load( \"ajax/test.html\" );\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxStop()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxStop()"
        }
      ],
      "example": {
        "desc":
          "Hide a loading message after all the Ajax requests have stopped.",
        "code":
          "$( document ).ajaxStop(function() { \n  $( \"#loading\" ).hide();\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ajaxSuccess",
      "return": "jQuery",
      "title": ".ajaxSuccess()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "$t": "",
          "desc": "The function to be invoked.",
          "argument": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "jqXHR",
              "type": "jqXHR"
            },
            {
              "name": "ajaxOptions",
              "type": "PlainObject"
            },
            {
              "name": "data",
              "type": "PlainObject"
            }
          ]
        }
      },
      "desc": {
        "a": {
          "href": "/Ajax_Events/",
          "$t": "Ajax Event"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["ajaxSuccess", ".ajaxSuccess()"]
          },
          "To observe this method in action, set up a basic Ajax load request:",
          "Attach the event handler to any element:",
          "Now, make an Ajax request using any jQuery method:",
          {
            "code": "trigger"
          },
          {
            "code": ["ajaxSuccess", "ajaxSuccess", "XMLHttpRequest"]
          },
          {
            "strong": "Note:",
            "code": ["xhr.responseXML", "xhr.responseText"]
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"trigger\">Trigger</div>\n<div class=\"result\"></div>\n<div class=\"log\"></div>"
          },
          {
            "code":
              "$(document).ajaxSuccess(function() { \n  $( \".log\" ).text( \"Triggered ajaxSuccess handler.\" );\n});"
          },
          {
            "code":
              "$( \".trigger\" ).on( \"click\", function() { \n  $( \".result\" ).load( \"ajax/test.html\" );\n});"
          },
          {
            "code":
              "$( document ).ajaxSuccess(function( event, xhr, settings ) { \n  if ( settings.url == \"ajax/test.html\" ) { \n    $( \".log\" ).text( \"Triggered ajaxSuccess handler. The Ajax response was: \" +\n      xhr.responseText );\n  }\n});"
          }
        ]
      },
      "note": [
        {
          "id": "global-ajax-event",
          "type": "additional",
          "data-title": ".ajaxSuccess()"
        },
        {
          "id": "ajax-global-false",
          "type": "additional",
          "data-title": ".ajaxSuccess()"
        }
      ],
      "example": {
        "desc": "Show a message when an Ajax request completes successfully.",
        "code":
          "$( document ).ajaxSuccess(function( event, request, settings ) { \n  $( \"#msg\" ).append( \"<li>Successful Request!</li>\" );\n});"
      },
      "category": [
        {
          "slug": "ajax/global-ajax-event-handlers"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "all",
      "return": "",
      "title": "All Selector (\"*\")",
      "sample": "*",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements.",
      "longdesc": {
        "p":
          "Caution: The all, or universal, selector is extremely slow, except when used by itself."
      },
      "example": [
        {
          "desc": {
            "code": ["<script>", "<link>"]
          },
          "code":
            "var elementCount = $( \"*\" ).css( \"border\", \"3px solid red\" ).length;\n$( \"body\" ).prepend( \"<h3>\" + elementCount + \" elements found</h3>\" );",
          "html":
            "<div>DIV</div>\n<span>SPAN</span>\n<p>P <button>Button</button></p>",
          "css":
            "h3 { \n    margin: 0;\n  }\n  div, span, p { \n    width: 80px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }"
        },
        {
          "desc":
            "Find all elements within document.body so elements like head, script, etc. are excluded.",
          "code":
            "var elementCount = $( \"#test\" ).find( \"*\" ).css( \"border\", \"3px solid red\" ).length;\n$( \"body\" ).prepend( \"<h3>\" + elementCount + \" elements found</h3>\" );",
          "html":
            "<div id=\"test\">\n  <div>DIV</div>\n  <span>SPAN</span>\n  <p>P <button>Button</button></p>\n</div>",
          "css":
            "h3 { \n    margin: 0;\n  }\n  div, span, p { \n    width: 80px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  #test { \n    width: auto;\n    height: auto;\n    background-color: transparent;\n  }"
        }
      ],
      "category": [
        {
          "slug": "selectors/basic-css-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "andSelf",
      "return": "jQuery",
      "deprecated": "1.8",
      "removed": "3.0",
      "title": ".andSelf()",
      "signature": {
        "added": "1.2"
      },
      "desc":
        "Add the previous set of elements on the stack to the current set.",
      "longdesc": {
        "p": [
          {
            "strong": "Note:",
            "a": {
              "href": "/addBack/",
              "code": ".addBack()"
            }
          },
          {
            "code": [
              {
                "a": {
                  "href": "/end/",
                  "$t": ".end()"
                }
              },
              ".andSelf()"
            ]
          },
          "Consider a page with a simple list on it:",
          "The result of the following code is a red background behind items 3, 4 and 5:",
          {
            "code": [
              ".nextAll()",
              ".andSelf()",
              "[ <li.third-item>, <li>, <li> ]"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).nextAll().andSelf()\n  .css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": {
          "code": [
            ".andSelf()",
            ".find(\"p\")",
            ".andSelf()",
            "$( \"div.after-andself\" )"
          ]
        },
        "code":
          "$( \"div.left, div.right\" ).find( \"div, div > p\" ).addClass( \"border\" );\n\n// First Example\n$( \"div.before-andself\" ).find( \"p\" ).addClass( \"background\" );\n\n// Second Example\n$( \"div.after-andself\" ).find( \"p\" ).andSelf().addClass( \"background\" );",
        "css":
          "p, div { \n    margin: 5px;\n    padding: 5px;\n  }\n  .border { \n    border: 2px solid red;\n  }\n  .background { \n    background: yellow;\n  }\n  .left, .right { \n    width: 45%;\n    float: left;\n  }\n  .right { \n    margin-left: 3%;\n  }",
        "html":
          "<div class=\"left\">\n  <p><strong>Before <code>andSelf()</code></strong></p>\n  <div class=\"before-andself\">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>\n<div class=\"right\">\n  <p><strong>After <code>andSelf()</code></strong></p>\n  <div class=\"after-andself\">\n    <p>First Paragraph</p>\n    <p>Second Paragraph</p>\n  </div>\n</div>"
      },
      "category": [
        {
          "slug": "traversing/miscellaneous-traversal"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "animate",
      "return": "jQuery",
      "title": ".animate()",
      "desc": "Perform a custom animation of a set of CSS properties.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "properties",
            "type": "PlainObject",
            "desc":
              "An object of CSS properties and values that the animation will move toward."
          },
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "argument": {
            "name": "properties",
            "type": "PlainObject",
            "desc":
              "An object of CSS properties and values that the animation will move toward."
          },
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".animate()", ".css()"]
          },
          {
            "em": "single numeric value",
            "code": ["width", "height", "left", "background-color", "em", "%"],
            "a": {
              "href": "https://github.com/jquery/jquery-color",
              "$t": "jQuery.Color"
            }
          },
          {
            "code": ["scrollTop", "scrollLeft"]
          },
          {
            "code": ["fontSize", "'font-size'", "'font'"]
          },
          {
            "code": ["'show'", "'hide'", "'toggle'", "'toggle'"]
          },
          {
            "code": ["+=", "-="]
          },
          {
            "code": ["400", "'fast'", "'slow'", "200", "600"]
          },
          {
            "code": [
              "start",
              "step",
              "progress",
              "complete",
              "done",
              "fail",
              "always",
              "this",
              ".promise()"
            ],
            "em": "per-element"
          },
          "To animate any element, such as a simple image:",
          "To animate the opacity, left offset, and height of the image simultaneously:",
          {
            "class": "image",
            "figure": {
              "img": {
                "src": "/resources/animate-1.jpg",
                "alt": ""
              },
              "figcaption":
                "Figure 1 - Illustration of the specified animation effect"
            }
          },
          {
            "code": ["height", "'toggle'"]
          },
          {
            "class": "image",
            "figure": {
              "img": {
                "src": "/resources/animate-2.jpg",
                "alt": ""
              },
              "figcaption":
                "Figure 2  - Illustration of the specified animation effect"
            }
          },
          {
            "code": ["opacity", "left"]
          },
          {
            "code": ["top", "right", "bottom", "left", "position", "static"]
          },
          {
            "code": [".animate()", "step", "now", "fx", "this"]
          },
          {
            "code": ["step", "step"]
          },
          {
            "code": [".animate()", "swing", "linear"],
            "a": {
              "href": "http://jqueryui.com/",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": [".animate()", ".animate()", ".animate()", "swing"]
          },
          {
            "code": ["swing", "linear"]
          },
          {
            "code": [".animate()", "specialEasing", "linear", "easeOutBounce"]
          },
          {
            "code": "easeOutBounce"
          }
        ],
        "h4": [
          {
            "id": "animation-properties",
            "$t": "Animation Properties and Values"
          },
          {
            "id": "duration",
            "$t": "Duration"
          },
          {
            "id": "callbacks",
            "$t": "Callback Functions"
          },
          {
            "id": "basic-usage",
            "$t": "Basic Usage"
          },
          {
            "id": "step",
            "$t": "Step Function"
          },
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "per-property-easing",
            "$t": "Per-property Easing"
          }
        ],
        "div": [
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": [
                ".slideDown()",
                ".fadeIn()",
                ".animate()",
                "$( \"someElement\" ).hide().animate({ height: \"20px\"}, 500)"
              ],
              "em": ["not", "the element will remain hidden"]
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "a": {
                "href": "http://jqueryui.com/",
                "$t": "jQuery UI"
              },
              "code": ".animate()"
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "a": {
                "href": "http://www.google.com/search?q=clearfix",
                "$t": "clearfix"
              }
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"\n  style=\"position: relative; left: 10px;\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() { \n  $( \"#book\" ).animate({ \n    opacity: 0.25,\n    left: \"+=50\",\n    height: \"toggle\"\n  }, 5000, function() { \n    // Animation complete.\n  });\n});"
          },
          {
            "code":
              "$( \"li\" ).animate({ \n  opacity: .5,\n  height: \"50%\"\n}, { \n  step: function( now, fx ) { \n    var data = fx.elem.id + \" \" + fx.prop + \": \" + now;\n    $( \"body\" ).append( \"<div>\" + data + \"</div>\" );\n  }\n});"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() { \n  $( \"#book\" ).animate({ \n    width: [ \"toggle\", \"swing\" ],\n    height: [ \"toggle\", \"swing\" ],\n    opacity: \"toggle\"\n  }, 5000, \"linear\", function() { \n    $( this ).after( \"<div>Animation complete.</div>\" );\n  });\n});"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() { \n  $( \"#book\" ).animate({ \n    width: \"toggle\",\n    height: \"toggle\"\n  }, { \n    duration: 5000,\n    specialEasing: { \n      width: \"linear\",\n      height: \"easeOutBounce\"\n    },\n    complete: function() { \n      $( this ).after( \"<div>Animation complete.</div>\" );\n    }\n  });\n});"
          }
        ],
        "ul": {
          "li": [
            {
              "code": "now"
            },
            {
              "code": ["fx", "jQuery.fx", "elem", "start", "end", "prop"]
            }
          ]
        }
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".animate()"
      },
      "example": [
        {
          "desc":
            "Click the button to animate the div with a number of different properties.",
          "code":
            "// Using multiple unit types within one animation.\n\n$( \"#go\" ).click(function() { \n  $( \"#block\" ).animate({ \n    width: \"70%\",\n    opacity: 0.4,\n    marginLeft: \"0.6in\",\n    fontSize: \"3em\",\n    borderWidth: \"10px\"\n  }, 1500 );\n});",
          "html":
            "<button id=\"go\">&raquo; Run</button>\n<div id=\"block\">Hello!</div>",
          "css":
            "div { \n    background-color: #bca;\n    width: 100px;\n    border: 1px solid green;\n  }"
        },
        {
          "desc":
            "Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.",
          "code":
            "$( \"#right\" ).click(function() { \n  $( \".block\" ).animate({ \"left\": \"+=50px\" }, \"slow\" );\n});\n\n$( \"#left\" ).click(function(){ \n  $( \".block\" ).animate({ \"left\": \"-=50px\" }, \"slow\" );\n});",
          "html":
            "<button id=\"left\">&laquo;</button>\n<button id=\"right\">&raquo;</button>\n<div class=\"block\"></div>",
          "css":
            "div { \n    position: absolute;\n    background-color: #abc;\n    left: 50px;\n    width: 90px;\n    height: 90px;\n    margin: 5px;\n  }"
        },
        {
          "desc": {
            "strong": "while"
          },
          "code":
            "$( \"#go1\" ).click(function() { \n  $( \"#block1\" )\n    .animate({ \n      width: \"90%\"\n    }, { \n      queue: false,\n      duration: 3000\n    })\n    .animate({  fontSize: \"24px\" }, 1500 )\n    .animate({  borderRightWidth: \"15px\" }, 1500 );\n});\n\n$( \"#go2\" ).click(function() { \n  $( \"#block2\" )\n    .animate({  width: \"90%\" }, 1000 )\n    .animate({  fontSize: \"24px\" }, 1000 )\n    .animate({  borderLeftWidth: \"15px\" }, 1000 );\n});\n\n$( \"#go3\" ).click(function() { \n  $( \"#go1\" ).add( \"#go2\" ).click();\n});\n\n$( \"#go4\" ).click(function() { \n  $( \"div\" ).css({ \n    width: \"\",\n    fontSize: \"\",\n    borderWidth: \"\"\n  });\n});",
          "html":
            "<button id=\"go1\">&raquo; Animate Block1</button>\n<button id=\"go2\">&raquo; Animate Block2</button>\n<button id=\"go3\">&raquo; Animate Both</button>\n<button id=\"go4\">&raquo; Reset</button>\n<div id=\"block1\">Block1</div>\n<div id=\"block2\">Block2</div>",
          "css":
            "div { \n    background-color: #bca;\n    width: 200px;\n    height: 1.1em;\n    text-align: center;\n    border: 2px solid green;\n    margin: 3px;\n    font-size: 14px;\n  }\n  button { \n    font-size: 14px;\n  }"
        },
        {
          "desc":
            "Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation.",
          "code":
            "$( \"#go\" ).click(function() { \n  $( \".block:first\" ).animate({ \n    left: 100\n  }, { \n    duration: 1000,\n    step: function( now, fx ){ \n      $( \".block:gt(0)\" ).css( \"left\", now );\n    }\n  });\n});",
          "css":
            "div { \n    position: relative;\n    background-color: #abc;\n    width: 40px;\n    height: 40px;\n    float: left;\n    margin: 5px;\n  }",
          "html":
            "<p><button id=\"go\">Run »</button></p>\n<div class=\"block\"></div>\n<div class=\"block\"></div>\n<div class=\"block\"></div>\n<div class=\"block\"></div>\n<div class=\"block\"></div>\n<div class=\"block\"></div>"
        },
        {
          "desc":
            "Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.",
          "code":
            "$( \"p\" ).animate({ \n  height: \"toggle\",\n  opacity: \"toggle\"\n}, \"slow\" );"
        },
        {
          "desc":
            "Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.",
          "code": "$( \"p\" ).animate({ \n  left: 50,\n  opacity: 1\n}, 500 );"
        },
        {
          "desc": {
            "em": "outside"
          },
          "code":
            "$( \"p\" ).animate({ \n  left: \"50px\",\n  opacity: 1\n}, { \n  duration: 500,\n  queue: false\n});"
        },
        {
          "desc":
            "An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.",
          "code":
            "$( \"p\" ).animate({ \n  opacity: \"show\"\n}, \"slow\", \"easein\" );"
        },
        {
          "desc":
            "Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.",
          "code":
            "$( \"p\" ).animate({ \n  height: \"toggle\",\n  opacity: \"toggle\"\n}, { \n  duration: \"slow\"\n});"
        },
        {
          "desc":
            "Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.",
          "code":
            "$( \"p\" ).animate({ \n  opacity: \"show\"\n}, { \n  duration: \"slow\",\n  easing: \"easein\"\n});"
        },
        {
          "desc":
            "Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function.",
          "code":
            "$( \"p\" ).animate({ \n  height: 200,\n  width: 400,\n  opacity: 0.5\n}, 1000, \"linear\", function() { \n  alert( \"all done\" );\n});"
        }
      ],
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "animated",
      "return": "",
      "title": ":animated Selector",
      "sample": ":animated",
      "signature": {
        "added": "1.2"
      },
      "desc":
        "Select all elements that are in the progress of an animation at the time the selector is run.",
      "longdesc": {
        "p": {
          "strong": "Note:",
          "em": "without the effects module",
          "code": ":animated"
        }
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":animated"
      },
      "example": {
        "desc": "Change the color of any div that is animated.",
        "code":
          "$( \"#run\" ).click(function() { \n  $( \"div:animated\" ).toggleClass( \"colored\" );\n});\n\nfunction animateIt() { \n  $( \"#mover\" ).slideToggle( \"slow\", animateIt );\n}\n\nanimateIt();",
        "html":
          "<button id=\"run\">Run</button>\n\n<div></div>\n<div id=\"mover\"></div>\n<div></div>",
        "css":
          "div { \n    background: yellow;\n    border: 1px solid #AAA;\n    width: 80px;\n    height: 80px;\n    margin: 0 5px;\n    float: left;\n  }\n  div.colored { \n    background: green;\n  }"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "append",
      "return": "jQuery",
      "title": ".append()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "content",
              "desc":
                "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            {
              "name": "content",
              "optional": "true",
              "desc":
                "One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          ]
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "html",
                "type": "String"
              }
            ],
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          }
        }
      ],
      "desc":
        "Insert content, specified by the parameter, to the end of each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": ".append()",
            "em": "first",
            "a": {
              "href": "/prepend/",
              "code": ".prepend()"
            }
          },
          {
            "code": [
              ".append()",
              {
                "a": {
                  "href": "/appendTo/",
                  "$t": ".appendTo()"
                }
              },
              ".append()",
              ".appendTo()"
            ]
          },
          "Consider the following HTML:",
          "You can create content and insert it into several elements at once:",
          {
            "code": "<div>"
          },
          "You can also select an element on the page and insert it into another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):",
          {
            "strong": "Important"
          },
          {
            "code": [
              {
                "a": {
                  "href": "/prepend/",
                  "$t": ".prepend()"
                }
              },
              {
                "a": {
                  "href": "/before/",
                  "$t": ".before()"
                }
              },
              ".append()"
            ]
          },
          {
            "code": ["<div>", "<div>"]
          },
          {
            "code": [
              ".append()",
              "<div>",
              "$('body').append( $newdiv1, newdiv2, existingdiv1 )"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).append( \"<p>Test</p>\" );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">\n    Hello\n    <p>Test</p>\n  </div>\n  <div class=\"inner\">\n    Goodbye\n    <p>Test</p>\n  </div>\n</div>"
          },
          {
            "code": "$( \".container\" ).append( $( \"h2\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n  <h2>Greetings</h2>\n</div>"
          },
          {
            "code":
              "var $newdiv1 = $( \"<div id='object1'></div>\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n\n$( \"body\" ).append( $newdiv1, [ newdiv2, existingdiv1 ] );"
          }
        ],
        "h4": {
          "id": "additional-arguments",
          "$t": "Additional Arguments"
        }
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc": "Appends some HTML to all paragraphs.",
          "code": "$( \"p\" ).append( \"<strong>Hello</strong>\" );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p>I would like to say: </p>"
        },
        {
          "desc": "Appends an Element to all paragraphs.",
          "code": "$( \"p\" ).append( document.createTextNode( \"Hello\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p>I would like to say: </p>"
        },
        {
          "desc":
            "Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.",
          "code": "$( \"p\" ).append( $( \"strong\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html":
            "<strong>Hello world!!!</strong>\n<p>I would like to say: </p>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-inside"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "appendTo",
      "return": "jQuery",
      "title": ".appendTo()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "target",
          "desc":
            "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.",
          "type": [
            {
              "name": "Selector"
            },
            {
              "name": "htmlString"
            },
            {
              "name": "Element"
            },
            {
              "name": "Array"
            },
            {
              "name": "jQuery"
            }
          ]
        }
      },
      "desc":
        "Insert every element in the set of matched elements to the end of the target.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/append/",
                  "$t": ".append()"
                }
              },
              ".appendTo()",
              ".append()",
              ".appendTo()"
            ]
          },
          "Consider the following HTML:",
          "We can create content and insert it into several elements at once:",
          {
            "code": "<div>"
          },
          "We can also select an element on the page and insert it into another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned) and a new set consisting of the inserted element is returned:",
          "If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last, and that new set (the original element plus clones) is returned.",
          {
            "strong": "Before jQuery 1.9,",
            "code": ".end()"
          }
        ],
        "pre": [
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"<p>Test</p>\" ).appendTo( \".inner\" );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">\n    Hello\n    <p>Test</p>\n  </div>\n  <div class=\"inner\">\n    Goodbye\n    <p>Test</p>\n  </div>\n</div>"
          },
          {
            "code": "$( \"h2\" ).appendTo( $( \".container\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n  <h2>Greetings</h2>\n</div>"
          }
        ]
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Append all spans to the element with the ID \"foo\" (Check append() documentation for more examples)",
        "code": "$( \"span\" ).appendTo( \"#foo\" );",
        "css": "#foo { \n    background: yellow;\n  }",
        "html":
          "<span>I have nothing more to say... </span>\n\n<div id=\"foo\">FOO! </div>"
      },
      "category": [
        {
          "slug": "manipulation/dom-insertion-inside"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "attr",
          "return": "String",
          "title": ".attr()",
          "signature": {
            "added": "1.0",
            "argument": {
              "name": "attributeName",
              "type": "String",
              "desc": "The name of the attribute to get."
            }
          },
          "desc":
            "Get the value of an attribute for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [".attr()", ".each()", ".map()"],
                "em": "first"
              },
              {
                "code": ".attr()"
              },
              {
                "code": [".attr()", "undefined"],
                "strong": {
                  "code": ["checked", "selected", "disabled"],
                  "a": {
                    "href": "/prop/",
                    "$t": ".prop()"
                  }
                }
              },
              {
                "em": ["attributes", "properties"],
                "strong": ["Before jQuery 1.6", "As of jQuery 1.6"],
                "code": [".attr()", ".prop()", ".attr()"]
              },
              {
                "code": [
                  "selectedIndex",
                  "tagName",
                  "nodeName",
                  "nodeType",
                  "ownerDocument",
                  "defaultChecked",
                  "defaultSelected",
                  {
                    "a": {
                      "href": "/prop/",
                      "$t": ".prop()"
                    }
                  },
                  ".attr()",
                  "attr"
                ]
              },
              {
                "code": [
                  "<input type=\"checkbox\" checked=\"checked\" />",
                  "elem"
                ]
              },
              {
                "a": {
                  "href":
                    "http://www.w3.org/TR/html401/interact/forms.html#h-17.4",
                  "$t": "W3C forms specification"
                },
                "code": "checked",
                "em": {
                  "a": {
                    "href":
                      "http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2",
                    "$t": "boolean attribute"
                  }
                },
                "strong": "true"
              },
              {
                "code": [
                  "checked",
                  "checked",
                  "defaultChecked",
                  "checked",
                  "checked"
                ],
                "em": "initial"
              },
              {
                "code": ["selected", "value"]
              }
            ],
            "ol": {
              "li": [
                {
                  "strong": "Convenience"
                },
                {
                  "strong": "Cross-browser consistency",
                  "code": ".attr()"
                }
              ]
            },
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:"
              }
            },
            "note": {
              "id": "svg-support",
              "type": "additional"
            },
            "h4": "Attributes vs. Properties",
            "table": {
              "tr": [
                {
                  "th": {
                    "code": "elem.checked"
                  },
                  "td": {
                    "code": "true"
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).prop( \"checked\" )"
                  },
                  "td": {
                    "code": "true"
                  }
                },
                {
                  "th": {
                    "code": "elem.getAttribute( \"checked\" )"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(1.6)"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(1.6.1+)"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(pre-1.6)"
                  },
                  "td": {
                    "code": "true"
                  }
                }
              ]
            },
            "br": {},
            "ul": {
              "li": [
                {
                  "code": "if ( elem.checked )"
                },
                {
                  "code": "if ( $( elem ).prop( \"checked\" ) )"
                },
                {
                  "code": "if ( $( elem ).is( \":checked\" ) )"
                }
              ]
            }
          },
          "note": {
            "id": "prop-memory-leaks",
            "type": "additional"
          },
          "example": [
            {
              "desc":
                "Display the checked attribute and property of a checkbox as it changes.",
              "code":
                "$( \"input\" )\n  .change(function() { \n    var $input = $( this );\n    $( \"p\" ).html( \".attr( 'checked' ): <b>\" + $input.attr( \"checked\" ) + \"</b><br>\" +\n      \".prop( 'checked' ): <b>\" + $input.prop( \"checked\" ) + \"</b><br>\" +\n      \".is( ':checked' ): <b>\" + $input.is( \":checked\" ) + \"</b>\" );\n  })\n  .change();",
              "css":
                "p { \n    margin: 20px 0 0;\n  }\n  b { \n    color: blue;\n  }",
              "html":
                "<input id=\"check1\" type=\"checkbox\" checked=\"checked\">\n<label for=\"check1\">Check me</label>\n<p></p>"
            },
            {
              "desc": "Find the title attribute of the first <em> in the page.",
              "code":
                "var title = $( \"em\" ).attr( \"title\" );\n$( \"div\" ).text( title );",
              "css":
                "em { \n    color: blue;\n    font-weight: bold;\n  }\n  div { \n    color: red;\n  }",
              "html":
                "<p>Once there was a <em title=\"huge, gigantic\">large</em> dinosaur...</p>\n\nThe title of the emphasis is:<div></div>"
            }
          ],
          "br": {},
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.1"
            },
            {
              "slug": "version/1.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "attr",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": [
                {
                  "name": "attributeName",
                  "type": "String",
                  "desc": "The name of the attribute to set."
                },
                {
                  "name": "value",
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    },
                    {
                      "name": "Null"
                    }
                  ],
                  "desc": {
                    "code": "null",
                    "a": {
                      "href": "/removeAttr/",
                      "code": ".removeAttr()"
                    }
                  }
                }
              ]
            },
            {
              "added": "1.0",
              "argument": {
                "name": "attributes",
                "type": "PlainObject",
                "desc": "An object of attribute-value pairs to set."
              }
            },
            {
              "added": "1.1",
              "argument": [
                {
                  "name": "attributeName",
                  "type": "String",
                  "desc": "The name of the attribute to set."
                },
                {
                  "name": "function",
                  "type": "Function",
                  "desc": {
                    "code": "this"
                  },
                  "argument": [
                    {
                      "name": "index",
                      "type": "Integer"
                    },
                    {
                      "name": "attr",
                      "type": "String"
                    }
                  ],
                  "return": {
                    "type": [
                      {
                        "name": "String"
                      },
                      {
                        "name": "Number"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "desc": "Set one or more attributes for the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": ".attr()"
              },
              {
                "code": ["alt", ".attr()"]
              },
              {
                "em": "Add"
              },
              {
                "code": ["alt", "title"]
              },
              "When setting multiple attributes, the quotes around attribute names are optional.",
              {
                "strong": "WARNING"
              },
              "By using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:",
              "This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.",
              {
                "strong": "Note:",
                "code": ["function(index, attr){ }", "undefined"]
              }
            ],
            "pre": [
              {
                "code":
                  "<img id=\"greatphoto\" src=\"brush-seller.jpg\" alt=\"brush seller\">"
              },
              {
                "code":
                  "$( \"#greatphoto\" ).attr( \"alt\", \"Beijing Brush Seller\" );"
              },
              {
                "code":
                  "$( \"#greatphoto\" ).attr( \"title\", \"Photo by Kelly Clark\" );"
              },
              {
                "code":
                  "$( \"#greatphoto\" ).attr({ \n  alt: \"Beijing Brush Seller\",\n  title: \"photo by Kelly Clark\"\n});"
              },
              {
                "code":
                  "$( \"#greatphoto\" ).attr( \"title\", function( i, val ) { \n  return val + \" - photo by Kelly Clark\";\n});"
              }
            ],
            "h4": [
              {
                "id": "setting-simple-attr",
                "$t": "Setting a simple attribute"
              },
              {
                "id": "setting-several-attrs",
                "$t": "Setting several attributes at once"
              },
              {
                "id": "computed-attr-values",
                "$t": "Computed attribute values"
              }
            ],
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": ["type", "input", "button", "document.createElement()"]
              }
            }
          },
          "example": [
            {
              "desc": "Set some attributes for all <img>s in the page.",
              "code":
                "$( \"img\" ).attr({ \n  src: \"/resources/hat.gif\",\n  title: \"jQuery\",\n  alt: \"jQuery Logo\"\n});\n$( \"div\" ).text( $( \"img\" ).attr( \"alt\" ) );",
              "css":
                "img { \n    padding: 10px;\n  }\n  div { \n    color: red;\n    font-size: 24px;\n  }",
              "html":
                "<img>\n<img>\n<img>\n\n<div><b>Attribute of Ajax</b></div>"
            },
            {
              "desc": "Set the id for divs based on the position in the page.",
              "code":
                "$( \"div\" )\n  .attr( \"id\", function( arr ) { \n    return \"div-id\" + arr;\n  })\n  .each(function() { \n    $( \"span\", this ).html( \"(id = '<b>\" + this.id + \"</b>')\" );\n});",
              "css":
                "div { \n    color: blue;\n  }\n  span { \n    color: red;\n  }\n  b { \n    font-weight: bolder;\n  }",
              "html":
                "<div>Zero-th <span></span></div>\n<div>First <span></span></div>\n<div>Second <span></span></div>"
            },
            {
              "desc":
                "Set the src attribute from title attribute on the image.",
              "code":
                "$( \"img\" ).attr( \"src\", function() { \n  return \"/resources/\" + this.title;\n});",
              "html": "<img title=\"hat.gif\">"
            }
          ],
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.1"
            },
            {
              "slug": "version/1.6"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeContainsPrefix",
      "return": "",
      "title": "Attribute Contains Prefix Selector [name|=\"value\"]",
      "sample": "[attribute|='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).",
      "longdesc": {
        "p":
          "This selector was introduced into the CSS specification to handle language attributes."
      },
      "example": {
        "desc": "Finds all links with an hreflang attribute that is english.",
        "code":
          "$( \"a[hreflang|='en']\" ).css( \"border\", \"3px dotted green\" );",
        "html":
          "<a href=\"example.html\" hreflang=\"en\">Some text</a>\n<a href=\"example.html\" hreflang=\"en-UK\">Some other text</a>\n<a href=\"example.html\" hreflang=\"english\">will not be outlined</a>",
        "css": "a { \n    display: inline-block;\n  }"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeContains",
      "return": "",
      "title": "Attribute Contains Selector [name*=\"value\"]",
      "sample": "[attribute*='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value containing a given substring.",
      "longdesc": {
        "p":
          "This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases."
      },
      "example": {
        "desc":
          "Finds all inputs with a name attribute that contains 'man' and sets the value with some text.",
        "code": "$( \"input[name*='man']\" ).val( \"has man in it!\" );",
        "html":
          "<input name=\"man-news\">\n<input name=\"milkman\">\n<input name=\"letterman2\">\n<input name=\"newmilk\">"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeContainsWord",
      "return": "",
      "title": "Attribute Contains Word Selector [name~=\"value\"]",
      "sample": "[attribute~='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.",
      "longdesc": {
        "p":
          "This selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words."
      },
      "example": {
        "desc":
          "Finds all inputs with a name attribute that contains the word 'man' and sets the value with some text.",
        "code": "$( \"input[name~='man']\" ).val( \"mr. man is in it!\" );",
        "html":
          "<input name=\"man-news\">\n<input name=\"milk man\">\n<input name=\"letterman2\">\n<input name=\"newmilk\">"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeEndsWith",
      "return": "",
      "title": "Attribute Ends With Selector [name$=\"value\"]",
      "sample": "[attribute$='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.",
      "longdesc": {},
      "example": {
        "desc":
          "Finds all inputs with an attribute name that ends with 'letter' and puts text in them.",
        "code": "$( \"input[name$='letter']\" ).val( \"a letter\" );",
        "html":
          "<input name=\"newsletter\">\n<input name=\"milkman\">\n<input name=\"jobletter\">"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeEquals",
      "return": "",
      "title": "Attribute Equals Selector [name=\"value\"]",
      "sample": "[attribute='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "strong": {
                "a": {
                  "href":
                    "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                  "$t": "valid identifier"
                }
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value exactly equal to a certain value.",
      "longdesc": {},
      "example": {
        "desc":
          "Finds all inputs with a value of \"Hot Fuzz\" and changes the text of the next sibling span.",
        "code": "$( \"input[value='Hot Fuzz']\" ).next().text( \"Hot Fuzz\" );",
        "html":
          "<div>\n  <label>\n    <input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\">\n    <span>name?</span>\n  </label>\n</div>\n<div>\n  <label>\n    <input type=\"radio\" name=\"newsletter\" value=\"Cold Fusion\">\n    <span>value?</span>\n  </label>\n</div>\n<div>\n  <label>\n    <input type=\"radio\" name=\"newsletter\" value=\"Evil Plans\">\n    <span>value?</span>\n  </label>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeNotEqual",
      "return": "",
      "title": "Attribute Not Equal Selector [name!=\"value\"]",
      "sample": "[attribute!='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.",
      "longdesc": {
        "p": {
          "code": ":not([attr='value'])"
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": "[name!=\"value\"]",
        "data-alt": "$( \"your-pure-css-selector\" ).not( \"[name='value']\" )"
      },
      "example": {
        "desc":
          "Finds all inputs that don't have the name 'newsletter' and appends text to the span next to it.",
        "code":
          "$( \"input[name!='newsletter']\" ).next().append( \"<b>; not newsletter</b>\" );",
        "html":
          "<div>\n  <input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\">\n  <span>name is newsletter</span>\n</div>\n<div>\n  <input type=\"radio\" value=\"Cold Fusion\">\n  <span>no name</span>\n</div>\n<div>\n  <input type=\"radio\" name=\"accept\" value=\"Evil Plans\">\n  <span>name is accept</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeStartsWith",
      "return": "",
      "title": "Attribute Starts With Selector [name^=\"value\"]",
      "sample": "[attribute^='value']",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attribute",
            "type": "String",
            "desc": "An attribute name."
          },
          {
            "name": "value",
            "type": "String",
            "desc": {
              "a": {
                "href":
                  "https://www.w3.org/TR/css3-selectors/#attribute-selectors",
                "$t": "valid identifier"
              }
            }
          }
        ]
      },
      "desc":
        "Selects elements that have the specified attribute with a value beginning exactly with a given string.",
      "longdesc": {
        "p":
          "This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements."
      },
      "example": {
        "desc":
          "Finds all inputs with an attribute name that starts with 'news' and puts text in them.",
        "code": "$( \"input[name^='news']\" ).val( \"news here!\" );",
        "html":
          "<input name=\"newsletter\">\n<input name=\"milkman\">\n<input name=\"newsboy\">"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "before",
      "return": "jQuery",
      "title": ".before()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "content",
              "desc":
                "HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            {
              "name": "content",
              "optional": "true",
              "desc":
                "One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert before each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          ]
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "argument": {
              "name": "index",
              "type": "Integer"
            },
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            "desc": {
              "code": "this"
            }
          }
        },
        {
          "added": "1.10",
          "argument": {
            "name": "function-html",
            "type": "Function",
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "html",
                "type": "String"
              }
            ],
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            "desc": {
              "code": "this"
            }
          }
        }
      ],
      "desc":
        "Insert content, specified by the parameter, before each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".before()",
              {
                "a": {
                  "href": "/insertBefore/",
                  "$t": ".insertBefore()"
                }
              },
              ".before()",
              "$(target).before(contentToBeInserted)",
              ".insertBefore()",
              ".insertBefore()",
              "$(contentToBeInserted).insertBefore(target)"
            ]
          },
          "Consider the following HTML:",
          "You can create content and insert it before several elements at once:",
          {
            "code": "<div>"
          },
          "You can also select an element on the page and insert it before another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned):",
          {
            "strong": "Important"
          },
          {
            "code": [
              {
                "a": {
                  "href": "/prepend/",
                  "$t": ".prepend()"
                }
              },
              {
                "a": {
                  "href": "/after/",
                  "$t": ".after()"
                }
              },
              ".before()"
            ]
          },
          {
            "code": ["<div>", "<div>"]
          },
          {
            "code": [
              ".before()",
              "<div>",
              "$( \"p\" ).first().before( $newdiv1, newdiv2, existingdiv1 )"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).before( \"<p>Test</p>\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <p>Test</p>\n  <div class=\"inner\">Hello</div>\n  <p>Test</p>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".container\" ).before( $( \"h2\" ) );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code":
              "var newdiv1 = $( \"<div id='object1'></div>\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n\n$( \"p\" ).first().before( newdiv1, [ newdiv2, existingdiv1 ] );"
          }
        ],
        "h4": {
          "id": "additional-arguments",
          "$t": "Additional Arguments"
        }
      },
      "note": [
        {
          "id": "disconnected-manipulation",
          "type": "additional",
          "data-title": ".before()"
        },
        {
          "id": "html-code-execution",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc": "Inserts some HTML before all paragraphs.",
          "code": "$( \"p\" ).before( \"<b>Hello</b>\" );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p> is what I said...</p>"
        },
        {
          "desc": "Inserts a DOM element before all paragraphs.",
          "code": "$( \"p\" ).before( document.createTextNode( \"Hello\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p> is what I said...</p>"
        },
        {
          "desc":
            "Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.",
          "code": "$( \"p\" ).before( $( \"b\" ) );",
          "css": "p { \n    background: yellow;\n  }",
          "html": "<p> is what I said...</p><b>Hello</b>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-outside"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "bind",
      "return": "jQuery",
      "deprecated": "3.0",
      "title": ".bind()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
            },
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
            },
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "preventBubble",
              "type": "Boolean",
              "optional": "true",
              "desc":
                "Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true."
            }
          ]
        },
        {
          "added": "1.4",
          "argument": {
            "name": "events",
            "type": "Object",
            "desc":
              "An object containing one or more DOM event types and functions to execute for them."
          }
        }
      ],
      "desc": "Attach a handler to an event for the elements.",
      "longdesc": {
        "p": [
          {
            "code": [".bind()", ".bind()", ".bind()"],
            "a": [
              {
                "href": "/on/",
                "code": ".on()"
              },
              {
                "href": "/on/",
                "code": ".on()"
              }
            ],
            "em": "must exist"
          },
          {
            "code": ["eventType", ".trigger()", ".triggerHandler()"]
          },
          {
            "code": [
              "eventType",
              ".",
              ".bind( \"click.name\", handler )",
              "click",
              "name",
              ".unbind()"
            ]
          },
          {
            "a": [
              {
                "href": "/click/",
                "code": ".click()"
              },
              {
                "href": "/category/events/",
                "$t": "events category"
              }
            ]
          },
          "When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.",
          {
            "code": ".bind()"
          },
          {
            "code": ["foo", "click"]
          },
          "Multiple event types can be bound at once by including each one separated by a space:",
          {
            "code": ["<div id=\"foo\">", "<div>"]
          },
          "As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing an object of event type/handler pairs:",
          {
            "code": ["handler", "this", "$()"]
          },
          {
            "code": "foo"
          },
          "As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. This is useful when the event data feature is being used, or when other unique data resides in a closure around the event handler function.",
          {
            "code": [
              "false",
              "function(){ return false; }",
              ".unbind( eventName, false )"
            ]
          },
          {
            "code": "handler"
          },
          {
            "a": {
              "href": "/category/events/event-object/",
              "$t": "View the full Event Object"
            }
          },
          {
            "code": ["false", ".preventDefault()", ".stopPropagation()"]
          },
          "Using the event object in a handler looks like this:",
          {
            "code": "foo"
          },
          {
            "code": "eventData"
          },
          {
            "code": ["message", "eventData"],
            "samp": "Not in the face!"
          },
          {
            "em": "by value",
            "code": "eventData",
            "samp": ["Spoon!", "Not in the face!"]
          },
          {
            "code": ["eventData", ".bind()"]
          },
          "As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.",
          {
            "strong": "Note:",
            "code": ["click", "dblclick", "dblclick"]
          }
        ],
        "pre": [
          {
            "code":
              "$( \"#foo\" ).bind( \"click\", function() { \n  alert( \"User clicked on 'foo.'\" );\n});"
          },
          {
            "code":
              "$( \"#foo\" ).bind( \"mouseenter mouseleave\", function() { \n  $( this ).toggleClass( \"entered\" );\n});"
          },
          {
            "code":
              "$( \"#foo\" ).bind({ \n  click: function() { \n    // Do something on click\n  },\n  mouseenter: function() { \n    // Do something on mouseenter\n  }\n});"
          },
          {
            "code":
              "$( \"#foo\" ).bind( \"click\", function() { \n  alert( $( this ).text() );\n});"
          },
          {
            "code":
              "$( document ).ready(function() { \n  $( \"#foo\" ).bind( \"click\", function( event ) { \n    alert( \"The mouse cursor is at (\" +\n      event.pageX + \", \" + event.pageY +\n      \")\" );\n  });\n});"
          },
          {
            "code":
              "var message = \"Spoon!\";\n$( \"#foo\" ).bind( \"click\", function() { \n  alert( message );\n});\nmessage = \"Not in the face!\";\n$( \"#bar\" ).bind( \"click\", function() { \n  alert( message );\n});"
          },
          {
            "code":
              "var message = \"Spoon!\";\n$( \"#foo\" ).bind( \"click\", { \n  msg: message\n}, function( event ) { \n  alert( event.data.msg );\n});\nmessage = \"Not in the face!\";\n$( \"#bar\" ).bind( \"click\", { \n  msg: message\n}, function( event ) { \n  alert( event.data.msg );\n});"
          }
        ],
        "h4": [
          {
            "id": "multiple-events",
            "$t": "Multiple Events"
          },
          {
            "id": "event-handlers",
            "$t": "Event Handlers"
          },
          {
            "id": "event-object",
            "a": {
              "href": "/category/events/event-object/",
              "$t": "The Event object"
            }
          },
          {
            "id": "passing-event-data",
            "$t": "Passing Event Data"
          }
        ],
        "div": [
          {
            "class": "warning",
            "p": {
              "em": "by reference"
            }
          },
          {
            "class": "warning",
            "p": {
              "code": ".trigger()"
            }
          }
        ]
      },
      "example": [
        {
          "desc":
            "Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.",
          "code":
            "$( \"p\" ).bind( \"click\", function( event ) { \n  var str = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n  $( \"span\" ).text( \"Click happened! \" + str );\n});\n$( \"p\" ).bind( \"dblclick\", function() { \n  $( \"span\" ).text( \"Double-click happened in \" + this.nodeName );\n});\n$( \"p\" ).bind( \"mouseenter mouseleave\", function( event ) { \n  $( this ).toggleClass( \"over\" );\n});",
          "css":
            "p { \n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over { \n     background: #ccc;\n  }\n  span { \n    color: red;\n  }",
          "html": "<p>Click or double click here.</p>\n<span></span>"
        },
        {
          "desc":
            "To display each paragraph's text in an alert box whenever it is clicked:",
          "code":
            "$( \"p\" ).bind( \"click\", function() { \n  alert( $( this ).text() );\n});"
        },
        {
          "desc": "You can pass some extra data before the event handler:",
          "code":
            "function handler( event ) { \n  alert( event.data.foo );\n}\n$( \"p\" ).bind( \"click\", { \n  foo: \"bar\"\n}, handler );"
        },
        {
          "desc": {
            "code": "false"
          },
          "code":
            "$( \"form\" ).bind( \"submit\", function() { \n  return false;\n})"
        },
        {
          "desc":
            "Cancel only the default action by using the .preventDefault() method.",
          "code":
            "$( \"form\" ).bind( \"submit\", function( event ) { \n  event.preventDefault();\n});"
        },
        {
          "desc":
            "Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.",
          "code":
            "$( \"form\" ).bind( \"submit\", function( event ) { \n  event.stopPropagation();\n});"
        },
        {
          "desc": "Bind custom events.",
          "code":
            "$( \"p\" ).bind( \"myCustomEvent\", function( e, myName, myValue ) { \n  $( this ).text( myName + \", hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n  });\n$( \"button\" ).click(function() { \n  $( \"p\" ).trigger( \"myCustomEvent\", [ \"John\" ] );\n});",
          "css": "p { \n    color: red;\n  }\n  span { \n    color: blue;\n  }",
          "html":
            "<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style=\"display: none;\"></span>"
        },
        {
          "desc": "Bind multiple events simultaneously.",
          "code":
            "$( \"div.test\" ).bind({ \n  click: function() { \n    $( this ).addClass( \"active\" );\n  },\n  mouseenter: function() { \n    $( this ).addClass( \"inside\" );\n  },\n  mouseleave: function() { \n    $( this ).removeClass( \"inside\" );\n  }\n});"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "blur",
      "return": "jQuery",
      "title": ".blur()",
      "desc":
        "Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"blur\", handler )", ".trigger( \"blur\" )"]
          },
          {
            "code": ["blur", "<input>"]
          },
          "For example, consider the HTML:",
          "Now if the first field has the focus, clicking elsewhere or tabbing away from it displays the alert:",
          {
            "samp": "Handler for .blur() called."
          },
          {
            "code": ".blur()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["blur", "blur", "blur", "focusout"],
            "a": [
              {
                "href": "/live/",
                "code": ".live()"
              },
              {
                "href": "/delegate/",
                "code": ".delegate()"
              }
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input id=\"target\" type=\"text\" value=\"Field 1\">\n  <input type=\"text\" value=\"Field 2\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>\nThe event handler can be bound to the first input field:\n$( \"#target\" ).blur(function() { \n  alert( \"Handler for .blur() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() { \n  $( \"#target\" ).blur();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "blur"
      },
      "example": {
        "desc": "To trigger the blur event on all paragraphs:",
        "code": "$( \"p\" ).blur();"
      },
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "button",
      "return": "",
      "title": ":button Selector",
      "sample": ":button",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all button elements and elements of type button.",
      "longdesc": {
        "p": {
          "code": ["$( \":button\" )", "$( \"button, input[type='button']\" )"]
        }
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":button"
      },
      "example": {
        "desc": "Find all button inputs and mark them.",
        "code":
          "var input = $( \":button\" ).addClass( \"marked\" );\n$( \"div\" ).text( \"For this type jQuery found \" + input.length + \".\" );\n// Prevent the form from submitting\n$( \"form\" ).submit(function( event ) { \n  event.preventDefault();\n});",
        "css":
          "textarea { \n    height: 35px;\n  }\n  div { \n    color: red;\n  }\n  fieldset { \n    margin: 0;\n    padding: 0;\n    border-width: 0;\n  }\n  .marked { \n    background-color: yellow;\n    border: 3px red solid;\n  }",
        "html":
          "<form>\n  <fieldset>\n    <input type=\"button\" value=\"Input Button\">\n    <input type=\"checkbox\">\n\n    <input type=\"file\">\n    <input type=\"hidden\">\n    <input type=\"image\">\n\n    <input type=\"password\">\n    <input type=\"radio\">\n    <input type=\"reset\">\n\n    <input type=\"submit\">\n    <input type=\"text\">\n    <select>\n      <option>Option</option>\n    </select>\n\n    <textarea></textarea>\n    <button>Button</button>\n  </fieldset>\n</form>\n\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.add",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.add()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "callbacks",
          "desc":
            "A function, or array of functions, that are to be added to the callback list.",
          "type": [
            {
              "name": "Function"
            },
            {
              "name": "Array"
            }
          ]
        }
      },
      "desc": "Add a callback or a collection of callbacks to a callback list.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.add()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo: \" + value );\n};\n\n// Another function to also be added to the list\nvar bar = function( value ) { \n  console.log( \"bar: \" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n\n// Fire the items on the list\ncallbacks.fire( \"hello\" );\n// Outputs: \"foo: hello\"\n\n// Add the function \"bar\" to the list\ncallbacks.add( bar );\n\n// Fire the items on the list again\ncallbacks.fire( \"world\" );\n\n// Outputs:\n// \"foo: world\"\n// \"bar: world\""
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.disable",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.disable()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Disable a callback list from doing anything more.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.disable()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the above function to the list\ncallbacks.add( foo );\n\n// Fire the items on the list\ncallbacks.fire( \"foo\" );\n// Outputs: foo\n\n// Disable further calls being possible\ncallbacks.disable();\n\n// Attempt to fire with \"foobar\" as an argument\ncallbacks.fire( \"foobar\" );\n// foobar isn't output"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.disabled",
      "type": "method",
      "return": "Boolean",
      "title": "callbacks.disabled()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Determine if the callbacks list has been disabled.",
      "longdesc": {},
      "example": {
        "desc": {
          "code": "callbacks.disabled()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the logging function to the callback list\ncallbacks.add( foo );\n\n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n\n// Disable the callbacks list\ncallbacks.disable();\n\n// Test the disabled state of the list\nconsole.log ( callbacks.disabled() );\n// Outputs: true"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.empty",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.empty()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Remove all of the callbacks from a list.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.empty()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) { \n  console.log( \"foo: \" + value1 + \",\" + value2 );\n};\n\n// Another function to also be added to the list\nvar bar = function( value1, value2 ) { \n  console.log( \"bar: \" + value1 + \",\" + value2 );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the two functions\ncallbacks.add( foo );\ncallbacks.add( bar );\n\n// Empty the callbacks list\ncallbacks.empty();\n\n// Check to ensure all callbacks have been removed\nconsole.log( callbacks.has( foo ) );\n// false\nconsole.log( callbacks.has( bar ) );\n// false"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.fire",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.fire()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "arguments",
          "type": "Anything",
          "desc":
            "The argument or list of arguments to pass back to the callback list."
        }
      },
      "desc": "Call all of the callbacks with the given arguments.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.fire()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n\n// Fire the items on the list\ncallbacks.fire( \"hello\" ); // Outputs: \"foo: hello\"\ncallbacks.fire( \"world\" ); // Outputs: \"foo: world\"\n\n// Add another function to the list\nvar bar = function( value ){ \n  console.log( \"bar:\" + value );\n};\n\n// Add this function to the list\ncallbacks.add( bar );\n\n// Fire the items on the list again\ncallbacks.fire( \"hello again\" );\n// Outputs:\n// \"foo: hello again\"\n// \"bar: hello again\""
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.fireWith",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.fireWith()",
      "signature": {
        "added": "1.7",
        "argument": [
          {
            "name": "context",
            "optional": "true",
            "type": "Anything",
            "desc":
              "A reference to the context in which the callbacks in the list should be fired."
          },
          {
            "name": "args",
            "optional": "true",
            "type": "ArrayLikeObject",
            "desc":
              "An array or array-like object of arguments to pass to the callbacks in the list. If omitted or undefined, no arguments will be passed."
          }
        ]
      },
      "desc":
        "Call all callbacks in a list with the given context and arguments.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.fireWith()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar log = function( value1, value2 ) { \n  console.log( \"Received: \" + value1 + \",\" + value2 );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the log method to the callbacks list\ncallbacks.add( log );\n\n// Fire the callbacks on the list using the context \"window\"\n// and an arguments array\n\ncallbacks.fireWith( window, [ \"foo\",\"bar\" ] );\n// Outputs: \"Received: foo, bar\""
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.fired",
      "type": "method",
      "return": "Boolean",
      "title": "callbacks.fired()",
      "signature": {
        "added": "1.7"
      },
      "desc":
        "Determine if the callbacks have already been called at least once.",
      "longdesc": {},
      "example": {
        "desc": {
          "code": "callbacks.fired()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n\n// Fire the items on the list\ncallbacks.fire( \"hello\" ); // Outputs: \"foo: hello\"\ncallbacks.fire( \"world\" ); // Outputs: \"foo: world\"\n\n// Test to establish if the callbacks have been called\nconsole.log( callbacks.fired() );"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.has",
      "type": "method",
      "return": "Boolean",
      "title": "callbacks.has()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "callback",
          "type": "Function",
          "optional": "true",
          "desc": "The callback to search for."
        }
      },
      "desc":
        "Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.",
      "longdesc": {},
      "example": {
        "desc": {
          "code": "callbacks.has()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) { \n  console.log( \"Received: \" + value1 + \",\" + value2 );\n};\n\n// A second function which will not be added to the list\nvar bar = function( value1, value2 ) { \n  console.log( \"foobar\" );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the log method to the callbacks list\ncallbacks.add( foo );\n\n// Determine which callbacks are in the list\nconsole.log( callbacks.has( foo ) );\n// true\nconsole.log( callbacks.has( bar ) );\n// false"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.lock",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.lock()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Lock a callback list in its current state.",
      "longdesc": {
        "p": [
          {
            "code": "this"
          },
          {
            "code": "\"memory\""
          }
        ]
      },
      "example": [
        {
          "desc": {
            "code": "callbacks.lock()"
          },
          "code":
            "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the logging function to the callback list\ncallbacks.add( foo );\n\n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n\n// Lock the callbacks list\ncallbacks.lock();\n\n// Try firing the items again\ncallbacks.fire( \"world\" );\n\n// As the list was locked, no items were called,\n// so \"world\" isn't logged"
        },
        {
          "desc": {
            "code": "callbacks.lock()"
          },
          "html": "<div id=\"log\"></div>",
          "code":
            "// Simple function for logging results\nvar log = function( value ) { \n  $( \"#log\" ).append( \"<p>\" + value + \"</p>\" );\n};\n\n// Two sample functions to be added to a callbacks list\nvar foo = function( value ) { \n  log( \"foo: \" + value );\n};\nvar bar = function( value ) { \n  log( \"bar: \" + value );\n};\n\n// Create the callbacks object with the \"memory\" flag\nvar callbacks = $.Callbacks( \"memory\" );\n\n// Add the foo logging function to the callback list\ncallbacks.add( foo );\n\n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n\n// Lock the callbacks list\ncallbacks.lock();\n\n// Try firing the items again\ncallbacks.fire( \"world\" );\n// As the list was locked, no items were called,\n// so \"foo: world\" isn't logged\n\n// Add the foo function to the callback list again\ncallbacks.add( foo );\n\n// Try firing the items again\ncallbacks.fire( \"silentArgument\" );\n// Outputs \"foo: hello\" because the argument value was stored in memory\n\n// Add the bar function to the callback list\ncallbacks.add( bar );\n\ncallbacks.fire( \"youHadMeAtHello\" );\n// Outputs \"bar: hello\" because the list is still locked,\n// and the argument value is still stored in memory"
        }
      ],
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.locked",
      "type": "method",
      "return": "Boolean",
      "title": "callbacks.locked()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Determine if the callbacks list has been locked.",
      "longdesc": {},
      "example": {
        "desc": {
          "code": "callbacks.locked()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo: \" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the logging function to the callback list\ncallbacks.add( foo );\n\n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n\n// Lock the callbacks list\ncallbacks.lock();\n\n// Test the lock-state of the list\nconsole.log ( callbacks.locked() );\n// true"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "callbacks.remove",
      "type": "method",
      "return": "Callbacks",
      "title": "callbacks.remove()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "callbacks",
          "desc":
            "A function, or array of functions, that are to be removed from the callback list.",
          "type": [
            {
              "name": "Function"
            },
            {
              "name": "Array"
            }
          ]
        }
      },
      "desc":
        "Remove a callback or a collection of callbacks from a callback list.",
      "longdesc": {
        "p": {
          "code": "this"
        }
      },
      "example": {
        "desc": {
          "code": "callbacks.remove()"
        },
        "code":
          "// A sample logging function to be added to a callbacks list\nvar foo = function( value ) { \n  console.log( \"foo: \" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n\n// Fire the items on the list\ncallbacks.fire( \"hello\" );\n// Outputs: \"foo: hello\"\n\n// Remove \"foo\" from the callback list\ncallbacks.remove( foo );\n\n// Fire the items on the list again\ncallbacks.fire( \"world\" );\n\n// Nothing output as \"foo\" is no longer in the list"
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "change",
      "return": "jQuery",
      "title": ".change()",
      "desc":
        "Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"change\", handler )", ".trigger( \"change\" )"]
          },
          {
            "code": ["change", "<input>", "<textarea>", "<select>"]
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the text input and the select box:",
          {
            "code": ".change()"
          },
          {
            "samp": "Trigger the handler",
            "code": "change"
          },
          {
            "code": "change"
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input class=\"target\" type=\"text\" value=\"Field 1\">\n  <select class=\"target\">\n    <option value=\"option1\" selected=\"selected\">Option 1</option>\n    <option value=\"option2\">Option 2</option>\n  </select>\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \".target\" ).change(function() { \n  alert( \"Handler for .change() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() { \n  $( \".target\" ).change();\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "a": {
              "href": "/val",
              "code": ".val()"
            }
          }
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "change"
      },
      "example": [
        {
          "desc":
            "Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.",
          "code":
            "$( \"select\" )\n  .change(function () { \n    var str = \"\";\n    $( \"select option:selected\" ).each(function() { \n      str += $( this ).text() + \" \";\n    });\n    $( \"div\" ).text( str );\n  })\n  .change();",
          "css": "div { \n    color: red;\n  }",
          "html":
            "<select name=\"sweets\" multiple=\"multiple\">\n  <option>Chocolate</option>\n  <option selected=\"selected\">Candy</option>\n  <option>Taffy</option>\n  <option selected=\"selected\">Caramel</option>\n  <option>Fudge</option>\n  <option>Cookie</option>\n</select>\n<div></div>"
        },
        {
          "desc": "To add a validity test to all text input elements:",
          "code":
            "$( \"input[type='text']\" ).change(function() { \n  // Check input( $( this ).val() ) for validity here\n});"
        }
      ],
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "checkbox",
      "return": "",
      "title": ":checkbox Selector",
      "sample": ":checkbox",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type checkbox.",
      "longdesc": {
        "p": {
          "code": [
            "$( \":checkbox\" )",
            "$( \"[type=checkbox]\" )",
            "$(':checkbox')",
            "$( \"*:checkbox\" )",
            "$( \"input:checkbox\" )"
          ]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":checkbox",
        "data-alt": "[type=\"checkbox\"]"
      },
      "example": {
        "desc": "Finds all checkbox inputs.",
        "code":
          "var input = $( \"form input:checkbox\" )\n  .wrap( \"<span></span>\" )\n  .parent()\n  .css({ \n    background: \"yellow\",\n    border: \"3px red solid\"\n  });\n\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n\n// Prevent the form from submitting\n$( \"form\" ).submit(function( event ) { \n    event.preventDefault();\n});",
        "css": "textarea { \n    height: 25px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n\n  <select>\n    <option>Option</option>\n  </select>\n\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "checked",
      "return": "",
      "title": ":checked Selector",
      "sample": ":checked",
      "signature": {
        "added": "1.0"
      },
      "desc": "Matches all elements that are checked or selected.",
      "longdesc": {
        "p": [
          {
            "code": [":checked", "select"]
          },
          {
            "code": "select",
            "a": {
              "href": "/selected-selector/",
              "code": ":selected"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Determine how many input elements are checked.",
          "code":
            "var countChecked = function() { \n  var n = $( \"input:checked\" ).length;\n  $( \"div\" ).text( n + (n === 1 ? \" is\" : \" are\") + \" checked!\" );\n};\ncountChecked();\n\n$( \"input[type=checkbox]\" ).on( \"click\", countChecked );",
          "css": "div { \n    color: red;\n  }",
          "html":
            "<form>\n  <p>\n    <input type=\"checkbox\" name=\"newsletter\" value=\"Hourly\" checked=\"checked\">\n\n    <input type=\"checkbox\" name=\"newsletter\" value=\"Daily\">\n    <input type=\"checkbox\" name=\"newsletter\" value=\"Weekly\">\n\n    <input type=\"checkbox\" name=\"newsletter\" value=\"Monthly\" checked>\n    <input type=\"checkbox\" name=\"newsletter\" value=\"Yearly\">\n  </p>\n</form>\n<div></div>"
        },
        {
          "desc": "Identify the checked radio input.",
          "code":
            "$( \"input\" ).on( \"click\", function() { \n  $( \"#log\" ).html( $( \"input:checked\" ).val() + \" is checked!\" );\n});",
          "css": "input, label { \n    line-height: 1.5em;\n  }",
          "html":
            "<form>\n  <div>\n    <input type=\"radio\" name=\"fruit\" value=\"orange\" id=\"orange\">\n    <label for=\"orange\">orange</label>\n  </div>\n  <div>\n    <input type=\"radio\" name=\"fruit\" value=\"apple\" id=\"apple\">\n    <label for=\"apple\">apple</label>\n  </div>\n  <div>\n    <input type=\"radio\" name=\"fruit\" value=\"banana\" id=\"banana\">\n    <label for=\"banana\">banana</label>\n  </div>\n  <div id=\"log\"></div>\n</form>"
        }
      ],
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "child",
      "return": "",
      "title": "Child Selector (\"parent > child\")",
      "sample": "parent > child",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "parent",
            "type": "Selector",
            "desc": "Any valid selector."
          },
          {
            "name": "child",
            "type": "Selector",
            "desc": "A selector to filter the child elements."
          }
        ]
      },
      "desc":
        "Selects all direct child elements specified by \"child\" of elements specified by \"parent\".",
      "longdesc": {
        "p": {
          "strong": ">"
        }
      },
      "example": {
        "desc":
          "Places a border around all list items that are children of <ul class=\"topnav\"> .",
        "code":
          "$( \"ul.topnav > li\" ).css( \"border\", \"3px double red\" );",
        "css": "body { \n    font-size: 14px;\n  }",
        "html":
          "<ul class=\"topnav\">\n  <li>Item 1</li>\n  <li>Item 2\n    <ul>\n    <li>Nested item 1</li>\n    <li>Nested item 2</li>\n    <li>Nested item 3</li>\n    </ul>\n  </li>\n  <li>Item 3</li>\n</ul>"
      },
      "category": [
        {
          "slug": "selectors/hierarchy-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "children",
      "return": "jQuery",
      "title": ".children()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the children of each element in the set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".children()",
              ".children()",
              {
                "a": {
                  "href": "/find/",
                  "$t": ".find()"
                }
              },
              ".children()",
              ".find()",
              ".children()",
              {
                "a": {
                  "href": "/contents/",
                  "$t": ".contents()"
                }
              }
            ],
            "em": "all"
          },
          {
            "code": [".children()", "$()"]
          },
          "Consider a page with a basic nested list on it:",
          "If we begin at the level-2 list, we can find its children:",
          "The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included."
        ],
        "pre": [
          {
            "code":
              "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
          },
          {
            "code":
              "$( \"ul.level-2\" ).children().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc": "Find all children of the clicked element.",
          "code":
            "$( \"#container\" ).click(function ( event ) { \n  $( \"*\" ).removeClass( \"hilite\" );\n  var kids = $( event.target ).children();\n  var len = kids.addClass( \"hilite\" ).length;\n\n  $( \"#results span:first\" ).text( len );\n  $( \"#results span:last\" ).text( event.target.tagName );\n\n  event.preventDefault();\n});",
          "css":
            "body { \n    font-size: 16px;\n    font-weight: bolder;\n  }\n  div { \n    width: 130px;\n    height: 82px;\n    margin: 10px;\n    float: left;\n    border: 1px solid blue;\n    padding: 4px;\n  }\n  #container { \n    width: auto;\n    height: 105px;\n    margin: 0;\n    float: none;\n    border: none;\n  }\n  .hilite { \n    border-color: red;\n  }\n  #results { \n    display: block;\n    color: red;\n  }\n  p, span, em, a, b, button { \n    border: 1px solid transparent;\n  }\n  p { \n    margin: 10px;\n  }\n  span { \n    color: blue;\n  }\n  input { \n    width: 100px;\n  }",
          "html":
            "<div id=\"container\">\n  <div>\n    <p>This <span>is the <em>way</em> we</span>\n      write <em>the</em> demo,</p>\n  </div>\n\n  <div>\n    <a href=\"#\"><b>w</b>rit<b>e</b></a> the <span>demo,</span> <button>write\n    the</button> demo,\n  </div>\n\n  <div>\n    This <span>the way we <em>write</em> the <em>demo</em> so</span>\n    <input type=\"text\" value=\"early\"> in\n  </div>\n\n  <p>\n    <span>t</span>he <span>m</span>orning.\n    <span id=\"results\">Found <span>0</span> children in <span>TAG</span>.</span>\n  </p>\n</div>"
        },
        {
          "desc": "Find all children of each div.",
          "code":
            "$( \"div\" ).children().css( \"border-bottom\", \"3px double red\" );",
          "css":
            "body { \n    font-size: 16px;\n    font-weight: bolder;\n  }\n  span { \n    color: blue;\n  }\n  p { \n    margin: 5px 0;\n  }",
          "html":
            "<p>Hello (this is a paragraph)</p>\n\n<div><span>Hello Again (this span is a child of the a div)</span></div>\n<p>And <span>Again</span> (in another paragraph)</p>\n\n<div>And One Last <span>Time</span> (most text directly in a div)</div>"
        },
        {
          "desc": "Find all children with a class \"selected\" of each div.",
          "code":
            "$( \"div\" ).children( \".selected\" ).css( \"color\", \"blue\" );",
          "css":
            "body { \n    font-size: 16px;\n    font-weight: bolder;\n  }\n  p { \n    margin: 5px 0;\n  }",
          "html":
            "<div>\n  <span>Hello</span>\n  <p class=\"selected\">Hello Again</p>\n  <div class=\"selected\">And Again</div>\n  <p>And One Last Time</p>\n</div>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "class",
      "return": "",
      "title": "Class Selector (\".class\")",
      "sample": ".class",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "class",
          "type": "String",
          "desc":
            "A class to search for. An element can have multiple classes; only one of them must match."
        }
      },
      "desc": "Selects all elements with the given class.",
      "longdesc": {
        "p": {
          "code": "getElementsByClassName()"
        }
      },
      "example": [
        {
          "desc": "Finds the element with the class \"myClass\".",
          "code": "$( \".myClass\" ).css( \"border\", \"3px solid red\" );",
          "html":
            "<div class=\"notMe\">div class=\"notMe\"</div>\n<div class=\"myClass\">div class=\"myClass\"</div>\n<span class=\"myClass\">span class=\"myClass\"</span>",
          "css":
            "div, span { \n    width: 120px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }"
        },
        {
          "desc":
            "Finds the element with both \"myclass\" and \"otherclass\" classes.",
          "code":
            "$( \".myclass.otherclass\" ).css( \"border\", \"13px solid red\" );",
          "html":
            "<div class=\"myclass\">div class=\"notMe\"</div>\n<div class=\"myclass otherclass\">div class=\"myClass\"</div>\n<span class=\"myclass otherclass\">span class=\"myClass\"</span>",
          "css":
            "div, span { \n    width: 120px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }"
        }
      ],
      "category": [
        {
          "slug": "selectors/basic-css-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "clearQueue",
      "return": "jQuery",
      "title": ".clearQueue()",
      "signature": {
        "added": "1.4",
        "argument": {
          "name": "queueName",
          "optional": "true",
          "type": "String",
          "desc": {
            "code": "fx"
          }
        }
      },
      "desc": "Remove from the queue all items that have not yet been run.",
      "longdesc": {
        "p": {
          "code": [
            ".clearQueue()",
            ".clearQueue()",
            "fx",
            ".stop(true)",
            ".stop()",
            ".clearQueue()",
            ".queue()"
          ]
        }
      },
      "example": {
        "desc": "Empty the queue.",
        "code":
          "$( \"#start\" ).click(function() { \n  var myDiv = $( \"div\" );\n  myDiv.show( \"slow\" );\n  myDiv.animate({ \n    left:\"+=200\"\n  }, 5000 );\n\n  myDiv.queue(function() { \n    var that = $( this );\n    that.addClass( \"newcolor\" );\n    that.dequeue();\n  });\n\n  myDiv.animate({ \n    left:\"-=200\"\n  }, 1500 );\n  myDiv.queue(function() { \n    var that = $( this );\n    that.removeClass( \"newcolor\" );\n    that.dequeue();\n  });\n  myDiv.slideUp();\n});\n\n$( \"#stop\" ).click(function() { \n  var myDiv = $( \"div\" );\n  myDiv.clearQueue();\n  myDiv.stop();\n});",
        "css":
          "div { \n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor { \n    background: blue;\n  }",
        "html":
          "<button id=\"start\">Start</button>\n<button id=\"stop\">Stop</button>\n<div></div>"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "data"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "click",
      "return": "jQuery",
      "title": ".click()",
      "desc":
        "Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"click\", handler )",
              ".trigger( \"click\" )",
              "click"
            ]
          },
          {
            "code": "<div>"
          },
          "Now if we click on this element, the alert is displayed:",
          {
            "samp": "Handler for .click() called."
          },
          "We can also trigger the event when a different element is clicked:",
          {
            "samp": "Trigger the handler"
          },
          {
            "code": "click"
          },
          {
            "code": ["mousedown", "mouseup"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\">\n  Click here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).click(function() {   alert( \"Handler for .click() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).click();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_03.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        },
        "ul": {
          "li": [
            "The mouse button is depressed while the pointer is inside the element.",
            "The mouse button is released while the pointer is inside the element."
          ]
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "click"
      },
      "example": [
        {
          "desc": "Hide paragraphs on a page when they are clicked:",
          "code": "$( \"p\" ).click(function() {   $( this ).slideUp();\n});",
          "css":
            "p {     color: red;\n    margin: 5px;\n    cursor: pointer;\n  }\n  p:hover {     background: yellow;\n  }",
          "html":
            "<p>First Paragraph</p>\n<p>Second Paragraph</p>\n<p>Yet one more Paragraph</p>"
        },
        {
          "desc":
            "Trigger the click event on all of the paragraphs on the page:",
          "code": "$( \"p\" ).click();"
        }
      ],
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "clone",
      "return": "jQuery",
      "title": ".clone()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "withDataAndEvents",
            "optional": "true",
            "type": "Boolean",
            "default": "false",
            "desc":
              "A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well."
          }
        },
        {
          "added": "1.5",
          "argument": [
            {
              "name": "withDataAndEvents",
              "optional": "true",
              "type": "Boolean",
              "default": "false",
              "desc": {
                "code": "false",
                "em": {
                  "code": ["true", "false"]
                }
              }
            },
            {
              "name": "deepWithDataAndEvents",
              "optional": "true",
              "type": "Boolean",
              "default": "value of withDataAndEvents",
              "desc": {
                "code": "false"
              }
            }
          ]
        }
      ],
      "desc": "Create a deep copy of the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": ".clone()",
            "em": "deep"
          },
          {
            "code": ".clone()"
          },
          {
            "code": {
              "a": {
                "href": "/append/",
                "$t": ".append()"
              }
            }
          },
          "The resulting DOM structure would be:",
          "To prevent this and instead create a copy of the element, you could write the following:",
          "This would produce:",
          {
            "em": "not",
            "code": ["withDataAndEvents", ".data()"]
          },
          "However, objects and arrays within element data are not copied and will continue to be shared between the cloned element and the original element. To deep copy all data, copy each one manually:",
          {
            "code": ["withDataAndEvents", "deepWithDataAndEvents"]
          }
        ],
        "div": [
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": ["textarea", "select", "input"]
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": ".clone()"
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": [".clone()", "id", "class"]
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".hello\" ).appendTo( \".goodbye\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"goodbye\">\n    Goodbye\n    <div class=\"hello\">Hello</div>\n  </div>\n</div>"
          },
          {
            "code": "$( \".hello\" ).clone().appendTo( \".goodbye\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">\n    Goodbye\n    <div class=\"hello\">Hello</div>\n  </div>\n</div>"
          },
          {
            "code":
              "// Original element with attached data\nvar $elem = $( \"#elem\" ).data( \"arr\", [ 1 ] ),\n    $clone = $elem.clone( true )\n      // Deep copy to prevent data sharing\n      .data( \"arr\", $.extend( [], $elem.data( \"arr\" ) ) );"
          }
        ]
      },
      "example": {
        "desc":
          "Clones all b elements (and selects the clones) and prepends them to all paragraphs.",
        "code": "$( \"b\" ).clone().prependTo( \"p\" );",
        "html": "<b>Hello</b><p>, how are you?</p>"
      },
      "category": [
        {
          "slug": "manipulation/copying"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entries": {
      "entry": [
        {
          "type": "method",
          "name": "closest",
          "return": "jQuery",
          "title": ".closest()",
          "signature": [
            {
              "added": "1.3",
              "argument": {
                "name": "selector",
                "type": "Selector",
                "desc":
                  "A string containing a selector expression to match elements against."
              }
            },
            {
              "added": "1.4",
              "argument": [
                {
                  "name": "selector",
                  "type": "Selector",
                  "desc":
                    "A string containing a selector expression to match elements against."
                },
                {
                  "name": "context",
                  "optional": "true",
                  "type": "Element",
                  "desc":
                    "A DOM element within which a matching element may be found."
                }
              ]
            },
            {
              "added": "1.6",
              "argument": {
                "name": "selection",
                "type": "jQuery",
                "desc": "A jQuery object to match elements against."
              }
            },
            {
              "added": "1.6",
              "argument": {
                "name": "element",
                "type": "Element",
                "desc": "An element to match elements against."
              }
            }
          ],
          "desc":
            "For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.",
          "longdesc": {
            "p": [
              {
                "code": [".closest()", ".closest()"],
                "a": {
                  "href": "/parents/",
                  "code": ".parents()"
                }
              },
              {
                "code": "<ul>"
              },
              {
                "code": "<ul>"
              },
              {
                "code": "<li>"
              },
              {
                "code": ".closest()",
                "em": "with the element itself"
              },
              "We can pass in a DOM element as the context within which to search for the closest element.",
              {
                "code": ["<ul>", "<ul>", "<ul>"]
              }
            ],
            "table": {
              "thead": {
                "tr": {
                  "th": [
                    {
                      "code": ".closest()"
                    },
                    {
                      "a": {
                        "href": "/parents/",
                        "code": ".parents()"
                      }
                    }
                  ]
                }
              },
              "tbody": {
                "tr": [
                  {
                    "td": [
                      "Begins with the current element",
                      "Begins with the parent element"
                    ]
                  },
                  {
                    "td": [
                      "Travels up the DOM tree until it finds a match for the supplied selector",
                      "Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied"
                    ]
                  },
                  {
                    "td": [
                      "The returned jQuery object contains zero or one element for each element in the original set, in document order",
                      "The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order"
                    ]
                  }
                ]
              }
            },
            "pre": [
              {
                "code":
                  "<ul id=\"one\" class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li id=\"ii\" class=\"item-ii\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
              },
              {
                "code":
                  "$( \"li.item-a\" )\n  .closest( \"ul\" )\n  .css( \"background-color\", \"red\" );"
              },
              {
                "code":
                  "$( \"li.item-a\" )\n  .closest( \"li\" )\n  .css( \"background-color\", \"red\" );"
              },
              {
                "code":
                  "var listItemII = document.getElementById( \"ii\" );\n$( \"li.item-a\" )\n  .closest( \"ul\", listItemII )\n  .css( \"background-color\", \"red\" );\n$( \"li.item-a\" )\n  .closest( \"#one\", listItemII )\n  .css( \"background-color\", \"green\" );"
              }
            ]
          },
          "example": [
            {
              "desc":
                "Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.",
              "code":
                "$( document ).on( \"click\", function( event ) {   $( event.target ).closest( \"li\" ).toggleClass( \"highlight\" );\n});",
              "css":
                "li {     margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.highlight {     background: yellow;\n  }",
              "html":
                "<ul>\n  <li><b>Click me!</b></li>\n  <li>You can also <b>Click me!</b></li>\n</ul>"
            },
            {
              "desc":
                "Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.",
              "code":
                "var listElements = $( \"li\" ).css( \"color\", \"blue\" );\n$( document ).on( \"click\", function( event ) {   $( event.target ).closest( listElements ).toggleClass( \"highlight\" );\n});",
              "css":
                "li {     margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.highlight {     background: yellow;\n  }",
              "html":
                "<ul>\n  <li><b>Click me!</b></li>\n  <li>You can also <b>Click me!</b></li>\n</ul>"
            }
          ],
          "category": [
            {
              "slug": "traversing/tree-traversal"
            },
            {
              "slug": "version/1.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "closest",
          "return": "Array",
          "deprecated": "1.7",
          "removed": "1.8",
          "signature": {
            "added": "1.4",
            "argument": [
              {
                "name": "selectors",
                "type": "Array",
                "desc":
                  "An array or string containing a selector expression to match elements against (can also be a jQuery object)."
              },
              {
                "name": "context",
                "optional": "true",
                "type": "Element",
                "desc":
                  "A DOM element within which a matching element may be found."
              }
            ]
          },
          "desc":
            "Get an array of all the elements and selectors matched against the current element up through the DOM tree.",
          "longdesc": {
            "div": {
              "class": "warning",
              "strong": {
                "em": "removed"
              }
            }
          },
          "category": [
            {
              "slug": "traversing/tree-traversal"
            },
            {
              "slug": "version/1.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.6"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "contains",
      "return": "",
      "title": ":contains() Selector",
      "sample": ":contains(text)",
      "signature": {
        "added": "1.1.4",
        "argument": {
          "name": "text",
          "type": "String",
          "desc": "A string of text to look for. It's case sensitive."
        }
      },
      "desc": "Select all elements that contain the specified text.",
      "longdesc": {
        "p": {
          "code": ":contains()"
        }
      },
      "example": {
        "desc": "Finds all divs containing \"John\" and underlines them.",
        "code":
          "$( \"div:contains('John')\" ).css( \"text-decoration\", \"underline\" );",
        "html":
          "<div>John Resig</div>\n<div>George Martin</div>\n<div>Malcom John Sinclair</div>\n<div>J. Ohn</div>"
      },
      "category": [
        {
          "slug": "selectors/content-filter-selector"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "contents",
      "return": "jQuery",
      "title": ".contents()",
      "signature": {
        "added": "1.2"
      },
      "desc":
        "Get the children of each element in the set of matched elements, including text and comment nodes.",
      "longdesc": {
        "p": [
          {
            "code": [".contents()", ".contents()", ".children()"]
          },
          {
            "code": ".contents()"
          },
          {
            "code": ["<div>", "<br>"]
          },
          {
            "code": ".contents()"
          },
          {
            "code": ["<div class=\"container\">", "<br />"],
            "a": {
              "href": "https://developer.mozilla.org/docs/en/DOM/Node.nodeType",
              "code": ".nodeType"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed\n  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  <br><br>\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco\n  laboris nisi ut aliquip ex ea commodo consequat.\n  <br><br>\n  Duis aute irure dolor in reprehenderit in voluptate velit\n  esse cillum dolore eu fugiat nulla pariatur.\n</div>"
          },
          {
            "code":
              "$( \".container\" )\n  .contents()\n    .filter(function() {       return this.nodeType === 3;\n    })\n      .wrap( \"<p></p>\" )\n      .end()\n    .filter( \"br\" )\n    .remove();"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Find all the text nodes inside a paragraph and wrap them with a bold tag.",
          "code":
            "$( \"p\" )\n  .contents()\n  .filter(function(){     return this.nodeType !== 1;\n  })\n  .wrap( \"<b></b>\" );",
          "html":
            "<p>Hello <a href=\"http://ejohn.org/\">John</a>, how are you doing?</p>"
        },
        {
          "desc": "Change the background color of links inside of an iframe.",
          "code":
            "$( \"#frameDemo\" ).contents().find( \"a\" ).css( \"background-color\", \"#BADA55\" );",
          "html":
            "<iframe src=\"//api.jquery.com/\" width=\"80%\" height=\"600\" id=\"frameDemo\"></iframe>"
        }
      ],
      "category": [
        {
          "slug": "traversing/miscellaneous-traversal"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "context",
      "return": "Element",
      "deprecated": "1.10",
      "removed": "3.0",
      "title": ".context",
      "signature": {
        "added": "1.3"
      },
      "desc": {
        "code": "jQuery()"
      },
      "longdesc": {
        "p": [
          {
            "code": [".context", ".live()"]
          },
          {
            "code": ".live()"
          },
          {
            "code": ["document", "<iframe>"]
          },
          {
            "code": ["jQuery()", ".add()"]
          }
        ]
      },
      "example": {
        "desc": "Determine the exact context used.",
        "code":
          "$( \"ul\" )\n  .append( \"<li>\" + $( \"ul\" ).context + \"</li>\" )\n  .append( \"<li>\" + $( \"ul\", document.body ).context.nodeName + \"</li>\" );",
        "html": "Context: <ul></ul>"
      },
      "category": [
        {
          "slug": "internals"
        },
        {
          "slug": "properties/jquery-object-instance-properties"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "deprecated/deprecated-1.10"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "contextmenu",
      "return": "jQuery",
      "title": ".contextmenu()",
      "desc":
        "Bind an event handler to the \"contextmenu\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"contextmenu\", handler )",
              ".trigger( \"contextmenu\" )",
              "contextmenu",
              "html"
            ]
          },
          {
            "code": "<div>"
          },
          "Now right-clicking on this element displays the alert:",
          {
            "samp": "Handler for .contextmenu() called."
          },
          {
            "code": ".contextmenu()"
          }
        ],
        "pre": [
          {
            "code": "<div id=\"target\">\n  Right-click here\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).contextmenu(function() {   alert( \"Handler for .contextmenu() called.\" );\n});"
          },
          {
            "code": "$( \"#target\" ).contextmenu();"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "contextmenu"
      },
      "example": [
        {
          "desc":
            "To show a \"Hello World!\" alert box when the contextmenu event is triggered on a paragraph on the page:",
          "code":
            "$( \"p\" ).contextmenu(function() {   alert( \"Hello World!\" );\n});"
        },
        {
          "desc": "Right click to toggle background color.",
          "code":
            "var div = $( \"div:first\" );\ndiv.contextmenu(function() {   div.toggleClass( \"contextmenu\" );\n});",
          "css":
            "div {     background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.contextmenu {     background: yellow;\n    color: black;\n  }",
          "html": "<div></div>\n<span>Right click the block</span>"
        }
      ],
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "css",
          "return": "String",
          "title": ".css()",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "propertyName",
                "type": "String",
                "desc": "A CSS property."
              }
            },
            {
              "added": "1.9",
              "argument": {
                "name": "propertyNames",
                "type": "Array",
                "desc": "An array of one or more CSS properties."
              }
            }
          ],
          "desc":
            "Get the computed style properties for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".css()",
                  "getComputedStyle()",
                  "currentStyle",
                  "runtimeStyle",
                  "float",
                  "styleFloat",
                  "cssFloat",
                  "\"float\""
                ]
              },
              {
                "code": [
                  ".css( \"background-color\" )",
                  ".css( \"backgroundColor\" )",
                  ".css( \"WiDtH\" )",
                  ".css( \"width\" )"
                ]
              },
              {
                "em": "computed style"
              },
              {
                "code": [
                  "margin",
                  "background",
                  "border",
                  "border-width",
                  "$( elem ).css( \"borderTopWidth\" )",
                  "$( elem ).css( \"borderBottomWidth\" )"
                ]
              },
              {
                "code": ".css()"
              },
              {
                "strong": "As of jQuery 1.9",
                "code": [
                  ".css()",
                  "border-width",
                  "$( elem ).css([ \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\" ])"
                ]
              }
            ]
          },
          "example": [
            {
              "desc": "Get the background color of a clicked div.",
              "code":
                "$( \"div\" ).click(function() {   var color = $( this ).css( \"background-color\" );\n  $( \"#result\" ).html( \"That div is <span style='color:\" +\n    color + \";'>\" + color + \"</span>.\" );\n});",
              "css":
                "div {     width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n  }",
              "html":
                "<span id=\"result\">&nbsp;</span>\n<div style=\"background-color:blue;\"></div>\n<div style=\"background-color:rgb(15,99,30);\"></div>\n<div style=\"background-color:#123456;\"></div>\n<div style=\"background-color:#f11;\"></div>"
            },
            {
              "desc":
                "Get the width, height, text color, and background color of a clicked div.",
              "code":
                "$( \"div\" ).click(function() {   var html = [ \"The clicked div has the following styles:\" ];\n\n  var styleProps = $( this ).css([\n    \"width\", \"height\", \"color\", \"background-color\"\n  ]);\n  $.each( styleProps, function( prop, value ) {     html.push( prop + \": \" + value );\n  });\n\n  $( \"#result\" ).html( html.join( \"<br>\" ) );\n});",
              "css":
                "div {     height: 50px;\n    margin: 5px;\n    padding: 5px;\n    float: left;\n  }\n  #box1 {     width: 50px;\n    color: yellow;\n    background-color: blue;\n  }\n  #box2 {     width: 80px;\n    color: rgb(255, 255, 255);\n    background-color: rgb(15, 99, 30);\n  }\n  #box3 {     width: 40px;\n    color: #fcc;\n    background-color: #123456;\n  }\n  #box4 {     width: 70px;\n    background-color: #f11;\n  }",
              "html":
                "<p id=\"result\">&nbsp;</p>\n<div id=\"box1\">1</div>\n<div id=\"box2\">2</div>\n<div id=\"box3\">3</div>\n<div id=\"box4\">4</div>"
            }
          ],
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.9"
            }
          ]
        },
        {
          "type": "method",
          "name": "css",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": [
                {
                  "name": "propertyName",
                  "type": "String",
                  "desc": "A CSS property name."
                },
                {
                  "name": "value",
                  "desc": "A value to set for the property.",
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                }
              ]
            },
            {
              "added": "1.4",
              "argument": [
                {
                  "name": "propertyName",
                  "type": "String",
                  "desc": "A CSS property name."
                },
                {
                  "name": "function",
                  "type": "Function",
                  "desc": {
                    "code": "this"
                  },
                  "argument": [
                    {
                      "name": "index",
                      "type": "Integer"
                    },
                    {
                      "name": "value",
                      "type": "String"
                    }
                  ],
                  "return": {
                    "type": [
                      {
                        "name": "String"
                      },
                      {
                        "name": "Number"
                      }
                    ]
                  }
                }
              ]
            },
            {
              "added": "1.0",
              "argument": {
                "name": "properties",
                "type": "PlainObject",
                "desc": "An object of property-value pairs to set."
              }
            }
          ],
          "desc":
            "Set one or more CSS properties for the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [".prop()", ".css()"]
              },
              {
                "code": [
                  ".css({ \"background-color\": \"#ffe\", \"border-left\": \"5px solid #ccc\" })",
                  ".css({ backgroundColor: \"#ffe\", borderLeft: \"5px solid #ccc\" })"
                ]
              },
              {
                "code": ["px", "px"]
              },
              {
                "code": [
                  ".css()",
                  "style",
                  "$( \"#mydiv\" ).css( \"color\", \"green\" )",
                  "document.getElementById( \"mydiv\" ).style.color = \"green\"",
                  "$( \"#mydiv\" ).css( \"color\", \"\" )",
                  ".css()",
                  "style",
                  "<style>",
                  "border",
                  "background",
                  "<style>"
                ],
                "strong": "Warning:"
              },
              {
                "strong": "Note:",
                "code": [
                  ".css()",
                  "!important",
                  "$( \"p\" ).css( \"color\", \"red !important\" )"
                ]
              },
              {
                "code": [
                  ".css()",
                  ".css( \"user-select\", \"none\" )",
                  "-webkit-user-select",
                  "-moz-user-select",
                  "-ms-user-select"
                ]
              },
              {
                "code": [
                  ".css()",
                  ".animate()",
                  "+=",
                  "-=",
                  ".css( \"padding-left\", \"+=15\" )"
                ]
              },
              {
                "code": ".css()"
              },
              "This example sets the widths of the matched elements to incrementally larger values.",
              {
                "strong": "Note:",
                "code": ["function( index, style ){ } )", "undefined"]
              }
            ],
            "pre": {
              "code":
                "$( \"div.example\" ).css( \"width\", function( index ) {   return index * 50;\n});"
            }
          },
          "example": [
            {
              "desc":
                "Change the color of any paragraph to red on mouseover event.",
              "code":
                "$( \"p\" ).on( \"mouseover\", function() {   $( this ).css( \"color\", \"red\" );\n});",
              "css":
                "p {     color: blue;\n    width: 200px;\n    font-size: 14px;\n  }",
              "html":
                "<p>Just roll the mouse over me.</p>\n\n  <p>Or me to see a color change.</p>"
            },
            {
              "desc":
                "Increase the width of #box by 200 pixels the first time it is clicked.",
              "code":
                "$( \"#box\" ).one( \"click\", function() {   $( this ).css( \"width\", \"+=200\" );\n});",
              "css":
                "#box {     background: black;\n    color: snow;\n    width: 100px;\n    padding: 10px;\n  }",
              "html": "<div id=\"box\">Click me to grow</div>"
            },
            {
              "desc": "Highlight a clicked word in the paragraph.",
              "code":
                "var words = $( \"p\" ).first().text().split( /\\s+/ );\nvar text = words.join( \"</span> <span>\" );\n$( \"p\" ).first().html( \"<span>\" + text + \"</span>\" );\n$( \"span\" ).on( \"click\", function() {   $( this ).css( \"background-color\", \"yellow\" );\n});",
              "css":
                "p {     color: blue;\n    font-weight: bold;\n    cursor: pointer;\n  }",
              "html":
                "<p>\n  Once upon a time there was a man\n  who lived in a pizza parlor. This\n  man just loved pizza and ate it all\n  the time.  He went on to be the\n  happiest man in the world.  The end.\n</p>"
            },
            {
              "desc":
                "Change the font weight and background color on mouseenter and mouseleave.",
              "code":
                "$( \"p\" )\n  .on( \"mouseenter\", function() {     $( this ).css({       \"background-color\": \"yellow\",\n      \"font-weight\": \"bolder\"\n    });\n  })\n  .on( \"mouseleave\", function() {     var styles = {       backgroundColor : \"#ddd\",\n      fontWeight: \"\"\n    };\n    $( this ).css( styles );\n  });",
              "css": "p {     color: green;\n  }",
              "html":
                "<p>Move the mouse over a paragraph.</p>\n<p>Like this one or the one above.</p>"
            },
            {
              "desc": "Increase the size of a div when you click it.",
              "code":
                "$( \"div\" ).on( \"click\", function() {   $( this ).css({     width: function( index, value ) {       return parseFloat( value ) * 1.2;\n    },\n    height: function( index, value ) {       return parseFloat( value ) * 1.2;\n    }\n  });\n});",
              "css":
                "div {     width: 20px;\n    height: 15px;\n    background-color: #f33;\n  }",
              "html": "<div>click</div>\n<div>click</div>"
            }
          ],
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.",
      "entry": [
        {
          "type": "method",
          "name": "data",
          "return": "jQuery",
          "title": ".data()",
          "signature": [
            {
              "added": "1.2.3",
              "argument": [
                {
                  "name": "key",
                  "type": "String",
                  "desc": "A string naming the piece of data to set."
                },
                {
                  "name": "value",
                  "type": "Anything",
                  "desc": {
                    "code": "undefined"
                  }
                }
              ]
            },
            {
              "added": "1.4.3",
              "argument": {
                "name": "obj",
                "type": "Object",
                "desc": "An object of key-value pairs of data to update."
              }
            }
          ],
          "desc": "Store arbitrary data associated with the matched elements.",
          "longdesc": {
            "p": [
              {
                "code": ".data()"
              },
              "We can set several distinct values for a single element and retrieve them later:",
              {
                "code": ".data(obj)"
              },
              {
                "code": ".data()"
              },
              {
                "strong": "jQuery 3",
                "a": [
                  {
                    "href": "http://www.w3.org/TR/html5/dom.html#dom-dataset",
                    "$t": "Dataset API specifications"
                  },
                  {
                    "href": "http://www.w3.org/TR/html5/dom.html#dom-dataset",
                    "$t": "the algorithm of the Dataset API"
                  }
                ],
                "code": [
                  "$( \"body\" ).data( { \"my-name\": \"aValue\" } ).data();",
                  "{ myName: \"aValue\" }"
                ]
              },
              {
                "code": [".data()", "<object>", "<applet>", "<embed>"]
              }
            ],
            "pre": {
              "code":
                "$( \"body\" ).data( \"foo\", 52 );\n$( \"body\" ).data( \"bar\", { myType: \"test\", count: 40 } );\n$( \"body\" ).data( { baz: [ 1, 2, 3 ] } );\n$( \"body\" ).data( \"foo\" ); // 52\n$( \"body\" ).data(); // { foo: 52, bar: { myType: \"test\", count: 40 }, baz: [ 1, 2, 3 ] }"
            }
          },
          "note": [
            {
              "id": "no-data-on-xml",
              "type": "additional"
            },
            {
              "id": "data-doesnt-accept-undefined",
              "type": "additional",
              "data-title": ".data",
              "data-parameters": "\"name\""
            }
          ],
          "example": {
            "desc": "Store then retrieve a value from the div element.",
            "code":
              "$( \"div\" ).data( \"test\", { first: 16, last: \"pizza!\" } );\n$( \"span:first\" ).text( $( \"div\" ).data( \"test\" ).first );\n$( \"span:last\" ).text( $( \"div\" ).data( \"test\" ).last );",
            "css": "div {     color: blue;\n  }\n  span {     color: red;\n  }",
            "html":
              "<div>\n  The values stored were\n  <span></span>\n  and\n  <span></span>\n</div>"
          },
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "miscellaneous/data-storage"
            },
            {
              "slug": "version/1.2.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.4.3"
            }
          ]
        },
        {
          "type": "method",
          "name": "data",
          "return": "Object",
          "signature": [
            {
              "added": "1.2.3",
              "argument": {
                "name": "key",
                "type": "String",
                "desc": "Name of the data stored."
              }
            },
            {
              "added": "1.4"
            }
          ],
          "desc":
            "Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.",
          "longdesc": {
            "p": [
              {
                "code": ".data()"
              },
              {
                "code": ["body", "undefined"]
              },
              {
                "strong": "jQuery 3",
                "a": {
                  "href": "http://www.w3.org/TR/html5/dom.html#dom-dataset",
                  "$t": "Dataset API specifications"
                },
                "code": [
                  "$( \"body\" ).data( { \"my-name\": \"aValue\" } ).data();",
                  "{ myName: \"aValue\" }"
                ]
              },
              {
                "a": [
                  {
                    "href": "http://ejohn.org/blog/html-5-data-attributes/",
                    "$t": "HTML 5 data- attributes"
                  },
                  {
                    "href":
                      "http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes",
                    "$t": "W3C HTML5 specification"
                  }
                ]
              },
              "For example, given the following HTML:",
              "All of the following jQuery code will work.",
              {
                "code": [
                  "data-last-value",
                  "data-",
                  "lastValue",
                  "data-last-value"
                ]
              },
              "Every attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null). A value is only converted to a number if doing so doesn't change the value's representation. For example, \"1E02\" and \"100.000\" are equivalent as numbers (numeric value 100) but converting them would alter their representation so they are left as strings. The string value \"100\" is converted to the number 100.",
              {
                "code": "jQuery.parseJSON",
                "a": {
                  "href":
                    "http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example",
                  "$t": "valid JSON syntax"
                },
                "em": "including quoted property names"
              },
              {
                "code": {
                  "a": {
                    "href": "/attr/",
                    "$t": "attr()"
                  }
                }
              },
              "The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).",
              {
                "code": [".data()", ".data(obj)", ".data()"]
              }
            ],
            "pre": [
              {
                "code":
                  "alert( $( \"body\" ).data( \"foo\" ) );\nalert( $( \"body\" ).data() );"
              },
              {
                "code":
                  "alert( $( \"body\" ).data( \"foo\" ) ); // undefined\n$( \"body\" ).data( \"bar\", \"foobar\" );\nalert( $( \"body\" ).data( \"bar\" ) ); // foobar"
              },
              {
                "code":
                  "<div data-role=\"page\" data-last-value=\"43\" data-hidden=\"true\" data-options='{ \"name\":\"John\"}'></div>"
              },
              {
                "code":
                  "$( \"div\" ).data( \"role\" ) === \"page\";\n$( \"div\" ).data( \"lastValue\" ) === 43;\n$( \"div\" ).data( \"hidden\" ) === true;\n$( \"div\" ).data( \"options\" ).name === \"John\";"
              },
              {
                "code":
                  "var mydata = $( \"#mydiv\" ).data();\nif ( mydata.count < 9 ) {   mydata.count = 43;\n  mydata.status = \"embiggened\";\n}"
              }
            ],
            "h4": {
              "id": "data-html5",
              "a": {
                "href": "#data-html5",
                "$t": "HTML5 data-* Attributes"
              }
            }
          },
          "note": {
            "id": "no-data-on-xml",
            "type": "additional"
          },
          "example": {
            "desc": "Get the data named \"blah\" stored at for an element.",
            "code":
              "$( \"button\" ).click(function() {   var value;\n\n  switch ( $( \"button\" ).index( this ) ) {     case 0 :\n      value = $( \"div\" ).data( \"blah\" );\n      break;\n    case 1 :\n      $( \"div\" ).data( \"blah\", \"hello\" );\n      value = \"Stored!\";\n      break;\n    case 2 :\n      $( \"div\" ).data( \"blah\", 86 );\n      value = \"Stored!\";\n      break;\n    case 3 :\n      $( \"div\" ).removeData( \"blah\" );\n      value = \"Removed!\";\n      break;\n  }\n\n  $( \"span\" ).text( \"\" + value );\n});",
            "css":
              "div {     margin: 5px;\n    background: yellow;\n  }\n  button {     margin: 5px;\n    font-size: 14px;\n  }\n  p {     margin: 5px;\n    color: blue;\n  }\n  span {     color: red;\n  }",
            "html":
              "<div>A div</div>\n<button>Get \"blah\" from the div</button>\n<button>Set \"blah\" to \"hello\"</button>\n<button>Set \"blah\" to 86</button>\n<button>Remove \"blah\" from the div</button>\n<p>The \"blah\" value of this div is <span>?</span></p>"
          },
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "miscellaneous/data-storage"
            },
            {
              "slug": "version/1.2.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.4.3"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "dblclick",
      "return": "jQuery",
      "title": ".dblclick()",
      "desc":
        "Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"dblclick\", handler )",
              ".trigger( \"dblclick\" )",
              "dblclick"
            ]
          },
          {
            "code": "<div>"
          },
          "Now double-clicking on this element displays the alert:",
          {
            "samp": "Handler for .dblclick() called."
          },
          {
            "code": ".dblclick()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": "dblclick"
          },
          {
            "code": ["click", "dblclick", "click", "dblclick"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\">\n  Double-click here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).dblclick(function() {   alert( \"Handler for .dblclick() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).dblclick();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_04.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        },
        "ul": {
          "li": [
            "The mouse button is depressed while the pointer is inside the element.",
            "The mouse button is released while the pointer is inside the element.",
            "The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.",
            "The mouse button is released while the pointer is inside the element."
          ]
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "dblclick"
      },
      "example": [
        {
          "desc":
            "To bind a \"Hello World!\" alert box to the dblclick event on every paragraph on the page:",
          "code":
            "$( \"p\" ).dblclick(function() {   alert( \"Hello World!\" );\n});"
        },
        {
          "desc": "Double click to toggle background color.",
          "code":
            "var divdbl = $( \"div:first\" );\ndivdbl.dblclick(function() {   divdbl.toggleClass( \"dbl\" );\n});",
          "css":
            "div {     background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.dbl {     background: yellow;\n    color: black;\n  }",
          "html": "<div></div>\n<span>Double click the block</span>"
        }
      ],
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.always",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.always()",
      "signature": {
        "added": "1.6",
        "argument": [
          {
            "name": "alwaysCallbacks",
            "type": "Function",
            "desc":
              "A function, or array of functions, that is called when the Deferred is resolved or rejected."
          },
          {
            "name": "alwaysCallbacks",
            "type": "Function",
            "optional": "true",
            "desc":
              "Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected."
          }
        ]
      },
      "desc":
        "Add handlers to be called when the Deferred object is either resolved or rejected.",
      "longdesc": {
        "p": [
          {
            "code": ["alwaysCallbacks", "deferred.always()", ".always()"],
            "a": [
              {
                "href": "/deferred.resolve/",
                "code": "resolve"
              },
              {
                "href": "/deferred.reject/",
                "code": "reject"
              },
              {
                "href": "/deferred.resolveWith/",
                "code": "resolveWith"
              },
              {
                "href": "/deferred.rejectWith/",
                "code": "rejectWith"
              },
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              }
            ]
          },
          {
            "strong": "Note:",
            "code": [
              "deferred.always()",
              ".resolve()",
              ".reject()",
              "Deferred"
            ],
            "a": [
              {
                "href": "/deferred.done/",
                "code": ".done()"
              },
              {
                "href": "/deferred.fail/",
                "code": ".fail()"
              }
            ]
          }
        ]
      },
      "example": {
        "desc": {
          "a": {
            "href": "/jQuery.get/",
            "code": "jQuery.get()"
          },
          "code": ["jqXHR", "deferred.always()"]
        },
        "code":
          "$.get( \"test.php\" ).always(function() {   alert( \"$.get completed with success or error callback arguments\" );\n});"
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.catch",
      "type": "method",
      "return": "Promise",
      "title": "deferred.catch()",
      "signature": {
        "added": "3.0",
        "argument": {
          "name": "failFilter",
          "type": "Function",
          "desc": "A function that is called when the Deferred is rejected."
        }
      },
      "desc": "Add handlers to be called when the Deferred object is rejected.",
      "longdesc": {
        "p": {
          "code": "deferred.catch( fn )",
          "a": {
            "href": "/deferred.then/",
            "code": "deferred.then( null, fn )"
          }
        }
      },
      "example": {
        "desc": {
          "a": {
            "href": "/jQuery.get/",
            "code": "jQuery.get"
          },
          "code": ".catch"
        },
        "code":
          "$.get( \"test.php\" )\n  .then( function() {     alert( \"$.get succeeded\" );\n  } )\n  .catch( function() {     alert( \"$.get failed!\" );\n  } );"
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.done",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.done()",
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "doneCallbacks",
            "type": "Function",
            "desc":
              "A function, or array of functions, that are called when the Deferred is resolved."
          },
          {
            "name": "doneCallbacks",
            "type": "Function",
            "optional": "true",
            "desc":
              "Optional additional functions, or arrays of functions, that are called when the Deferred is resolved."
          }
        ]
      },
      "desc": "Add handlers to be called when the Deferred object is resolved.",
      "longdesc": {
        "p": {
          "code": ["deferred.done()", "deferred.done()", ".done()"],
          "a": [
            {
              "href": "/deferred.resolve/",
              "code": "resolve"
            },
            {
              "href": "/deferred.resolveWith/",
              "code": "resolveWith"
            },
            {
              "href": "/category/deferred-object/",
              "$t": "Deferred object"
            }
          ]
        }
      },
      "example": [
        {
          "desc": {
            "a": {
              "href": "/jQuery.get/",
              "code": "jQuery.get"
            },
            "code": ".done()"
          },
          "code":
            "$.get( \"test.php\" ).done(function() {   alert( \"$.get succeeded\" );\n});"
        },
        {
          "desc":
            "Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:",
          "code":
            "// 3 functions to call when the Deferred object is resolved\nfunction fn1() {   $( \"p\" ).append( \" 1 \" );\n}\nfunction fn2() {   $( \"p\" ).append( \" 2 \" );\n}\nfunction fn3( n ) {   $( \"p\" ).append( n + \" 3 \" + n );\n}\n\n// Create a deferred object\nvar dfd = $.Deferred();\n\n// Add handlers to be called when dfd is resolved\ndfd\n// .done() can take any number of functions or arrays of functions\n  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )\n// We can chain done methods, too\n  .done(function( n ) {     $( \"p\" ).append( n + \" we're done.\" );\n  });\n\n// Resolve the Deferred object when the button is clicked\n$( \"button\" ).on( \"click\", function() {   dfd.resolve( \"and\" );\n});",
          "html": "<button>Go</button>\n<p>Ready...</p>"
        }
      ],
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.fail",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.fail()",
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "failCallbacks",
            "type": "Function",
            "desc":
              "A function, or array of functions, that are called when the Deferred is rejected."
          },
          {
            "name": "failCallbacks",
            "type": "Function",
            "optional": "true",
            "desc":
              "Optional additional functions, or arrays of functions, that are called when the Deferred is rejected."
          }
        ]
      },
      "desc": "Add handlers to be called when the Deferred object is rejected.",
      "longdesc": {
        "p": {
          "code": ["deferred.fail()", "deferred.fail()", "deferred.fail()"],
          "a": [
            {
              "href": "/deferred.reject/",
              "code": "deferred.reject()"
            },
            {
              "href": "/deferred.rejectWith/",
              "code": "deferred.rejectWith()"
            },
            {
              "href": "/category/deferred-object/",
              "$t": "Deferred object"
            }
          ]
        }
      },
      "example": {
        "desc": {
          "a": {
            "href": "/jQuery.get/",
            "code": "jQuery.get"
          },
          "code": ["deferred.done()", "deferred.fail()"]
        },
        "code":
          "$.get( \"test.php\" )\n  .done(function() {     alert( \"$.get succeeded\" );\n  })\n  .fail(function() {     alert( \"$.get failed!\" );\n  });"
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.isRejected",
      "type": "method",
      "return": "Boolean",
      "deprecated": "1.7",
      "removed": "1.8",
      "title": "deferred.isRejected()",
      "signature": {
        "added": "1.5"
      },
      "desc": "Determine whether a Deferred object has been rejected.",
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/deferred.state/",
              "code": "deferred.state()"
            }
          },
          {
            "code": "true",
            "a": [
              {
                "href": "h/deferred.reject/",
                "code": "deferred.reject()"
              },
              {
                "href": "/deferred.rejectWith/",
                "code": "deferred.rejectWith()"
              }
            ]
          },
          {
            "a": {
              "href": "/deferred.isResolved/",
              "code": "deferred.isResolved()"
            }
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.isResolved",
      "type": "method",
      "return": "Boolean",
      "deprecated": "1.7",
      "removed": "1.8",
      "title": "deferred.isResolved()",
      "signature": {
        "added": "1.5"
      },
      "desc": "Determine whether a Deferred object has been resolved.",
      "longdesc": {
        "p": [
          {
            "code": ["deprecated", "removed"],
            "a": {
              "href": "/deferred.state/",
              "code": "deferred.state()"
            }
          },
          {
            "code": "true",
            "a": [
              {
                "href": "/deferred.resolve/",
                "code": "deferred.resolve()"
              },
              {
                "href": "/deferred.resolveWith/",
                "code": "deferred.resolveWith()"
              }
            ]
          },
          {
            "a": {
              "href": "/deferred.isRejected/",
              "code": "deferred.isRejected()"
            }
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.notify",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.notify()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "args",
          "type": "Object",
          "desc": "Optional arguments that are passed to the progressCallbacks."
        }
      },
      "desc": {
        "code": "args"
      },
      "longdesc": {
        "p": [
          "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().",
          {
            "code": ["deferred.notify", "args", ".notify()", ".notify()"],
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then"
              },
              {
                "href": "/deferred.progress/",
                "code": "deferred.progress"
              },
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              }
            ]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.notifyWith",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.notifyWith()",
      "signature": {
        "added": "1.7",
        "argument": [
          {
            "name": "context",
            "type": "Object",
            "desc": {
              "code": "this"
            }
          },
          {
            "name": "args",
            "type": "Array",
            "optional": "true",
            "desc":
              "An optional array of arguments that are passed to the progressCallbacks."
          }
        ]
      },
      "desc": {
        "code": "args"
      },
      "longdesc": {
        "p": [
          "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().",
          {
            "code": [
              "deferred.notifyWith",
              "args",
              ".notifyWith()",
              ".notifyWith()"
            ],
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then"
              },
              {
                "href": "/deferred.progress/",
                "code": "deferred.progress"
              },
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              }
            ]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.pipe",
      "type": "method",
      "return": "Promise",
      "deprecated": "1.8",
      "title": "deferred.pipe()",
      "signature": [
        {
          "added": "1.6",
          "argument": [
            {
              "name": "doneFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when the Deferred is resolved."
            },
            {
              "name": "failFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when the Deferred is rejected."
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "doneFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when the Deferred is resolved."
            },
            {
              "name": "failFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when the Deferred is rejected."
            },
            {
              "name": "progressFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when progress notifications are sent to the Deferred."
            }
          ]
        }
      ],
      "desc": "Utility method to filter and/or chain Deferreds.",
      "longdesc": {
        "p": [
          {
            "strong": "Deprecation Notice:",
            "code": "deferred.then()"
          },
          {
            "code": [
              "deferred.pipe()",
              "doneFilter",
              "failFilter",
              "progressFilter",
              "notify",
              "notifyWith",
              "done()",
              "fail()",
              "null"
            ],
            "strong": "As of jQuery 1.7"
          }
        ]
      },
      "example": [
        {
          "desc": "Filter resolve value:",
          "code":
            "var defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {     return value * 2;\n  });\n\ndefer.resolve( 5 );\nfiltered.done(function( value ) {   alert( \"Value is ( 2*5 = ) 10: \" + value );\n});"
        },
        {
          "desc": "Filter reject value:",
          "code":
            "var defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {     return value * 3;\n  });\n\ndefer.reject( 6 );\nfiltered.fail(function( value ) {   alert( \"Value is ( 3*6 = ) 18: \" + value );\n});"
        },
        {
          "desc": "Chain tasks:",
          "code":
            "var request = $.ajax( url, { dataType: \"json\" } ),\n  chained = request.pipe(function( data ) {     return $.ajax( url2, { data: { user: data.userId } } );\n  });\n\nchained.done(function( data ) {   // data retrieved from url2 as provided by the first request\n});"
        }
      ],
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.6"
        },
        {
          "slug": "version/1.7"
        },
        {
          "slug": "version/1.8"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.progress",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.progress()",
      "signature": {
        "added": "1.7",
        "argument": [
          {
            "name": "progressCallbacks",
            "type": [
              {
                "name": "Function"
              },
              {
                "name": "Array"
              }
            ],
            "desc":
              "A function, or array of functions, to be called when the Deferred generates progress notifications."
          },
          {
            "name": "progressCallbacks",
            "optional": "true",
            "type": [
              {
                "name": "Function"
              },
              {
                "name": "Array"
              }
            ],
            "desc":
              "Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications."
          }
        ]
      },
      "desc":
        "Add handlers to be called when the Deferred object generates progress notifications.",
      "longdesc": {
        "p": {
          "code": [
            "deferred.progress()",
            "notify",
            "notifyWith",
            "progressCallbacks",
            "deferred.progress()",
            "progressCallbacks",
            ".notify()",
            "notifyWith()"
          ],
          "a": {
            "href": "/jQuery.Deferred/",
            "$t": "jQuery.Deferred()"
          }
        }
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.promise",
      "type": "method",
      "return": "Promise",
      "title": "deferred.promise()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "target",
          "type": "Object",
          "optional": "true",
          "desc": "Object onto which the promise methods have to be attached"
        }
      },
      "desc": "Return a Deferred's Promise object.",
      "longdesc": {
        "p": [
          {
            "code": [
              "deferred.promise()",
              "then",
              "done",
              "fail",
              "always",
              "pipe",
              "progress",
              "state",
              "promise",
              "resolve",
              "reject",
              "notify",
              "resolveWith",
              "rejectWith",
              "notifyWith"
            ]
          },
          {
            "code": ["target", "deferred.promise()"]
          },
          {
            "em": "only",
            "code": "deferred.promise()"
          },
          {
            "a": {
              "href": "/category/deferred-object/",
              "$t": "Deferred object"
            }
          }
        ]
      },
      "example": [
        {
          "desc":
            "Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first \"wins\" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds \"working...\" to the document body.",
          "code":
            "function asyncEvent() {   var dfd = jQuery.Deferred();\n\n  // Resolve after a random interval\n  setTimeout(function() {     dfd.resolve( \"hurray\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n\n  // Reject after a random interval\n  setTimeout(function() {     dfd.reject( \"sorry\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n\n  // Show a \"working...\" message every half-second\n  setTimeout(function working() {     if ( dfd.state() === \"pending\" ) {       dfd.notify( \"working... \" );\n      setTimeout( working, 500 );\n    }\n  }, 1 );\n\n  // Return the Promise so caller can't change the Deferred\n  return dfd.promise();\n}\n\n// Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n  function( status ) {     alert( status + \", things are going well\" );\n  },\n  function( status ) {     alert( status + \", you fail this time\" );\n  },\n  function( status ) {     $( \"body\" ).append( status );\n  }\n);"
        },
        {
          "desc":
            "Use the target argument to promote an existing object to a Promise:",
          "code":
            "// Existing object\nvar obj = {     hello: function( name ) {       alert( \"Hello \" + name );\n    }\n  },\n  // Create a Deferred\n  defer = $.Deferred();\n\n// Set object as a promise\ndefer.promise( obj );\n\n// Resolve the deferred\ndefer.resolve( \"John\" );\n\n// Use the object as a Promise\nobj.done(function( name ) {   obj.hello( name ); // Will alert \"Hello John\"\n}).hello( \"Karl\" ); // Will alert \"Hello Karl\""
        }
      ],
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.reject",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.reject()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "args",
          "type": "Anything",
          "optional": "true",
          "desc": "Optional arguments that are passed to the failCallbacks."
        }
      },
      "desc": {
        "code": "args"
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/deferred.promise/",
              "code": "deferred.promise()"
            }
          },
          {
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then()"
              },
              {
                "href": "/deferred.fail/",
                "code": "deferred.fail()"
              },
              {
                "href": "/jQuery.Deferred/",
                "$t": "jQuery.Deferred()"
              }
            ],
            "code": ["args", "deferred.reject()", "deferred.reject()"]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.rejectWith",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.rejectWith()",
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "context",
            "type": "Object",
            "desc": {
              "code": "this"
            }
          },
          {
            "name": "args",
            "type": "Array",
            "optional": "true",
            "desc":
              "An optional array of arguments that are passed to the failCallbacks."
          }
        ]
      },
      "desc": {
        "code": ["context", "args"]
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/deferred.promise/",
              "code": "deferred.promise()"
            }
          },
          {
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then"
              },
              {
                "href": "/deferred.fail/",
                "code": "deferred.fail"
              },
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              }
            ],
            "code": ["args", "deferred.reject()", ".reject()"]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.resolve",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.resolve()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "args",
          "type": "Anything",
          "optional": "true",
          "desc": "Optional arguments that are passed to the doneCallbacks."
        }
      },
      "desc": {
        "code": "args"
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/deferred.promise/",
              "code": "deferred.promise()"
            }
          },
          {
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then()"
              },
              {
                "href": "/deferred.done/",
                "code": "deferred.done()"
              },
              {
                "href": "/jQuery.Deferred/",
                "$t": "jQuery.Deferred()"
              }
            ],
            "code": ["args", "deferred.resolve()", "deferred.resolve()"]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.resolveWith",
      "type": "method",
      "return": "Deferred",
      "title": "deferred.resolveWith()",
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "context",
            "type": "Object",
            "desc": {
              "code": "this"
            }
          },
          {
            "name": "args",
            "type": "Array",
            "optional": "true",
            "desc":
              "An optional array of arguments that are passed to the doneCallbacks."
          }
        ]
      },
      "desc": {
        "code": ["context", "args"]
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/deferred.promise/",
              "code": "deferred.promise()"
            }
          },
          {
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then"
              },
              {
                "href": "/deferred.done/",
                "code": "deferred.done"
              },
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              }
            ],
            "code": ["args", ".resolve()", ".resolve()"]
          }
        ]
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.state",
      "type": "method",
      "return": "String",
      "title": "deferred.state()",
      "signature": {
        "added": "1.7"
      },
      "desc": "Determine the current state of a Deferred object.",
      "longdesc": {
        "p": [
          "The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:",
          "This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it."
        ],
        "ul": {
          "li": [
            {
              "strong": "\"pending\""
            },
            {
              "strong": "\"resolved\"",
              "a": [
                {
                  "href": "/deferred.resolve/",
                  "code": "deferred.resolve()"
                },
                {
                  "href": "/deferred.resolveWith/",
                  "code": "deferred.resolveWith()"
                }
              ]
            },
            {
              "strong": "\"rejected\"",
              "a": [
                {
                  "href": "/deferred.reject/",
                  "code": "deferred.reject()"
                },
                {
                  "href": "/deferred.rejectWith/",
                  "code": "deferred.rejectWith()"
                }
              ]
            }
          ]
        }
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "deferred.then",
      "type": "method",
      "return": "Promise",
      "title": "deferred.then()",
      "signature": [
        {
          "added": "1.8",
          "argument": [
            {
              "name": "doneFilter",
              "type": "Function",
              "desc": "A function that is called when the Deferred is resolved."
            },
            {
              "name": "failFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when the Deferred is rejected."
            },
            {
              "name": "progressFilter",
              "type": "Function",
              "optional": "true",
              "desc":
                "An optional function that is called when progress notifications are sent to the Deferred."
            }
          ]
        },
        {
          "added": "1.5",
          "removed": "1.8",
          "argument": [
            {
              "name": "doneCallbacks",
              "type": "Function",
              "desc":
                "A function, or array of functions, called when the Deferred is resolved."
            },
            {
              "name": "failCallbacks",
              "type": "Function",
              "desc":
                "A function, or array of functions, called when the Deferred is rejected."
            }
          ]
        },
        {
          "added": "1.7",
          "removed": "1.8",
          "argument": [
            {
              "name": "doneCallbacks",
              "type": "Function",
              "desc":
                "A function, or array of functions, called when the Deferred is resolved."
            },
            {
              "name": "failCallbacks",
              "type": "Function",
              "desc":
                "A function, or array of functions, called when the Deferred is rejected."
            },
            {
              "name": "progressCallbacks",
              "type": "Function",
              "optional": "true",
              "desc":
                "A function, or array of functions, called when the Deferred notifies progress."
            }
          ]
        }
      ],
      "desc":
        "Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.",
      "longdesc": {
        "p": [
          {
            "strong": "Prior to jQuery 1.8"
          },
          {
            "code": ["null", ".done()", ".fail()", ".progress()"]
          },
          {
            "strong": "As of jQuery 1.8",
            "code": [
              "deferred.then()",
              "deferred.pipe()",
              "doneFilter",
              "failFilter",
              "progressFilter",
              "notify",
              "notifyWith",
              ".done()",
              ".fail()",
              "null"
            ]
          },
          {
            "code": ["deferred.then", ".then()"]
          }
        ]
      },
      "example": [
        {
          "desc": {
            "a": {
              "href": "/jQuery.get/",
              "code": "jQuery.get"
            },
            "code": ".then"
          },
          "code":
            "$.get( \"test.php\" ).then(\n  function() {     alert( \"$.get succeeded\" );\n  }, function() {     alert( \"$.get failed!\" );\n  }\n);"
        },
        {
          "desc": "Filter the resolve value:",
          "html": "<button>Filter Resolve</button>\n<p></p>",
          "code":
            "var filterResolve = function() {   var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {       return value * 2;\n    });\n\n  defer.resolve( 5 );\n  filtered.done(function( value ) {     $( \"p\" ).html( \"Value is ( 2*5 = ) 10: \" + value );\n  });\n};\n\n$( \"button\" ).on( \"click\", filterResolve );"
        },
        {
          "desc": "Filter reject value:",
          "code":
            "var defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {     return value * 3;\n  });\n\ndefer.reject( 6 );\nfiltered.fail(function( value ) {   alert( \"Value is ( 3*6 = ) 18: \" + value );\n});"
        },
        {
          "desc": "Chain tasks:",
          "code":
            "var request = $.ajax( url, { dataType: \"json\" } ),\n  chained = request.then(function( data ) {     return $.ajax( url2, { data: { user: data.userId } } );\n  });\n\nchained.done(function( data ) {   // data retrieved from url2 as provided by the first request\n});"
        }
      ],
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "delay",
      "return": "jQuery",
      "title": ".delay()",
      "signature": {
        "added": "1.4",
        "argument": [
          {
            "name": "duration",
            "type": "Integer",
            "desc":
              "An integer indicating the number of milliseconds to delay execution of the next item in the queue."
          },
          {
            "name": "queueName",
            "optional": "true",
            "type": "String",
            "desc": {
              "code": "fx"
            }
          }
        ]
      },
      "desc":
        "Set a timer to delay execution of subsequent items in the queue.",
      "longdesc": {
        "p": [
          {
            "code": [".delay()", ".show()", ".hide()"],
            "em": "not"
          },
          {
            "code": ["'fast'", "'slow'"]
          },
          {
            "code": [".slideUp()", ".fadeIn()", "<div id=\"foo\">"]
          },
          "When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds."
        ],
        "pre": {
          "code": "$( \"#foo\" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );"
        },
        "div": {
          "class": "warning",
          "p": {
            "strong": {
              "code": [".delay()", ".delay()"],
              "a": {
                "href":
                  "https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers.setTimeout",
                "$t": "setTimeout"
              }
            }
          }
        }
      },
      "example": {
        "desc":
          "Animate the hiding and showing of two divs, delaying the first before showing it.",
        "css":
          "div {     position: absolute;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  .first {     background-color: #3f3;\n    left: 0;\n  }\n  .second {     background-color: #33f;\n    left: 80px;\n  }",
        "code":
          "$( \"button\" ).click(function() {   $( \"div.first\" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );\n  $( \"div.second\" ).slideUp( 300 ).fadeIn( 400 );\n});",
        "html":
          "<p><button>Run</button></p>\n<div class=\"first\"></div>\n<div class=\"second\"></div>"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "delegate",
      "return": "jQuery",
      "deprecated": "3.0",
      "title": ".delegate()",
      "desc":
        "Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.",
      "signature": [
        {
          "added": "1.4.2",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector to filter the elements that trigger the event."
            },
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.2",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector to filter the elements that trigger the event."
            },
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names."
            },
            {
              "name": "eventData",
              "type": "Anything",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector to filter the elements that trigger the event."
            },
            {
              "name": "events",
              "type": "PlainObject",
              "desc":
                "A plain object of one or more event types and functions to execute for them."
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".delegate()",
            "a": [
              {
                "href": "/on/",
                "code": ".on()"
              },
              {
                "href": "/on/",
                "code": ".on()"
              }
            ]
          },
          {
            "code": ".delegate()"
          },
          {
            "code": ".on()"
          },
          {
            "code": "delegate()",
            "a": {
              "href": "/undelegate/",
              "$t": ".undelegate()"
            }
          },
          {
            "code": ".on()"
          }
        ],
        "pre": [
          {
            "code":
              "// jQuery 1.4.3+\n$( elements ).delegate( selector, events, data, handler );\n// jQuery 1.7+\n$( elements ).on( events, selector, data, handler );"
          },
          {
            "code":
              "$( \"table\" ).delegate( \"td\", \"click\", function() {   $( this ).toggleClass( \"chosen\" );\n});"
          },
          {
            "code":
              "$( \"table\" ).on( \"click\", \"td\", function() {   $( this ).toggleClass( \"chosen\" );\n});"
          }
        ]
      },
      "note": {
        "id": "propagation-for-live-or-delegate",
        "type": "additional"
      },
      "example": [
        {
          "desc":
            "Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.",
          "code":
            "$( \"body\" ).delegate( \"p\", \"click\", function() {   $( this ).after( \"<p>Another paragraph!</p>\" );\n});",
          "css":
            "p {     background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {     background: #ccc;\n  }\n  span {     color: red;\n  }",
          "html": "<p>Click me!</p>\n\n<span></span>"
        },
        {
          "desc":
            "To display each paragraph's text in an alert box whenever it is clicked:",
          "code":
            "$( \"body\" ).delegate( \"p\", \"click\", function() {   alert( $( this ).text() );\n});"
        },
        {
          "desc":
            "To cancel a default action and prevent it from bubbling up, return false:",
          "code":
            "$( \"body\" ).delegate( \"a\", \"click\", function() {   return false;\n});"
        },
        {
          "desc":
            "To cancel only the default action by using the preventDefault method.",
          "code":
            "$( \"body\" ).delegate( \"a\", \"click\", function( event ) {   event.preventDefault();\n});"
        },
        {
          "desc": "Can bind custom events too.",
          "code":
            "$( \"body\" ).delegate( \"p\", \"myCustomEvent\", function( e, myName, myValue ) {   $( this ).text( \"Hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( \"button\" ).click(function() {   $( \"p\" ).trigger( \"myCustomEvent\" );\n});",
          "css": "p {     color: red;\n  }\n  span {     color: blue;\n  }",
          "html":
            "<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style=\"display:none;\"></span>"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.4.2"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "dequeue",
      "return": "jQuery",
      "title": ".dequeue()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "queueName",
          "optional": "true",
          "type": "String",
          "desc": {
            "code": "fx"
          }
        }
      },
      "desc":
        "Execute the next function on the queue for the matched elements.",
      "longdesc": {
        "p": {
          "code": [".dequeue()", ".dequeue()"]
        }
      },
      "example": {
        "desc":
          "Use dequeue to end a custom queue function which allows the queue to keep going.",
        "code":
          "$( \"button\" ).click(function() {   $( \"div\" )\n    .animate({ left:\"+=200px\" }, 2000 )\n    .animate({ top:\"0px\" }, 600 )\n    .queue(function() {       $( this ).toggleClass( \"red\" ).dequeue();\n    })\n    .animate({ left:\"10px\", top:\"30px\" }, 700 );\n});",
        "css":
          "div {     margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {     background-color: red;\n  }",
        "html": "<button>Start</button>\n<div></div>"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "data"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "descendant",
      "return": "",
      "title": "Descendant Selector (\"ancestor descendant\")",
      "sample": "ancestor descendant",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "ancestor",
            "type": "Selector",
            "desc": "Any valid selector."
          },
          {
            "name": "descendant",
            "type": "Selector",
            "desc": "A selector to filter the descendant elements."
          }
        ]
      },
      "desc": "Selects all elements that are descendants of a given ancestor.",
      "longdesc": {
        "p":
          "A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element."
      },
      "example": {
        "desc":
          "Mark all inputs that are descendants of a form with a dotted blue border. Give a yellow background to inputs that are descendants of a fieldset that is a descendant of a form.",
        "code":
          "$( \"form input\" ).css( \"border\", \"2px dotted blue\" );\n$( \"form fieldset input\" ).css( \"backgroundColor\", \"yellow\" );",
        "css":
          "form {     border: 2px green solid;\n    padding: 2px;\n    margin: 0;\n    background: #efe;\n  }\n  div {     color: red;\n  }\n  fieldset {     margin: 1px;\n    padding: 3px;\n  }",
        "html":
          "<form>\n  <div>Form is surrounded by the green border.</div>\n\n  <label for=\"name\">Child of form:</label>\n  <input name=\"name\" id=\"name\">\n\n  <fieldset>\n    <label for=\"newsletter\">Grandchild of form, child of fieldset:</label>\n    <input name=\"newsletter\" id=\"newsletter\">\n  </fieldset>\n</form>\nSibling to form: <input name=\"none\">"
      },
      "category": [
        {
          "slug": "selectors/hierarchy-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "detach",
      "return": "jQuery",
      "title": ".detach()",
      "signature": {
        "added": "1.4",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A selector expression that filters the set of matched elements to be removed."
        }
      },
      "desc": "Remove the set of matched elements from the DOM.",
      "longdesc": {
        "p": {
          "code": [
            ".detach()",
            {
              "a": {
                "href": "/remove/",
                "$t": ".remove()"
              }
            },
            ".detach()"
          ]
        }
      },
      "example": {
        "desc": "Detach all paragraphs from the DOM",
        "code":
          "$( \"p\" ).click(function() {   $( this ).toggleClass( \"off\" );\n});\nvar p;\n$( \"button\" ).click(function() {   if ( p ) {     p.appendTo( \"body\" );\n    p = null;\n  } else {     p = $( \"p\" ).detach();\n  }\n});",
        "css":
          "p {     background: yellow;\n    margin: 6px 0;\n  }\n  p.off {     background: black;\n  }",
        "html":
          "<p>Hello</p>\nhow are\n<p>you?</p>\n<button>Attach/detach paragraphs</button>"
      },
      "category": [
        {
          "slug": "manipulation/dom-removal"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "die",
      "return": "jQuery",
      "deprecated": "1.7",
      "removed": "1.9",
      "title": ".die()",
      "desc": {
        "code": ".live()"
      },
      "signature": [
        {
          "added": "1.4.1"
        },
        {
          "added": "1.3",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc": {
                "code": ["click", "keydown"]
              }
            },
            {
              "name": "handler",
              "optional": "true",
              "type": "String",
              "desc": "The function that is no longer to be executed."
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": {
            "name": "events",
            "type": "PlainObject",
            "desc": {
              "code": ["click", "keydown"]
            }
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".live()",
              ".die()",
              ".off()",
              ".on()",
              ".live()",
              ".off()"
            ]
          },
          {
            "em": "all",
            "code": ".live()"
          },
          {
            "strong": "As of jQuery 1.7",
            "code": [".die()", ".live()"],
            "a": [
              {
                "href": "/off/",
                "code": ".off()"
              },
              {
                "href": "/on/",
                "code": ".on()"
              }
            ]
          },
          {
            "strong": "Note:"
          }
        ]
      },
      "example": [
        {
          "desc": "To unbind all live events from all paragraphs, write:",
          "code": "$( \"p\" ).die();"
        },
        {
          "desc": "To unbind all live click events from all paragraphs, write:",
          "code": "$( \"p\" ).die( \"click\" );"
        },
        {
          "desc":
            "To unbind just one previously bound handler, pass the function in as the second argument:",
          "code":
            "var foo = function() {   // Code to handle some kind of event\n};\n\n// Now foo will be called when paragraphs are clicked\n$( \"p\" ).live( \"click\", foo );\n\n// Now foo will no longer be called\n$( \"p\" ).die( \"click\", foo );"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "version/1.4.1"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "disabled",
      "return": "",
      "title": ":disabled Selector",
      "sample": ":disabled",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements that are disabled.",
      "longdesc": {
        "p": [
          {
            "code": ["$(':disabled')", "$('*:disabled')", "$('input:disabled')"]
          },
          {
            "code": [":disabled", "[disabled]", ":disabled", "[disabled]"],
            "a": {
              "href":
                "https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements",
              "$t": "actually disabled"
            }
          },
          {
            "code": [
              ":disabled",
              "disabled",
              "<button>",
              "<input>",
              "<optgroup>",
              "<option>",
              "<select>",
              "<textarea>",
              "<menuitem>",
              "<fieldset>"
            ]
          }
        ]
      },
      "example": {
        "desc": "Finds all input elements that are disabled.",
        "code": "$( \"input:disabled\" ).val( \"this is it\" );",
        "html":
          "<form>\n  <input name=\"email\" disabled=\"disabled\">\n  <input name=\"id\">\n</form>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "each",
      "return": "jQuery",
      "title": ".each()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "function",
          "type": "Function",
          "$t": "",
          "desc": "A function to execute for each matched element.",
          "argument": [
            {
              "name": "index",
              "type": "Integer"
            },
            {
              "name": "element",
              "type": "Element"
            }
          ]
        }
      },
      "desc":
        "Iterate over a jQuery object, executing a function for each matched element.",
      "longdesc": {
        "p": [
          {
            "code": [".each()", "this"]
          },
          "Suppose you have a simple unordered list on the page:",
          "You can select the list items and iterate across them:",
          "A message is thus logged for each item in the list:",
          {
            "samp": ["0: foo", "1: bar"],
            "br": {}
          },
          {
            "code": "false"
          },
          {
            "i": ["implicit iteration", "explicitly"],
            "code": ".each()"
          }
        ],
        "pre": [
          {
            "code": "<ul>\n  <li>foo</li>\n  <li>bar</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).each(function( index ) {   console.log( index + \": \" + $( this ).text() );\n});"
          },
          {
            "code":
              "// The .each() method is unnecessary here:\n$( \"li\" ).each(function() {   $( this ).addClass( \"foo\" );\n});\n\n// Instead, you should rely on implicit iteration:\n$( \"li\" ).addClass( \"bar\" );"
          }
        ]
      },
      "example": [
        {
          "desc": "Iterate over three divs and sets their color property.",
          "code":
            "$( document.body ).click(function() {   $( \"div\" ).each(function( i ) {     if ( this.style.color !== \"blue\" ) {       this.style.color = \"blue\";\n    } else {       this.style.color = \"\";\n    }\n  });\n});",
          "css":
            "div {     color: red;\n    text-align: center;\n    cursor: pointer;\n    font-weight: bolder;\n    width: 300px;\n  }",
          "html":
            "<div>Click here</div>\n<div>to iterate through</div>\n<div>these divs.</div>"
        },
        {
          "desc": {
            "code": "$( this )"
          },
          "code":
            "$( \"span\" ).click(function() {   $( \"li\" ).each(function() {     $( this ).toggleClass( \"example\" );\n  });\n});",
          "css":
            "ul {     font-size: 18px;\n    margin: 0;\n  }\n  span {     color: blue;\n    text-decoration: underline;\n    cursor: pointer;\n  }\n  .example {     font-style: italic;\n  }",
          "html":
            "To do list: <span>(click here to change)</span>\n<ul>\n  <li>Eat</li>\n  <li>Sleep</li>\n  <li>Be merry</li>\n</ul>"
        },
        {
          "desc": {
            "code": "return false"
          },
          "code":
            "$( \"button\" ).click(function() {   $( \"div\" ).each(function( index, element ) {     // element == this\n    $( element ).css( \"backgroundColor\", \"yellow\" );\n    if ( $( this ).is( \"#stop\" ) ) {       $( \"span\" ).text( \"Stopped at div index #\" + index );\n      return false;\n    }\n  });\n});",
          "css":
            "div {     width: 40px;\n    height: 40px;\n    margin: 5px;\n    float: left;\n    border: 2px blue solid;\n    text-align: center;\n  }\n  span {     color: red;\n  }",
          "html":
            "<button>Change colors</button>\n<span></span>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div id=\"stop\">Stop here</div>\n<div></div>\n<div></div>\n<div></div>"
        }
      ],
      "category": [
        {
          "slug": "miscellaneous/collection-manipulation"
        },
        {
          "slug": "traversing"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "element",
      "return": "",
      "title": "Element Selector (\"element\")",
      "sample": "element",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "element",
          "type": "String",
          "desc":
            "An element to search for. Refers to the tagName of DOM nodes."
        }
      },
      "desc": "Selects all elements with the given tag name.",
      "longdesc": {
        "p": {
          "code": "getElementsByTagName()"
        }
      },
      "example": {
        "desc": "Finds every DIV element.",
        "code": "$( \"div\" ).css( \"border\", \"9px solid red\" );",
        "html": "<div>DIV1</div>\n<div>DIV2</div>\n<span>SPAN</span>",
        "css":
          "div, span {     width: 60px;\n    height: 60px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #eee;\n  }"
      },
      "category": [
        {
          "slug": "selectors/basic-css-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "empty",
      "return": "",
      "title": ":empty Selector",
      "sample": ":empty",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "Select all elements that have no children (including text nodes).",
      "longdesc": {
        "p": [
          {
            "code": ":parent"
          },
          "One important thing to note with :empty (and :parent) is that child elements include text nodes.",
          {
            "code": "<p>"
          }
        ]
      },
      "example": {
        "desc":
          "Finds all elements that are empty - they don't have child elements or text.",
        "code":
          "$( \"td:empty\" )\n  .text( \"Was empty!\" )\n  .css( \"background\", \"rgb(255,220,200)\" );",
        "css": "td {     text-align: center;\n  }",
        "html":
          "<table border=\"1\">\n  <tr><td>TD #0</td><td></td></tr>\n  <tr><td>TD #2</td><td></td></tr>\n  <tr><td></td><td>TD#5</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/content-filter-selector"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "empty",
      "return": "jQuery",
      "title": ".empty()",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "Remove all child nodes of the set of matched elements from the DOM.",
      "longdesc": {
        "p": [
          "This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:",
          "We can target any element for removal:",
          {
            "code": "Hello"
          },
          {
            "code": "<div class=\"hello\">"
          },
          "To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.",
          {
            "a": {
              "href": "/detach/",
              "code": ".detach()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".hello\" ).empty();"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"hello\"></div>\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          }
        ]
      },
      "example": {
        "desc":
          "Removes all child nodes (including text nodes) from all paragraphs",
        "code": "$( \"button\" ).click(function() {   $( \"p\" ).empty();\n});",
        "css": "p {     background: yellow;\n  }",
        "html":
          "<p>\n  Hello, <span>Person</span> <em>and person</em>.\n</p>\n\n<button>Call empty() on above paragraph</button>"
      },
      "category": [
        {
          "slug": "manipulation/dom-removal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "enabled",
      "return": "",
      "title": ":enabled Selector",
      "sample": ":enabled",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements that are enabled.",
      "longdesc": {
        "p": [
          {
            "code": [
              "$( \":enabled\" )",
              "$( \"*:enabled\" )",
              "$( \"input:enabled\" )"
            ]
          },
          {
            "code": [
              ":enabled",
              ":not([disabled])",
              ":enabled",
              ":not([disabled])"
            ],
            "em": "attribute"
          },
          {
            "code": [
              ":enabled",
              "disabled",
              "<button>",
              "<input>",
              "<optgroup>",
              "<option>",
              "<select>",
              "<textarea>"
            ]
          }
        ]
      },
      "example": {
        "desc": "Find all input elements that are enabled.",
        "code": "$( \"input:enabled\" ).val( \"this is it\" );",
        "html":
          "<form>\n  <input name=\"email\" disabled=\"disabled\">\n  <input name=\"id\">\n</form>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "end",
      "return": "jQuery",
      "title": ".end()",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.",
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/category/traversing/",
              "$t": "DOM traversal"
            },
            "code": "end()"
          },
          "Suppose we have a couple short lists on a page:",
          {
            "code": ["end()", "end()"]
          },
          {
            "code": [
              "foo",
              "end()",
              "find()",
              "find()",
              "<ul class=\"first\">",
              "<li class=\"foo\">"
            ]
          },
          {
            "code": "end()"
          },
          {
            "code": ["end()", "end()"]
          }
        ],
        "pre": [
          {
            "code":
              "<ul class=\"first\">\n  <li class=\"foo\">list item 1</li>\n  <li>list item 2</li>\n  <li class=\"bar\">list item 3</li>\n</ul>\n<ul class=\"second\">\n  <li class=\"foo\">list item 1</li>\n  <li>list item 2</li>\n  <li class=\"bar\">list item 3</li>\n</ul>"
          },
          {
            "code":
              "$( \"ul.first\" )\n  .find( \".foo\" )\n    .css( \"background-color\", \"red\" )\n  .end()\n  .find( \".bar\" )\n    .css( \"background-color\", \"green\" );"
          },
          {
            "code":
              "$( \"ul.first\" )\n  .find( \".foo\" )\n    .css( \"background-color\", \"red\" )\n  .end()\n  .find( \".bar\" )\n    .css( \"background-color\", \"green\" )\n  .end();"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.",
          "code":
            "jQuery.fn.showTags = function( n ) {   var tags = this.map(function() {     return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n  $( \"b:eq( \" + n + \" )\" ).text( tags );\n  return this;\n};\n\n$( \"p\" )\n  .showTags( 0 )\n  .find( \"span\" )\n    .showTags( 1 )\n    .css( \"background\", \"yellow\" )\n  .end()\n  .showTags( 2 )\n  .css( \"font-style\", \"italic\" );",
          "css":
            "p, div {     margin: 1px;\n    padding: 1px;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  div {     color: blue;\n  }\n  b {     color: red;\n  }",
          "html":
            "<p>\n  Hi there <span>how</span> are you <span>doing</span>?\n</p>\n\n<p>\n  This <span>span</span> is one of\n  several <span>spans</span> in this\n  <span>sentence</span>.\n</p>\n\n<div>\n  Tags in jQuery object initially: <b></b>\n</div>\n\n<div>\n  Tags in jQuery object after find: <b></b>\n</div>\n\n<div>\n  Tags in jQuery object after end: <b></b>\n</div>"
        },
        {
          "desc":
            "Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.",
          "code":
            "$( \"p\" )\n  .find( \"span\" )\n  .end()\n  .css( \"border\", \"2px red solid\" );",
          "css": "p {     margin: 10px;\n    padding: 10px;\n  }",
          "html": "<p><span>Hello</span>, how are you?</p>"
        }
      ],
      "category": [
        {
          "slug": "traversing/miscellaneous-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "eq",
      "return": "",
      "title": ":eq() Selector",
      "signature": [
        {
          "sample": ":eq(index)",
          "added": "1.0",
          "argument": {
            "name": "index",
            "type": "Number",
            "desc": "Zero-based index of the element to match."
          }
        },
        {
          "sample": ":eq(-index)",
          "added": "1.8",
          "argument": {
            "name": "indexFromEnd",
            "type": "Integer",
            "desc":
              "Zero-based index of the element to match, counting backwards from the last element."
          }
        }
      ],
      "desc": {
        "code": "n"
      },
      "longdesc": {
        "p": [
          {
            "code": [
              ":eq()",
              ":lt()",
              ":gt()",
              ":even",
              ":odd",
              ".myclass",
              "0",
              "3"
            ]
          },
          {
            "em": ["0-based indexing", "1-based indexing"],
            "code": ["$( \".myclass:eq(1)\" )", ":nth-child(n)"]
          },
          {
            "code": [":eq(index)", "index"],
            "em": "not",
            "a": {
              "href": "/eq/",
              "code": ".eq(index)"
            }
          }
        ]
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":eq()",
        "data-alt": "$(\"your-pure-css-selector\").eq(index)"
      },
      "example": [
        {
          "desc": "Find the third td.",
          "code": "$( \"td:eq( 2 )\" ).css( \"color\", \"red\" );",
          "html":
            "<table border=\"1\">\n  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>\n  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>\n  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>\n</table>"
        },
        {
          "height": "160",
          "desc": {
            "code": [":eq()", ":nth-child()", ":eq()", ".each()"]
          },
          "code":
            "// Applies yellow background color to a single <li>\n$( \"ul.nav li:eq(1)\" ).css( \"backgroundColor\", \"#ff0\" );\n\n// Applies italics to text of the second <li> within each <ul class=\"nav\">\n$( \"ul.nav\" ).each(function( index ) {   $( this ).find( \"li:eq(1)\" ).css( \"fontStyle\", \"italic\" );\n});\n\n// Applies red text color to descendants of <ul class=\"nav\">\n// for each <li> that is the second child of its parent\n$( \"ul.nav li:nth-child(2)\" ).css( \"color\", \"red\" );",
          "html":
            "<ul class=\"nav\">\n  <li>List 1, item 1</li>\n  <li>List 1, item 2</li>\n  <li>List 1, item 3</li>\n</ul>\n<ul class=\"nav\">\n  <li>List 2, item 1</li>\n  <li>List 2, item 2</li>\n  <li>List 2, item 3</li>\n</ul>"
        },
        {
          "desc":
            "Add a class to List 2, item 2 by targeting the second to last <li>",
          "css": ".foo {     color: blue;\n    background-color: yellow;\n  }",
          "code": "$( \"li:eq(-2)\" ).addClass( \"foo\" )",
          "html":
            "<ul class=\"nav\">\n  <li>List 1, item 1</li>\n  <li>List 1, item 2</li>\n  <li>List 1, item 3</li>\n</ul>\n<ul class=\"nav\">\n  <li>List 2, item 1</li>\n  <li>List 2, item 2</li>\n  <li>List 2, item 3</li>\n</ul>"
        }
      ],
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.8"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "eq",
      "return": "jQuery",
      "title": ".eq()",
      "signature": [
        {
          "added": "1.1.2",
          "argument": {
            "name": "index",
            "type": "Integer",
            "desc": "An integer indicating the 0-based position of the element."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "indexFromEnd",
            "type": "Integer",
            "desc":
              "An integer indicating the position of the element, counting backwards from the last element in the set."
          }
        }
      ],
      "desc":
        "Reduce the set of matched elements to the one at the specified index.",
      "longdesc": {
        "p": [
          {
            "code": ".eq()"
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          "The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.",
          "Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:",
          "This time list item 4 is turned red, since it is two from the end of the set.",
          {
            "code": "length"
          },
          {
            "code": ".eq( 5 )"
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code": "$( \"li\" ).eq( 2 ).css( \"background-color\", \"red\" );"
          },
          {
            "code": "$( \"li\" ).eq( -2 ).css( \"background-color\", \"red\" );"
          },
          {
            "code": "$( \"li\" ).eq( 5 ).css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc":
          "Turn the div with index 2 blue by adding an appropriate class.",
        "code": "$( \"body\" ).find( \"div\" ).eq( 2 ).addClass( \"blue\" );",
        "css":
          "div {     width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  .blue {     background: blue;\n  }",
        "html":
          "<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>"
      },
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "error",
      "return": "jQuery",
      "deprecated": "1.8",
      "removed": "3.0",
      "title": ".error()",
      "desc": "Bind an event handler to the \"error\" JavaScript event.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute when the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".on( \"error\", handler )"
          },
          {
            "b": "As of jQuery 1.8",
            "code": [".error()", ".on( \"error\", handler )", "error"]
          },
          {
            "code": "error"
          },
          "For example, consider a page with a simple image element:",
          "The event handler can be bound to the image:",
          "If the image cannot be loaded (for example, because it is not present at the supplied URL), the alert is displayed:",
          {
            "samp": "Handler for .error() called."
          },
          {
            "code": [
              "error",
              "window",
              "window",
              "error",
              "error",
              "window.onerror"
            ]
          }
        ],
        "pre": [
          {
            "code": "<img alt=\"Book\" id=\"book\">"
          },
          {
            "code":
              "$( \"#book\" )\n  .error(function() {     alert( \"Handler for .error() called.\" )\n  })\n  .attr( \"src\", \"missing.png\" );"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "em": "must",
            "code": ["error", "src", "error", "error", "file:"]
          }
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "error"
      },
      "example": {
        "desc": {
          "code": ["src", ".error()", "error"]
        },
        "code":
          "// If missing.png is missing, it is replaced by replacement.png\n$( \"img\" )\n  .error(function() {     $( this ).attr( \"src\", \"replacement.png\" );\n  })\n  .attr( \"src\", \"missing.png\" );"
      },
      "category": [
        {
          "slug": "events/browser-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "even",
      "return": "",
      "title": ":even Selector",
      "sample": ":even",
      "signature": {
        "added": "1.0"
      },
      "desc": {
        "a": {
          "href": "/Selectors/odd/",
          "$t": "odd"
        }
      },
      "longdesc": {
        "p": {
          "em": "0-based indexing",
          "code": ":even"
        }
      },
      "note": [
        {
          "id": "jquery-selector-extension",
          "type": "additional",
          "data-selector": ":even"
        },
        {
          "id": "document-order",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Finds even table rows, matching the first, third and so on (index 0, 2, 4 etc.).",
        "code": "$( \"tr:even\" ).css( \"background-color\", \"#bbf\" );",
        "css": "table {     background: #eee;\n  }",
        "html":
          "<table border=\"1\">\n  <tr><td>Row with Index #0</td></tr>\n  <tr><td>Row with Index #1</td></tr>\n  <tr><td>Row with Index #2</td></tr>\n  <tr><td>Row with Index #3</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.currentTarget",
      "return": "Element",
      "title": "event.currentTarget",
      "signature": {
        "added": "1.3"
      },
      "desc": "The current DOM element within the event bubbling phase.",
      "longdesc": {
        "p": [
          {
            "code": "this"
          },
          {
            "em": {
              "a": {
                "href": "/jQuery.proxy/",
                "$t": "jQuery.proxy"
              },
              "code": ["this", "event.currentTarget"]
            }
          }
        ]
      },
      "example": {
        "desc": "Alert that currentTarget matches the `this` keyword.",
        "code":
          "$( \"p\" ).click(function( event ) {   alert( event.currentTarget === this ); // true\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.data",
      "return": "Object",
      "title": "event.data",
      "signature": {
        "added": "1.1"
      },
      "desc":
        "An optional object of data passed to an event method when the current executing handler is bound.",
      "longdesc": {},
      "example": {
        "desc": {
          "code": ["for", "i", ".on()"]
        },
        "html":
          "<button> 0 </button>\n<button> 1 </button>\n<button> 2 </button>\n<button> 3 </button>\n<button> 4 </button>\n\n<div id=\"log\"></div>",
        "code":
          "var logDiv = $( \"#log\" );\n\nfor ( var i = 0; i < 5; i++ ) {   $( \"button\" ).eq( i ).on( \"click\", { value: i }, function( event ) {     var msgs = [\n      \"button = \" + $( this ).index(),\n      \"event.data.value = \" + event.data.value,\n      \"i = \" + i\n    ];\n    logDiv.append( msgs.join( \", \" ) + \"<br>\" );\n  });\n}"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.delegateTarget",
      "return": "Element",
      "title": "event.delegateTarget",
      "signature": {
        "added": "1.7"
      },
      "desc":
        "The element where the currently-called jQuery event handler was attached.",
      "longdesc": {
        "p": [
          {
            "a": [
              {
                "href": "/delegate/",
                "code": ".delegate()"
              },
              {
                "href": "/on/",
                "code": ".on()"
              }
            ]
          },
          {
            "code": ["event.delegateTarget", "event.currentTarget"]
          }
        ]
      },
      "example": {
        "desc":
          "When a button in any box class is clicked, change the box's background color to red.",
        "code":
          "$( \".box\" ).on( \"click\", \"button\", function( event ) {   $( event.delegateTarget ).css( \"background-color\", \"red\" );\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "events"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "event.isDefaultPrevented",
      "return": "Boolean",
      "title": "event.isDefaultPrevented()",
      "signature": {
        "added": "1.3"
      },
      "desc": {
        "a": {
          "href": "/event.preventDefault/",
          "$t": "event.preventDefault()"
        }
      },
      "longdesc": "",
      "example": {
        "desc": "Checks whether event.preventDefault() was called.",
        "code":
          "$( \"a\" ).click(function( event ) {   alert( event.isDefaultPrevented() ); // false\n  event.preventDefault();\n  alert( event.isDefaultPrevented() ); // true\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "event.isImmediatePropagationStopped",
      "return": "Boolean",
      "title": "event.isImmediatePropagationStopped()",
      "signature": {
        "added": "1.3"
      },
      "desc":
        "Returns whether event.stopImmediatePropagation() was ever called on this event object.",
      "longdesc": {
        "p": {
          "a": {
            "href":
              "http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped",
            "$t": "DOM level 3"
          }
        }
      },
      "example": {
        "desc": "Checks whether event.stopImmediatePropagation() was called.",
        "code":
          "function immediatePropStopped( event ) {   var msg = \"\";\n  if ( event.isImmediatePropagationStopped() ) {     msg = \"called\";\n  } else {     msg = \"not called\";\n  }\n  $( \"#stop-log\" ).append( \"<div>\" + msg + \"</div>\" );\n}\n\n$( \"button\" ).click(function( event ) {   immediatePropStopped( event );\n  event.stopImmediatePropagation();\n  immediatePropStopped( event );\n});",
        "html": "<button>click me</button>\n<div id=\"stop-log\"></div>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "event.isPropagationStopped",
      "return": "Boolean",
      "title": "event.isPropagationStopped()",
      "signature": {
        "added": "1.3"
      },
      "desc": {
        "a": {
          "href": "/event.stopPropagation/",
          "$t": "event.stopPropagation()"
        }
      },
      "longdesc": {
        "p": {
          "a": {
            "href":
              "http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped",
            "$t": "W3C DOM Level 3 specification"
          }
        }
      },
      "example": {
        "desc": "Checks whether event.stopPropagation() was called",
        "code":
          "function propStopped( event ) {   var msg = \"\";\n  if ( event.isPropagationStopped() ) {     msg = \"called\";\n  } else {     msg = \"not called\";\n  }\n  $( \"#stop-log\" ).append( \"<div>\" + msg + \"</div>\" );\n}\n\n$( \"button\" ).click(function(event) {   propStopped( event );\n  event.stopPropagation();\n  propStopped( event );\n});",
        "html": "<button>click me</button>\n<div id=\"stop-log\"></div>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.metaKey",
      "return": "Boolean",
      "title": "event.metaKey",
      "signature": {
        "added": "1.0.4"
      },
      "desc":
        "Indicates whether the META key was pressed when the event fired.",
      "longdesc": {
        "p": [
          {
            "code": ["true", "false"],
            "kbd": "META"
          },
          {
            "kbd": "META",
            "a": {
              "href": "http://en.wikipedia.org/wiki/Command_key",
              "$t": "Command key (⌘)"
            }
          },
          {
            "kbd": "META",
            "a": {
              "href": "http://en.wikipedia.org/wiki/Windows_key",
              "$t": "Windows key"
            }
          }
        ]
      },
      "example": {
        "desc":
          "Determine whether the META key was pressed when the event fired.",
        "css":
          "body {     background-color: #eef;\n  }\n  div {     padding: 20px;\n  }",
        "html":
          "<button value=\"Test\" name=\"Test\" id=\"checkMetaKey\">Click me!</button>\n<div id=\"display\"></div>",
        "code":
          "$( \"#checkMetaKey\" ).click(function( event ) {   $( \"#display\" ).text( event.metaKey );\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.namespace",
      "return": "String",
      "title": "event.namespace",
      "signature": {
        "added": "1.4.3"
      },
      "desc": "The namespace specified when the event was triggered.",
      "longdesc": {
        "p":
          "This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used."
      },
      "example": {
        "desc": "Determine the event namespace used.",
        "code":
          "$( \"p\" ).on( \"test.something\", function( event ) {   alert( event.namespace );\n});\n$( \"button\" ).click(function( event ) {   $( \"p\" ).trigger( \"test.something\" );\n});",
        "html": "<button>display event.namespace</button>\n<p></p>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.pageX",
      "return": "Number",
      "title": "event.pageX",
      "signature": {
        "added": "1.0.4"
      },
      "desc": "The mouse position relative to the left edge of the document.",
      "longdesc": "",
      "example": {
        "desc":
          "Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "css":
          "body {     background-color: #eef;\n  }\n  div {     padding: 20px;\n  }",
        "html": "<div id=\"log\"></div>",
        "code":
          "$( document ).on( \"mousemove\", function( event ) {   $( \"#log\" ).text( \"pageX: \" + event.pageX + \", pageY: \" + event.pageY );\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.pageY",
      "return": "Number",
      "title": "event.pageY",
      "signature": {
        "added": "1.0.4"
      },
      "desc": "The mouse position relative to the top edge of the document.",
      "longdesc": "",
      "example": {
        "desc":
          "Show the mouse position relative to the left and top edges of the document (within this iframe).",
        "css":
          "body {     background-color: #eef;\n  }\n  div {     padding: 20px;\n  }",
        "html": "<div id=\"log\"></div>",
        "code":
          "$( document ).on( \"mousemove\", function( event ) {   $( \"#log\" ).text( \"pageX: \" + event.pageX + \", pageY: \" + event.pageY );\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0.4"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "event.preventDefault",
      "type": "method",
      "return": "undefined",
      "title": "event.preventDefault()",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "If this method is called, the default action of the event will not be triggered.",
      "longdesc": {
        "p": {
          "a": {
            "href": "/event.isDefaultPrevented/",
            "code": "event.isDefaultPrevented()"
          }
        }
      },
      "example": {
        "desc": "Cancel the default action (navigation) of the click.",
        "code":
          "$( \"a\" ).click(function( event ) {   event.preventDefault();\n  $( \"<div>\" )\n    .append( \"default \" + event.type + \" prevented\" )\n    .appendTo( \"#log\" );\n});",
        "html":
          "<a href=\"http://jquery.com\">default click action is prevented</a>\n<div id=\"log\"></div>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.relatedTarget",
      "return": "Element",
      "title": "event.relatedTarget",
      "signature": {
        "added": "1.1.4"
      },
      "desc": "The other DOM element involved in the event, if any.",
      "longdesc": {
        "p": {
          "code": ["mouseout", "mouseover"]
        }
      },
      "example": {
        "desc": "On mouseout of anchors, alert the element type being entered.",
        "code":
          "$( \"a\" ).mouseout(function( event ) {   alert( event.relatedTarget.nodeName ); // \"DIV\"\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.result",
      "return": "Object",
      "title": "event.result",
      "signature": {
        "added": "1.3"
      },
      "desc": {
        "code": "undefined"
      },
      "longdesc": {
        "p":
          "This property can be useful for getting previous return values of custom events."
      },
      "example": {
        "desc": "Display previous handler's return value",
        "code":
          "$( \"button\" ).click(function( event ) {   return \"hey\";\n});\n$( \"button\" ).click(function( event ) {   $( \"p\" ).html( event.result );\n});",
        "html": "<button>display event.result</button>\n<p></p>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "event.stopImmediatePropagation",
      "return": "undefined",
      "title": "event.stopImmediatePropagation()",
      "signature": {
        "added": "1.3"
      },
      "desc":
        "Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.",
      "longdesc": {
        "p": [
          {
            "code": [
              "event.stopPropagation()",
              {
                "a": {
                  "href": "/event.stopPropagation/",
                  "$t": "event.stopPropagation()"
                }
              }
            ]
          },
          {
            "code": {
              "a": {
                "href": "/event.isImmediatePropagationStopped/",
                "$t": "event.isImmediatePropagationStopped()"
              }
            }
          }
        ]
      },
      "note": {
        "id": "propagation-for-live-or-delegate",
        "type": "additional"
      },
      "example": {
        "desc": "Prevents other event handlers from being called.",
        "css":
          "p {     height: 30px;\n    width: 150px;\n    background-color: #ccf;\n  }\n  div {     height: 30px;\n    width: 150px;\n    background-color: #cfc;\n  }",
        "code":
          "$( \"p\" ).click(function( event ) {   event.stopImmediatePropagation();\n});\n$( \"p\" ).click(function( event ) {   // This function won't be executed\n  $( this ).css( \"background-color\", \"#f00\" );\n});\n$( \"div\" ).click(function( event ) {   // This function will be executed\n  $( this ).css( \"background-color\", \"#f00\" );\n});",
        "html": "<p>paragraph</p>\n<div>division</div>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "event.stopPropagation",
      "return": "undefined",
      "title": "event.stopPropagation()",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.",
      "longdesc": {
        "p": [
          {
            "code": {
              "a": {
                "href": "/event.isPropagationStopped/",
                "$t": "event.isPropagationStopped()"
              }
            }
          },
          {
            "a": {
              "href": "/trigger/",
              "$t": "trigger()"
            }
          },
          {
            "em": "on the same element"
          }
        ]
      },
      "note": {
        "id": "propagation-for-live-or-delegate",
        "type": "additional"
      },
      "example": {
        "desc": "Kill the bubbling on the click event.",
        "code":
          "$( \"p\" ).click(function( event ) {   event.stopPropagation();\n  // Do something\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.target",
      "return": "Element",
      "title": "event.target",
      "signature": {
        "added": "1.0"
      },
      "desc": "The DOM element that initiated the event.",
      "longdesc": {
        "p": {
          "code": ["target", "event.target", "this"]
        }
      },
      "example": [
        {
          "desc": "Display the tag's name on click",
          "code":
            "$( \"body\" ).click(function( event ) {   $( \"#log\" ).html( \"clicked: \" + event.target.nodeName );\n});",
          "css":
            "span, strong, p {     padding: 8px;\n    display: block;\n    border: 1px solid #999;\n  }",
          "html":
            "<div id=\"log\"></div>\n<div>\n  <p>\n    <strong><span>click</span></strong>\n  </p>\n</div>"
        },
        {
          "desc":
            "Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.",
          "code":
            "function handler( event ) {   var target = $( event.target );\n  if ( target.is( \"li\" ) ) {     target.children().toggle();\n  }\n}\n$( \"ul\" ).click( handler ).find( \"ul\" ).hide();",
          "html":
            "<ul>\n  <li>item 1\n    <ul>\n      <li>sub item 1-a</li>\n      <li>sub item 1-b</li>\n    </ul>\n  </li>\n  <li>item 2\n    <ul>\n      <li>sub item 2-a</li>\n      <li>sub item 2-b</li>\n    </ul>\n  </li>\n</ul>"
        }
      ],
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.timeStamp",
      "return": "Number",
      "title": "event.timeStamp",
      "signature": {
        "added": "1.2.6"
      },
      "desc":
        "The difference in milliseconds between the time the browser created the event and January 1, 1970.",
      "longdesc": {
        "p": [
          {
            "code": ["event.timeStamp", "(new Date).getTime()"]
          },
          {
            "a": {
              "href": "https://bugzilla.mozilla.org/show_bug.cgi?id=238041",
              "$t": "bug open since 2004"
            }
          }
        ]
      },
      "example": {
        "desc": "Display the time since the click handler last executed.",
        "css":
          "div {     height: 100px;\n    width: 300px;\n    margin: 10px;\n    background-color: #ffd;\n    overflow: auto;\n  }",
        "code":
          "var last, diff;\n$( \"div\" ).click(function( event ) {   if ( last ) {     diff = event.timeStamp - last;\n    $( \"div\" ).append( \"time since last event: \" + diff + \"<br>\" );\n  } else {     $( \"div\" ).append( \"Click again.<br>\" );\n  }\n  last = event.timeStamp;\n});",
        "html": "<div>Click.</div>"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.2.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.type",
      "return": "String",
      "title": "event.type",
      "signature": {
        "added": "1.0"
      },
      "desc": "Describes the nature of the event.",
      "longdesc": "",
      "example": {
        "desc": "On all anchor clicks, alert the event type.",
        "code":
          "$( \"a\" ).click(function( event ) {   alert( event.type ); // \"click\"\n});"
      },
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "event.which",
      "return": "Number",
      "title": "event.which",
      "signature": {
        "added": "1.1.3"
      },
      "desc":
        "For key or mouse events, this property indicates the specific key or button that was pressed.",
      "longdesc": {
        "p": [
          {
            "code": [
              "event.which",
              "event.keyCode",
              "event.charCode",
              "event.which"
            ],
            "a": {
              "href":
                "https://developer.mozilla.org/en/DOM/event.charCode#Notes",
              "$t": "event.charCode on the MDN"
            }
          },
          {
            "code": [
              "event.which",
              "mousedown",
              "mouseup",
              "1",
              "2",
              "3",
              "event.which",
              "event.button"
            ]
          }
        ]
      },
      "example": [
        {
          "desc": "Log which key was depressed.",
          "code":
            "$( \"#whichkey\" ).on( \"keydown\", function( event ) {   $( \"#log\" ).html( event.type + \": \" +  event.which );\n});",
          "html":
            "<input id=\"whichkey\" value=\"type something\">\n<div id=\"log\"></div>"
        },
        {
          "desc": "Log which mouse button was depressed.",
          "code":
            "$( \"#whichkey\" ).on( \"mousedown\", function( event ) {   $( \"#log\" ).html( event.type + \": \" +  event.which );\n});",
          "html":
            "<input id=\"whichkey\" value=\"click here\">\n<div id=\"log\"></div>"
        }
      ],
      "category": [
        {
          "slug": "events/event-object"
        },
        {
          "slug": "version/1.1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "fadeIn",
      "return": "jQuery",
      "title": ".fadeIn()",
      "desc": "Display the matched elements by fading them to opaque.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".fadeIn()",
              {
                "a": {
                  "href": "/fadeTo/",
                  "$t": ".fadeTo()"
                }
              }
            ]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600", "duration", "400"]
          },
          "We can animate any element, such as a simple image:",
          {
            "strong": "As of jQuery 1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "pre": {
          "code":
            "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">\n\n// With the element initially hidden, we can show it slowly:\n$( \"#clickme\" ).click(function() {   $( \"#book\" ).fadeIn( \"slow\", function() {     // Animation complete\n  });\n});"
        },
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_33.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_34.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_35.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_36.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "fadeIn()"
          }
        },
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".fadeIn()"
      },
      "example": [
        {
          "desc":
            "Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.",
          "code":
            "$( document.body ).click(function() {   $( \"div:hidden:first\" ).fadeIn( \"slow\" );\n});",
          "css":
            "span {     color: red;\n    cursor: pointer;\n  }\n  div {     margin: 3px;\n    width: 80px;\n    display: none;\n    height: 80px;\n    float: left;\n  }\n  #one {     background: #f00;\n  }\n  #two {     background: #0f0;\n  }\n  #three {     background: #00f;\n  }",
          "html":
            "<span>Click here...</span>\n<div id=\"one\"></div>\n<div id=\"two\"></div>\n<div id=\"three\"></div>"
        },
        {
          "desc":
            "Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.",
          "code":
            "$( \"a\" ).click(function() {   $( \"div\" ).fadeIn( 3000, function() {     $( \"span\" ).fadeIn( 100 );\n  });\n  return false;\n});",
          "css":
            "p {     position: relative;\n    width: 400px;\n    height: 90px;\n  }\n  div {     position: absolute;\n    width: 400px;\n    height: 65px;\n    font-size: 36px;\n    text-align: center;\n    color: yellow;\n    background: red;\n    padding-top: 25px;\n    top: 0;\n    left: 0;\n    display: none;\n  }\n  span {     display: none;\n  }",
          "html":
            "<p>\n  Let it be known that the party of the first part\n  and the party of the second part are henceforth\n  and hereto directed to assess the allegations\n  for factual correctness... (<a href=\"#\">click!</a>)\n  <div><span>CENSORED!</span></div>\n</p>"
        }
      ],
      "category": [
        {
          "slug": "effects/fading"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "fadeOut",
      "return": "jQuery",
      "title": ".fadeOut()",
      "desc": "Hide the matched elements by fading them to transparent.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".fadeOut()", "display", "none"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600", "duration", "400"]
          },
          "We can animate any element, such as a simple image:",
          "With the element initially shown, we can hide it slowly:",
          {
            "strong": "As of jQuery 1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() {   $( \"#book\" ).fadeOut( \"slow\", function() {     // Animation complete.\n  });\n});"
          }
        ],
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_37.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_38.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_39.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_40.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "fadeOut()"
          }
        },
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "code": ".fadeOut()",
            "a": {
              "href": "/hidden-selector/",
              "$t": ":hidden Selector"
            }
          }
        },
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".fadeOut()"
      },
      "example": [
        {
          "desc":
            "Animates all paragraphs to fade out, completing the animation within 600 milliseconds.",
          "code":
            "$( \"p\" ).click(function() {   $( \"p\" ).fadeOut( \"slow\" );\n});",
          "css": "p {     font-size: 150%;\n    cursor: pointer;\n  }",
          "html":
            "<p>\n  If you click on this paragraph\n  you'll see it just fade away.\n</p>"
        },
        {
          "desc": "Fades out spans in one section that you click on.",
          "code":
            "$( \"span\" ).click(function() {   $( this ).fadeOut( 1000, function() {     $( \"div\" ).text( \"'\" + $( this ).text() + \"' has faded!\" );\n    $( this ).remove();\n  });\n});\n$( \"span\" ).hover(function() {   $( this ).addClass( \"hilite\" );\n}, function() {   $( this ).removeClass( \"hilite\" );\n});",
          "css":
            "span {     cursor: pointer;\n  }\n  span.hilite {     background: yellow;\n  }\n  div {     display: inline;\n    color: red;\n  }",
          "html":
            "<h3>Find the modifiers - <div></div></h3>\n<p>\n  If you <span>really</span> want to go outside\n  <span>in the cold</span> then make sure to wear\n  your <span>warm</span> jacket given to you by\n  your <span>favorite</span> teacher.\n</p>"
        },
        {
          "desc":
            "Fades out two divs, one with a \"linear\" easing and one with the default, \"swing,\" easing.",
          "code":
            "$( \"#btn1\" ).click(function() {   function complete() {     $( \"<div>\" ).text( this.id ).appendTo( \"#log\" );\n  }\n  $( \"#box1\" ).fadeOut( 1600, \"linear\", complete );\n  $( \"#box2\" ).fadeOut( 1600, complete );\n});\n\n$( \"#btn2\" ).click(function() {   $( \"div\" ).show();\n  $( \"#log\" ).empty();\n});",
          "css":
            ".box,\n  button {     float: left;\n    margin: 5px 10px 5px 0;\n  }\n  .box {     height: 80px;\n    width: 80px;\n    background: #090;\n  }\n  #log {     clear: left;\n  }",
          "html":
            "<button id=\"btn1\">fade out</button>\n<button id=\"btn2\">show</button>\n\n<div id=\"log\"></div>\n\n<div id=\"box1\" class=\"box\">linear</div>\n<div id=\"box2\" class=\"box\">swing</div>"
        }
      ],
      "category": [
        {
          "slug": "effects/fading"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "fadeTo",
      "return": "jQuery",
      "title": ".fadeTo()",
      "desc": "Adjust the opacity of the matched elements.",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "duration",
              "desc":
                "A string or number determining how long the animation will run.",
              "type": [
                {
                  "name": "String"
                },
                {
                  "name": "Number"
                }
              ]
            },
            {
              "name": "opacity",
              "type": "Number",
              "desc": "A number between 0 and 1 denoting the target opacity."
            },
            {
              "name": "complete",
              "type": "Function",
              "optional": "true",
              "desc": "A function to call once the animation is complete."
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "duration",
              "desc":
                "A string or number determining how long the animation will run.",
              "type": [
                {
                  "name": "String"
                },
                {
                  "name": "Number"
                }
              ]
            },
            {
              "name": "opacity",
              "type": "Number",
              "desc": "A number between 0 and 1 denoting the target opacity."
            },
            {
              "name": "easing",
              "type": "String",
              "optional": "true",
              "desc":
                "A string indicating which easing function to use for the transition."
            },
            {
              "name": "complete",
              "type": "Function",
              "optional": "true",
              "desc": "A function to call once the animation is complete."
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".fadeTo()",
              {
                "a": {
                  "href": "/fadeIn/",
                  "$t": ".fadeIn()"
                }
              }
            ]
          },
          {
            "code": [
              "'fast'",
              "'slow'",
              "200",
              "600",
              "400",
              ".fadeTo()",
              "duration"
            ]
          },
          {
            "code": "this"
          },
          "We can animate any element, such as a simple image:",
          {
            "code": [
              "duration",
              "0",
              "opacity",
              ".fadeTo( 0, opacity )",
              ".css( \"opacity\", opacity )"
            ]
          }
        ],
        "pre": {
          "code":
            "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">\n// With the element initially shown, we can dim it slowly:\n$( \"#clickme\" ).click(function() {   $( \"#book\" ).fadeTo( \"slow\" , 0.5, function() {     // Animation complete.\n  });\n});"
        },
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_41.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_42.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_43.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_44.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "fadeTo()"
          }
        }
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".fadeTo()"
      },
      "example": [
        {
          "desc":
            "Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.",
          "code":
            "$( \"p:first\" ).click(function() {   $( this ).fadeTo( \"slow\", 0.33 );\n});",
          "html":
            "<p>\nClick this paragraph to see it fade.\n</p>\n\n<p>\nCompare to this one that won't fade.\n</p>"
        },
        {
          "desc":
            "Fade div to a random opacity on each click, completing the animation within 200 milliseconds.",
          "code":
            "$( \"div\" ).click(function() {   $( this ).fadeTo( \"fast\", Math.random() );\n});",
          "css":
            "p {     width: 80px;\n    margin: 0;\n    padding: 5px;\n  }\n  div {     width: 40px;\n    height: 40px;\n    position: absolute;\n  }\n  #one {     top: 0;\n    left: 0;\n    background: #f00;\n  }\n  #two {     top: 20px;\n    left: 20px;\n    background: #0f0;\n  }\n  #three {     top: 40px;\n    left:40px;\n    background:#00f;\n  }",
          "html":
            "<p>And this is the library that John built...</p>\n\n<div id=\"one\"></div>\n<div id=\"two\"></div>\n<div id=\"three\"></div>"
        },
        {
          "desc":
            "Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.",
          "code":
            "var getPos = function( n ) {   return (Math.floor( n ) * 90) + \"px\";\n};\n$( \"p\" ).each(function( n ) {   var r = Math.floor( Math.random() * 3 );\n  var tmp = $( this ).text();\n  $( this ).text( $( \"p:eq(\" + r + \")\" ).text() );\n  $( \"p:eq(\" + r + \")\" ).text( tmp );\n  $( this ).css( \"left\", getPos( n ) );\n});\n$( \"div\" )\n  .each(function( n ) {     $( this ).css( \"left\", getPos( n ) );\n  })\n  .css( \"cursor\", \"pointer\" )\n  .click( function() {     $( this ).fadeTo( 250, 0.25, function() {       $( this )\n        .css( \"cursor\", \"\" )\n        .prev()\n          .css({             \"font-weight\": \"bolder\",\n            \"font-style\": \"italic\"\n          });\n    });\n  });",
          "css":
            "div, p {     width: 80px;\n    height: 40px;\n    top: 0;\n    margin: 0;\n    position: absolute;\n    padding-top: 8px;\n  }\n  p {     background: #fcc;\n    text-align: center;\n  }\n  div {     background: blue;\n  }",
          "html":
            "<p>Wrong</p>\n<div></div>\n<p>Wrong</p>\n<div></div>\n<p>Right!</p>\n<div></div>"
        }
      ],
      "category": [
        {
          "slug": "effects/fading"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "fadeToggle",
      "return": "jQuery",
      "title": ".fadeToggle()",
      "desc":
        "Display or hide the matched elements by animating their opacity.",
      "signature": [
        {
          "added": "1.4.4",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.4.4",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".fadeToggle()", "display", "none"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600"]
          },
          {
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".fadeToggle()"
      },
      "example": {
        "desc":
          "Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a \"finished\" message upon completion.",
        "code":
          "$( \"button:first\" ).click(function() {   $( \"p:first\" ).fadeToggle( \"slow\", \"linear\" );\n});\n$( \"button:last\" ).click(function() {   $( \"p:last\" ).fadeToggle( \"fast\", function() {     $( \"#log\" ).append( \"<div>finished</div>\" );\n  });\n});",
        "html":
          "<button>fadeToggle p1</button>\n<button>fadeToggle p2</button>\n<p>This paragraph has a slow, linear fade.</p>\n<p>This paragraph has a fast animation.</p>\n<div id=\"log\"></div>"
      },
      "category": [
        {
          "slug": "effects"
        },
        {
          "slug": "effects/fading"
        },
        {
          "slug": "version/1.4.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "file",
      "return": "",
      "title": ":file Selector",
      "sample": ":file",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type file.",
      "longdesc": {
        "p": {
          "code": [
            ":file",
            "[type=\"file\"]",
            "$( \":file\" )",
            "$(\"*:file\" )",
            "$( \"input:file\" )"
          ]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":file",
        "data-alt": "[type=\"file\"]"
      },
      "example": {
        "desc": "Finds all file inputs.",
        "code":
          "var input = $( \"input:file\" ).css({   background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 45px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select><option>Option</option></select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "filter",
      "return": "jQuery",
      "title": ".filter()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "selector",
            "type": "Selector",
            "desc":
              "A string containing a selector expression to match the current set of elements against."
          }
        },
        {
          "added": "1.0",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "element",
                "type": "Element"
              }
            ],
            "return": {
              "type": "Boolean"
            }
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "elements",
            "type": "Element",
            "desc":
              "One or more DOM elements to match the current set of elements against."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "selection",
            "type": "jQuery",
            "desc":
              "An existing jQuery object to match the current set of elements against."
          }
        }
      ],
      "desc":
        "Reduce the set of matched elements to those that match the selector or pass the function's test.",
      "longdesc": {
        "p": [
          {
            "code": ".filter()"
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          {
            "code": [":even", ":odd"]
          },
          {
            "code": "true"
          },
          "We can select the list items, then filter them based on their contents:",
          {
            "code": ["<strong>", "this"]
          },
          {
            "code": "index"
          },
          {
            "code": ["%", "index", "2"]
          },
          {
            "strong": "Note:",
            "code": ".filter()"
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n  <li>list item 6</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).filter( \":even\" ).css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "<ul>\n  <li><strong>list</strong> item 1 - one strong tag</li>\n  <li><strong>list</strong> item <strong>2</strong> -\n    two <span>strong tags</span></li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n  <li>list item 6</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" )\n  .filter(function( index ) {     return $( \"strong\", this ).length === 1;\n  })\n    .css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "$( \"li\" )\n  .filter(function( index ) {     return index % 3 === 2;\n  })\n    .css( \"background-color\", \"red\" );"
          }
        ],
        "h4": {
          "id": "using-filter-function",
          "$t": "Using a Filter Function"
        },
        "note": {
          "id": "svg-support",
          "type": "additional"
        }
      },
      "example": [
        {
          "desc":
            "Change the color of all divs; then add a border to those with a \"middle\" class.",
          "code":
            "$( \"div\" )\n  .css( \"background\", \"#c8ebcc\" )\n  .filter( \".middle\" )\n    .css( \"border-color\", \"red\" );",
          "css":
            "div {     width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 2px white solid;\n  }",
          "html":
            "<div></div>\n<div class=\"middle\"></div>\n<div class=\"middle\"></div>\n<div class=\"middle\"></div>\n<div class=\"middle\"></div>\n<div></div>"
        },
        {
          "desc":
            "Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of \"fourth.\"",
          "code":
            "$( \"div\" )\n  .css( \"background\", \"#b4b0da\" )\n  .filter(function( index ) {     return index === 1 || $( this ).attr( \"id\" ) === \"fourth\";\n  })\n    .css( \"border\", \"3px double red\" );",
          "css":
            "div {     width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 3px white solid;\n  }",
          "html":
            "<div id=\"first\"></div>\n<div id=\"second\"></div>\n<div id=\"third\"></div>\n<div id=\"fourth\"></div>\n<div id=\"fifth\"></div>\n<div id=\"sixth\"></div>"
        },
        {
          "desc":
            "Select all divs and filter the selection with a DOM element, keeping only the one with an id of \"unique\".",
          "code":
            "$( \"div\" ).filter( document.getElementById( \"unique\" ) );"
        },
        {
          "desc":
            "Select all divs and filter the selection with a jQuery object, keeping only the one with an id of \"unique\".",
          "code": "$( \"div\" ).filter( $( \"#unique\" ) );"
        }
      ],
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "find",
      "return": "jQuery",
      "title": ".find()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "selector",
            "type": "Selector",
            "desc":
              "A string containing a selector expression to match elements against."
          }
        },
        {
          "added": "1.6",
          "argument": {
            "name": "element",
            "desc": "An element or a jQuery object to match elements against.",
            "type": [
              {
                "name": "Element"
              },
              {
                "name": "jQuery"
              }
            ]
          }
        }
      ],
      "desc":
        "Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.",
      "longdesc": {
        "p": [
          {
            "code": [".find()", ".find()", ".children()"]
          },
          {
            "code": [".find()", "$()", "> p"]
          },
          "Consider a page with a basic nested list on it:",
          "If we begin at item II, we can find list items within it:",
          "The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.",
          {
            "a": {
              "href": "/jquery/#selector-context",
              "$t": "Selector context"
            },
            "code": [
              ".find()",
              "method;",
              "$( \"li.item-ii\" ).find( \"li\" )",
              "$( \"li\", \"li.item-ii\" )"
            ]
          },
          {
            "strong": "As of jQuery 1.6"
          },
          "And then pass this jQuery object to find:",
          "This will return a jQuery collection which contains only the list elements that are descendants of item II.",
          "Similarly, an element may also be passed to find:",
          "The result of this call would be a red background on item 1."
        ],
        "pre": [
          {
            "code":
              "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.item-ii\" ).find( \"li\" ).css( \"background-color\", \"red\" );"
          },
          {
            "code": "var allListElements = $( \"li\" );"
          },
          {
            "code": "$( \"li.item-ii\" ).find( allListElements );"
          },
          {
            "code":
              "var item1 = $( \"li.item-1\" )[ 0 ];\n$( \"li.item-ii\" ).find( item1 ).css( \"background-color\", \"red\" );"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "code": [".find()", "'*'"]
          }
        },
        "note": {
          "id": "svg-support",
          "type": "additional"
        }
      },
      "example": [
        {
          "desc": {
            "code": "$( \"p span\" )"
          },
          "code": "$( \"p\" ).find( \"span\" ).css( \"color\", \"red\" );",
          "html":
            "<p><span>Hello</span>, how are you?</p>\n<p>Me? I'm <span>good</span>.</p>"
        },
        {
          "desc":
            "A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.",
          "css": "span {     color: blue;\n  }",
          "code":
            "var spans = $( \"span\" );\n$( \"p\" ).find( spans ).css( \"color\", \"red\" );",
          "html":
            "<p><span>Hello</span>, how are you?</p>\n<p>Me? I'm <span>good</span>.</p>\n<div>Did you <span>eat</span> yet?</div>"
        },
        {
          "desc": {
            "strong": "t"
          },
          "code":
            "var newText = $( \"p\" ).text().split( \" \" ).join( \"</span> <span>\" );\nnewText = \"<span>\" + newText + \"</span>\";\n\n$( \"p\" )\n  .html( newText )\n  .find( \"span\" )\n    .hover(function() {       $( this ).addClass( \"hilite\" );\n    }, function() {       $( this ).removeClass( \"hilite\" );\n    })\n  .end()\n  .find( \":contains('t')\" )\n    .css({       \"font-style\": \"italic\",\n      \"font-weight\": \"bolder\"\n    });",
          "css":
            "p {     font-size: 20px;\n    width: 200px;\n    color: blue;\n    font-weight: bold;\n    margin: 0 10px;\n  }\n  .hilite {     background: yellow;\n  }",
          "html":
            "<p>\n  When the day is short\n  find that which matters to you\n  or stop believing\n</p>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "finish",
      "return": "jQuery",
      "title": ".finish()",
      "desc":
        "Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.",
      "signature": {
        "added": "1.9",
        "argument": {
          "name": "queue",
          "type": "String",
          "optional": "true",
          "default": "'fx'",
          "desc": "The name of the queue in which to stop animations."
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ".finish()"
          },
          "If the first argument is provided, only the animations in the queue represented by that string will be stopped.",
          {
            "code": [".finish()", ".stop(true, true)", ".finish()"],
            "em": "queued"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "code": ["$.fx.off", "true"]
          }
        }
      },
      "example": {
        "desc":
          "Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.",
        "code":
          "var horiz = $( \"#path\" ).width() - 20,\n  vert = $( \"#path\" ).height() - 20;\n\nvar btns = {   bstt: function() {     $( \"div.box\" ).stop( true, true );\n  },\n  bs: function() {     $( \"div.box\" ).stop();\n  },\n  bsft: function() {     $( \"div.box\" ).stop( false, true );\n  },\n  bf: function() {     $( \"div.box\" ).finish();\n  },\n  bcf: function() {     $( \"div.box\" ).clearQueue().finish();\n  },\n  bsff: function() {     $( \"div.box\" ).stop( false, false );\n  },\n  bstf: function() {     $( \"div.box\" ).stop( true, false );\n  },\n  bcs: function() {     $( \"div.box\" ).clearQueue().stop();\n  }\n};\n\n$( \"button.b\" ).on( \"click\", function() {   btns[ this.id ]();\n});\n\n$( \"#go\" ).on( \"click\", function() {   $( \".box\" )\n    .clearQueue()\n    .stop()\n    .css({       left: 10,\n      top: 10\n    })\n    .animate({       top: vert\n    }, 3000 )\n    .animate({       left: horiz\n    }, 3000 )\n    .animate({       top: 10\n    }, 3000 );\n});",
        "html":
          "<div class=\"box\"></div>\n<div id=\"path\">\n  <button id=\"go\">Go</button>\n  <br>\n  <button id=\"bstt\" class=\"b\">.stop( true,true )</button>\n  <button id=\"bcf\" class=\"b\">.clearQueue().finish()</button>\n  <br>\n  <button id=\"bstf\" class=\"b\">.stop( true, false )</button>\n  <button id=\"bcs\" class=\"b\">.clearQueue().stop()</button>\n  <br>\n  <button id=\"bsff\" class=\"b\">.stop( false, false )</button>\n  <button id=\"bs\" class=\"b\">.stop()</button>\n  <br>\n  <button id=\"bsft\" class=\"b\">.stop( false, true )</button>\n  <br>\n  <button id=\"bf\" class=\"b\">.finish()</button>\n</div>",
        "css":
          ".box {     position: absolute;\n    top: 10px;\n    left: 10px;\n    width: 15px;\n    height: 15px;\n    background: black;\n  }\n  #path {     height: 244px;\n    font-size: 70%;\n    border-left: 2px dashed red;\n    border-bottom: 2px dashed green;\n    border-right: 2px dashed blue;\n  }\n  button {     width: 12em;\n    display: block;\n    text-align: left;\n    margin: 0 auto;\n  }"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "first-child",
      "return": "",
      "title": ":first-child Selector",
      "sample": ":first-child",
      "signature": {
        "added": "1.1.4"
      },
      "desc": "Selects all elements that are the first child of their parent.",
      "longdesc": {
        "p": {
          "a": {
            "href": "/first-selector/",
            "$t": ":first"
          },
          "code": [":first-child", ":nth-child(1)"]
        }
      },
      "example": {
        "desc":
          "Finds the first span in each matched div to underline and add a hover state.",
        "code":
          "$( \"div span:first-child\" )\n  .css( \"text-decoration\", \"underline\" )\n  .hover(function() {     $( this ).addClass( \"sogreen\" );\n  }, function() {     $( this ).removeClass( \"sogreen\" );\n  });",
        "css":
          "span {     color: #008;\n  }\n  span.sogreen {     color: green;\n    font-weight: bolder;\n  }",
        "html":
          "<div>\n  <span>John,</span>\n  <span>Karl,</span>\n  <span>Brandon</span>\n</div>\n<div>\n  <span>Glen,</span>\n  <span>Tane,</span>\n  <span>Ralph</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "first-of-type",
      "return": "",
      "title": ":first-of-type Selector",
      "sample": ":first-of-type",
      "signature": {
        "added": "1.9"
      },
      "desc":
        "Selects all elements that are the first among siblings of the same element name.",
      "longdesc": {
        "p": {
          "code": ":first-of-type"
        }
      },
      "example": {
        "desc":
          "Find the first span in each matched div and add a class to it.",
        "code": "$( \"span:first-of-type\" ).addClass( \"fot\" );",
        "css":
          "span.fot {     color: red;\n    font-size: 120%;\n    font-style: italic;\n  }",
        "html":
          "<div>\n  <span>Corey,</span>\n  <span>Yehuda,</span>\n  <span>Adam,</span>\n  <span>Todd</span>\n</div>\n<div>\n  <b>Nobody,</b>\n  <span>Jörn,</span>\n  <span>Scott,</span>\n  <span>Timo</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "first",
      "return": "",
      "title": ":first Selector",
      "sample": ":first",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects the first matched DOM element.",
      "longdesc": {
        "p": {
          "code": [":first", ":eq( 0 )", ":lt( 1 )"],
          "a": {
            "href": "/first-child-selector/",
            "$t": ":first-child"
          }
        }
      },
      "note": [
        {
          "id": "jquery-selector-extension",
          "type": "additional",
          "data-selector": ":first"
        },
        {
          "id": "document-order",
          "type": "additional"
        }
      ],
      "example": {
        "desc": "Finds the first table row.",
        "code": "$( \"tr:first\" ).css( \"font-style\", \"italic\" );",
        "css": "td {     color: blue;\n    font-weight: bold;\n  }",
        "html":
          "<table>\n  <tr><td>Row 1</td></tr>\n  <tr><td>Row 2</td></tr>\n  <tr><td>Row 3</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "first",
      "return": "jQuery",
      "title": ".first()",
      "signature": {
        "added": "1.4"
      },
      "desc": "Reduce the set of matched elements to the first in the set.",
      "longdesc": {
        "p": [
          {
            "code": ".first()"
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          "The result of this call is a red background for the first item."
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code": "$( \"li\" ).first().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": "Highlight the first span in a paragraph.",
        "css": ".highlight{     background-color: yellow\n  }",
        "code": "$( \"p span\" ).first().addClass( \"highlight\" );",
        "html":
          "<p>\n  <span>Look:</span>\n  <span>This is some text in a paragraph.</span>\n  <span>This is a note about it.</span>\n</p>"
      },
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "focus",
      "return": "",
      "title": ":focus Selector",
      "sample": ":focus",
      "signature": {
        "added": "1.6"
      },
      "desc": "Selects element if it is currently focused.",
      "longdesc": {
        "p": {
          "code": [
            ":focus",
            "$( \":focus\" )",
            "$( \"*:focus\" )",
            "$( document.activeElement )"
          ]
        }
      },
      "example": {
        "desc": "Adds the focused class to whatever element has focus",
        "code":
          "$( \"#content\" ).delegate( \"*\", \"focus blur\", function() {   var elem = $( this );\n  setTimeout(function() {     elem.toggleClass( \"focused\", elem.is( \":focus\" ) );\n  }, 0 );\n});",
        "css": ".focused {     background: #abcdef;\n  }",
        "html":
          "<div id=\"content\">\n  <input tabIndex=\"1\">\n  <input tabIndex=\"2\">\n  <select tabIndex=\"3\">\n    <option>select menu</option>\n  </select>\n  <div tabIndex=\"4\">\n    a div\n  </div>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "focus",
      "return": "jQuery",
      "title": ".focus()",
      "desc":
        "Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "ul": {
          "li": [
            {
              "code": [".on( \"focus\", handler )", ".trigger( \"focus\" )"]
            },
            {
              "code": ["focus", "<input>", "<select>", "<a href>", "tabindex"]
            },
            "Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events."
          ]
        },
        "div": {
          "class": "warning",
          "p": {
            "code": [".focus()", ".triggerHandler( \"focus\" )", ".focus()"]
          }
        },
        "p": [
          "For example, consider the HTML:",
          "The event handler can be bound to the first input field:",
          "Now clicking on the first field, or tabbing to it from another field, displays the alert:",
          {
            "samp": "Handler for .focus() called."
          },
          "We can trigger the event when another element is clicked:",
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["focus", "focus", "focus", "focusin"],
            "a": [
              {
                "href": "/live/",
                "code": ".live()"
              },
              {
                "href": "/delegate/",
                "code": ".delegate()"
              }
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input id=\"target\" type=\"text\" value=\"Field 1\">\n  <input type=\"text\" value=\"Field 2\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).focus(function() {   alert( \"Handler for .focus() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).focus();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "focus"
      },
      "example": [
        {
          "desc": "Fire focus.",
          "css": "span {     display: none;\n  }",
          "code":
            "$( \"input\" ).focus(function() {   $( this ).next( \"span\" ).css( \"display\", \"inline\" ).fadeOut( 1000 );\n});",
          "html":
            "<p><input type=\"text\"> <span>focus fire</span></p>\n<p><input type=\"password\"> <span>focus fire</span></p>"
        },
        {
          "desc": "To stop people from writing in text input boxes, try:",
          "code":
            "$( \"input[type=text]\" ).focus(function() {   $( this ).blur();\n});"
        },
        {
          "desc":
            "To focus on a login input box with id 'login' on page startup, try:",
          "code":
            "$( document ).ready(function() {   $( \"#login\" ).focus();\n});"
        }
      ],
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "focusin",
      "return": "jQuery",
      "title": ".focusin()",
      "desc": "Bind an event handler to the \"focusin\" event.",
      "signature": [
        {
          "added": "1.4",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"focusin\", handler )", ".trigger( \"focusin\" )"]
          },
          {
            "code": "focusin",
            "a": {
              "href": "/focus/",
              "$t": "focus"
            }
          },
          {
            "a": {
              "href": "/focusout/",
              "$t": "focusout"
            }
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "focusin"
      },
      "example": {
        "desc": "Watch for a focus to occur within the paragraphs on the page.",
        "css": "span {     display: none;\n  }",
        "code":
          "$( \"p\" ).focusin(function() {   $( this ).find( \"span\" ).css( \"display\", \"inline\" ).fadeOut( 1000 );\n});",
        "html":
          "<p><input type=\"text\"> <span>focusin fire</span></p>\n<p><input type=\"password\"> <span>focusin fire</span></p>"
      },
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "focusout",
      "return": "jQuery",
      "title": ".focusout()",
      "desc": "Bind an event handler to the \"focusout\" JavaScript event.",
      "signature": [
        {
          "added": "1.4",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"focusout\", handler )", ".trigger( \"focusout\" )"]
          },
          {
            "code": "focusout",
            "a": {
              "href": "/blur/",
              "$t": "blur"
            }
          },
          {
            "a": {
              "href": "/focusin/",
              "$t": "focusin"
            }
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "focusout"
      },
      "example": {
        "desc": {
          "code": ["focusout", "blur", "blur"]
        },
        "css":
          ".inputs {     float: left;\n    margin-right: 1em;\n  }\n  .inputs p {     margin-top: 0;\n  }",
        "code":
          "var focus = 0,\n  blur = 0;\n$( \"p\" )\n  .focusout(function() {     focus++;\n    $( \"#focus-count\" ).text( \"focusout fired: \" + focus + \"x\" );\n  })\n  .blur(function() {     blur++;\n    $( \"#blur-count\" ).text( \"blur fired: \" + blur + \"x\" );\n  });",
        "html":
          "<div class=\"inputs\">\n  <p>\n    <input type=\"text\"><br>\n    <input type=\"text\">\n  </p>\n  <p>\n    <input type=\"password\">\n  </p>\n</div>\n<div id=\"focus-count\">focusout fire</div>\n<div id=\"blur-count\">blur fire</div>"
      },
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc": "Retrieve the DOM elements matched by the jQuery object.",
      "entry": [
        {
          "type": "method",
          "name": "get",
          "return": "Element",
          "title": ".get()",
          "signature": {
            "added": "1.0",
            "argument": {
              "name": "index",
              "type": "Integer",
              "desc":
                "A zero-based integer indicating which element to retrieve."
            }
          },
          "desc": "Retrieve one of the elements matched by the jQuery object.",
          "longdesc": {
            "p": [
              {
                "code": [".get()", "index", "undefined"]
              },
              {
                "code": ".get( index )"
              },
              "Since the index is zero-based, the first list item is returned:",
              {
                "samp": "<li id=\"foo\">"
              },
              "Each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get at the list item instead:",
              "However, this syntax lacks some of the additional capabilities of .get(), such as specifying a negative index:",
              "A negative index is counted from the end of the matched set, so this example returns the last item in the list:",
              {
                "samp": "<li id=\"bar\">"
              }
            ],
            "pre": [
              {
                "code":
                  "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n</ul>"
              },
              {
                "code": "console.log( $( \"li\" ).get( 0 ) );"
              },
              {
                "code": "console.log( $( \"li\" )[ 0 ] );"
              },
              {
                "code": "console.log( $( \"li\" ).get( -1 ) );"
              }
            ]
          },
          "example": {
            "desc": "Display the tag name of the click element.",
            "code":
              "$( \"*\", document.body ).click(function( event ) {   event.stopPropagation();\n  var domElement = $( this ).get( 0 );\n  $( \"span:first\" ).text( \"Clicked on - \" + domElement.nodeName );\n});",
            "css":
              "span {     color: red;\n  }\n  div {     background: yellow;\n  }",
            "html":
              "<span>&nbsp;</span>\n<p>In this paragraph is an <span>important</span> section</p>\n<div><input type=\"text\"></div>"
          },
          "category": [
            {
              "slug": "miscellaneous/dom-element-methods"
            },
            {
              "slug": "version/1.0"
            }
          ]
        },
        {
          "type": "method",
          "name": "get",
          "return": "Array",
          "title": ".get()",
          "signature": {
            "added": "1.0"
          },
          "desc": "Retrieve the elements matched by the jQuery object.",
          "longdesc": {
            "p": [
              "Consider a simple unordered list:",
              {
                "code": ".get()"
              },
              "All of the matched DOM nodes are returned by this call, contained in a standard array:",
              {
                "span": {
                  "class": "result",
                  "$t": "[<li id=\"foo\">, <li id=\"bar\">]"
                }
              }
            ],
            "pre": [
              {
                "code":
                  "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n</ul>"
              },
              {
                "code": "console.log( $( \"li\" ).get() );"
              }
            ]
          },
          "example": {
            "desc":
              "Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.",
            "code":
              "function display( divs ) {   var a = [];\n  for ( var i = 0; i < divs.length; i++ ) {     a.push( divs[ i ].innerHTML );\n  }\n  $( \"span\" ).text( a.join(\" \") );\n}\ndisplay( $( \"div\" ).get().reverse() );",
            "css": "span {     color: red;\n  }",
            "html":
              "Reversed - <span></span>\n\n<div>One</div>\n<div>Two</div>\n<div>Three</div>"
          },
          "category": [
            {
              "slug": "miscellaneous/dom-element-methods"
            },
            {
              "slug": "version/1.0"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "gt",
      "return": "",
      "title": ":gt() Selector",
      "signature": [
        {
          "sample": ":gt(index)",
          "added": "1.0",
          "argument": {
            "name": "index",
            "type": "Number",
            "desc": "Zero-based index."
          }
        },
        {
          "sample": ":gt(-index)",
          "added": "1.8",
          "argument": {
            "name": "indexFromEnd",
            "type": "Integer",
            "desc":
              "Zero-based index, counting backwards from the last element."
          }
        }
      ],
      "desc": {
        "code": "index"
      },
      "longdesc": {
        "p": [
          {
            "strong": "index-related selectors"
          },
          {
            "code": ".myclass"
          },
          {
            "em": ["0-based indexing", "1-based indexing"],
            "code": ["$( \".myclass:gt(1)\" )", "myclass", ":nth-child(n)"]
          },
          {
            "code": [":gt(index)", "index"],
            "em": "not"
          }
        ]
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":gt()",
        "data-alt": "$(\"your-pure-css-selector\").slice(index)"
      },
      "example": {
        "desc":
          "Give TD #5 and higher a yellow background and TD #8 a red text color.",
        "code":
          "$( \"td:gt(4)\" ).css( \"backgroundColor\", \"yellow\" );\n$( \"td:gt(-2)\" ).css( \"color\", \"red\" );",
        "html":
          "<table border=\"1\">\n  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>\n  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>\n  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeHas",
      "return": "",
      "title": "Has Attribute Selector [name]",
      "sample": "[attribute]",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "attribute",
          "type": "String",
          "desc": "An attribute name."
        }
      },
      "desc":
        "Selects elements that have the specified attribute, with any value.",
      "longdesc": {},
      "example": {
        "desc":
          "Bind a single click to divs with an id that adds the id to the div's text.",
        "code":
          "// Using .one() so the handler is executed at most once\n// per element per event type\n$( \"div[id]\" ).one( \"click\", function() {   var idString = $( this ).text() + \" = \" + $( this ).attr( \"id\" );\n  $( this ).text( idString );\n});",
        "html":
          "<div>no id</div>\n<div id=\"hey\">with id</div>\n<div id=\"there\">has an id</div>\n<div>nope</div>"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "has",
      "return": "",
      "title": ":has() Selector",
      "sample": ":has(selector)",
      "signature": {
        "added": "1.1.4",
        "argument": {
          "name": "selector",
          "type": "Selector",
          "desc": "Any selector."
        }
      },
      "desc":
        "Selects elements which contain at least one element that matches the specified selector.",
      "longdesc": {
        "p": {
          "code": ["$( \"div:has(p)\" )", "<div>", "<p>"]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":has()",
        "data-alt": "$( \"your-pure-css-selector\" ).has( selector/DOMElement )"
      },
      "example": {
        "desc":
          "Adds the class \"test\" to all divs that have a paragraph inside of them.",
        "code": "$( \"div:has(p)\" ).addClass( \"test\" );",
        "html":
          "<div><p>Hello in a paragraph</p></div>\n<div>Hello again! (with no paragraph)</div>",
        "css": ".test {     border: 3px inset red;\n  }"
      },
      "category": [
        {
          "slug": "selectors/content-filter-selector"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "has",
      "return": "jQuery",
      "title": ".has()",
      "signature": [
        {
          "added": "1.4",
          "argument": {
            "name": "selector",
            "type": "String",
            "desc":
              "A string containing a selector expression to match elements against."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "contained",
            "type": "Element",
            "desc": "A DOM element to match elements against."
          }
        }
      ],
      "desc":
        "Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.",
      "longdesc": {
        "p": [
          {
            "code": ".has()"
          },
          "Consider a page with a nested list as follows:",
          "We can apply this method to the set of list items as follows:",
          {
            "code": ["<li>", "<ul>"]
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2\n    <ul>\n      <li>list item 2-a</li>\n      <li>list item 2-b</li>\n    </ul>\n  </li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).has( \"ul\" ).css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": "Check if an element is inside another.",
        "code":
          "$( \"ul\" ).append( \"<li>\" +\n  ( $( \"ul\" ).has( \"li\" ).length ? \"Yes\" : \"No\" ) +\n  \"</li>\" );\n$( \"ul\" ).has( \"li\" ).addClass( \"full\" );",
        "css": ".full {     border: 1px solid red;\n  }",
        "html": "<ul><li>Does the UL contain an LI?</li></ul>"
      },
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "hasClass",
      "return": "Boolean",
      "title": ".hasClass()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "className",
          "type": "String",
          "desc": "The class name to search for."
        }
      },
      "desc":
        "Determine whether any of the matched elements are assigned the given class.",
      "longdesc": {
        "p": [
          "Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:",
          {
            "code": [".hasClass()", "true", "true"]
          },
          "As would:",
          {
            "code": "false"
          },
          "As of jQuery 1.12/2.2, this method supports XML documents, including SVG."
        ],
        "pre": [
          {
            "code": "<div id=\"mydiv\" class=\"foo bar\"></div>"
          },
          {
            "code": "$( \"#mydiv\" ).hasClass( \"foo\" )"
          },
          {
            "code": "$( \"#mydiv\" ).hasClass( \"bar\" )"
          },
          {
            "code": "$( \"#mydiv\" ).hasClass( \"quux\" )"
          }
        ]
      },
      "example": {
        "desc": "Looks for the paragraph that contains 'selected' as a class.",
        "code":
          "$( \"#result1\" ).append( $( \"p:first\" ).hasClass( \"selected\" ).toString() );\n$( \"#result2\" ).append( $( \"p:last\" ).hasClass( \"selected\" ).toString() );\n$( \"#result3\" ).append( $( \"p\" ).hasClass( \"selected\" ).toString() ) ;",
        "css":
          "p {     margin: 8px;\n    font-size: 16px;\n  }\n  .selected {     color: red;\n  }",
        "html":
          "<p>This paragraph is black and is the first paragraph.</p>\n<p class=\"selected\">This paragraph is red and is the second paragraph.</p>\n<div id=\"result1\">First paragraph has selected class: </div>\n<div id=\"result2\">Second paragraph has selected class: </div>\n<div id=\"result3\">At least one paragraph has selected class: </div>"
      },
      "category": [
        {
          "slug": "attributes"
        },
        {
          "slug": "manipulation/class-attribute"
        },
        {
          "slug": "css"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "header",
      "return": "",
      "title": ":header Selector",
      "sample": ":header",
      "signature": {
        "added": "1.2"
      },
      "desc":
        "Selects all elements that are headers, like h1, h2, h3 and so on.",
      "longdesc": {},
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":header"
      },
      "example": {
        "desc":
          "Adds a background and text color to all the headers on the page.",
        "code":
          "$( \":header\" ).css({ background: \"#ccc\", color: \"blue\" });",
        "html":
          "<h1>Header 1</h1>\n<p>Contents 1</p>\n<h2>Header 2</h2>\n<p>Contents 2</p>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed height for the first element in the set of matched elements or set the height of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "height",
          "return": "Number",
          "title": ".height()",
          "signature": {
            "added": "1.0"
          },
          "desc":
            "Get the current computed height for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".css( \"height\" )",
                  ".height()",
                  "400",
                  "400px",
                  ".height()"
                ]
              },
              "This method is also able to find the height of the window and document.",
              {
                "code": [
                  ".height()",
                  "box-sizing",
                  "box-sizing",
                  "box-sizing: border-box",
                  ".css( \"height\" )",
                  ".height()"
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_01.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured height"
            },
            "pre": {
              "code":
                "// Returns height of browser viewport\n$( window ).height();\n\n// Returns height of HTML document\n$( document ).height();"
            },
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": [
                  "style",
                  "script",
                  ".width()",
                  "height()",
                  "display:block"
                ]
              }
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".height()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".height()"
            }
          ],
          "example": {
            "desc":
              "Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.",
            "code":
              "function showHeight( element, height ) {   $( \"div\" ).text( \"The height for the \" + element + \" is \" + height + \"px.\" );\n}\n$( \"#getp\" ).click(function() {   showHeight( \"paragraph\", $( \"p\" ).height() );\n});\n$( \"#getd\" ).click(function() {   showHeight( \"document\", $( document ).height() );\n});\n$( \"#getw\" ).click(function() {   showHeight( \"window\", $( window ).height() );\n});",
            "css":
              "body {     background: yellow;\n  }\n  button {     font-size: 12px;\n    margin: 2px;\n  }\n  p {     width: 150px;\n    border: 1px red solid;\n  }\n  div {     color: red;\n    font-weight: bold;\n  }",
            "html":
              "<button id=\"getp\">Get Paragraph Height</button>\n<button id=\"getd\">Get Document Height</button>\n<button id=\"getw\">Get Window Height</button>\n\n<div>&nbsp;</div>\n<p>\n  Sample paragraph to test height\n</p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4.1"
            }
          ]
        },
        {
          "type": "method",
          "name": "height",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "value",
                "desc":
                  "An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ]
              }
            },
            {
              "added": "1.4.1",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "height",
                    "type": "Integer"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc": "Set the CSS height of every matched element.",
          "longdesc": {
            "p": [
              {
                "code": [".height(value)", "100px", "50%", "auto"]
              },
              "If no explicit unit was specified (like 'em' or '%') then \"px\" is concatenated to the value.",
              {
                "code": [".height(value)", "box-sizing"]
              }
            ]
          },
          "example": {
            "desc":
              "To set the height of each div on click to 30px plus a color change.",
            "code":
              "$( \"div\" ).one( \"click\", function() {   $( this ).height( 30 ).css({     cursor: \"auto\",\n    backgroundColor: \"green\"\n  });\n});",
            "css":
              "div {     width: 50px;\n    height: 70px;\n    float: left;\n    margin: 5px;\n    background: rgb(255,140,0);\n    cursor: pointer;\n  }",
            "html":
              "<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4.1"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "hidden",
      "return": "",
      "title": ":hidden Selector",
      "sample": ":hidden",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements that are hidden.",
      "longdesc": {
        "p": [
          "Elements can be considered hidden for several reasons:",
          {
            "code": ["visibility: hidden", "opacity: 0"]
          },
          "Elements that are not in a document are not considered to be visible; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.",
          {
            "a": {
              "href": "/visible-selector/",
              "code": ":visible"
            },
            "code": [":hidden", ":visible"]
          },
          "During animations to show an element, the element is considered to be visible at the start of the animation.",
          {
            "code": [
              ":hidden",
              "$( elem ).css( \"visibility\", \"hidden\" ).is( \":hidden\" ) == false"
            ],
            "a": {
              "href":
                "http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/",
              "$t": "release notes"
            }
          },
          {
            "code": [":hidden", ":hidden", "br", ":hidden"],
            "a": {
              "href": "/visible-selector/",
              "code": ":visible"
            }
          }
        ],
        "ul": {
          "li": [
            {
              "code": ["display", "none"]
            },
            {
              "code": "type=\"hidden\""
            },
            "Their width and height are explicitly set to 0.",
            "An ancestor element is hidden, so the element is not shown on the page."
          ]
        }
      },
      "note": [
        {
          "id": "jquery-selector-extension",
          "type": "additional",
          "data-selector": ":hidden"
        },
        {
          "id": "hidden-forces-layout",
          "type": "additional"
        }
      ],
      "example": {
        "desc": "Shows all hidden divs and counts hidden inputs.",
        "code":
          "// In some browsers :hidden includes head, title, script, etc...\nvar hiddenElements = $( \"body\" ).find( \":hidden\" ).not( \"script\" );\n\n$( \"span:first\" ).text( \"Found \" + hiddenElements.length + \" hidden elements total.\" );\n$( \"div:hidden\" ).show( 3000 );\n$( \"span:last\" ).text( \"Found \" + $( \"input:hidden\" ).length + \" hidden inputs.\" );",
        "css":
          "div {     width: 70px;\n    height: 40px;\n    background: #e7f;\n    margin: 5px;\n    float: left;\n  }\n  span {     display: block;\n    clear: left;\n    color: red;\n  }\n  .starthidden {     display: none;\n  }",
        "html":
          "<span></span>\n<div></div>\n<div style=\"display:none;\">Hider!</div>\n<div></div>\n\n<div class=\"starthidden\">Hider!</div>\n<div></div>\n\n<form>\n  <input type=\"hidden\">\n  <input type=\"hidden\">\n  <input type=\"hidden\">\n</form>\n\n<span></span>"
      },
      "category": [
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "selectors/visibility-filter-selectors"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "hide",
      "return": "jQuery",
      "title": ".hide()",
      "desc": "Hide the matched elements.",
      "signature": [
        {
          "added": "1.0"
        },
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "argument": {
            "name": "duration",
            "default": "400",
            "desc":
              "A string or number determining how long the animation will run.",
            "type": [
              {
                "name": "Number"
              },
              {
                "name": "String"
              }
            ]
          },
          "xi:include": [
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".hide()"
          },
          {
            "code": [
              ".css( \"display\", \"none\" )",
              "display",
              "display",
              "display",
              "inline",
              "inline"
            ]
          },
          {
            "code": [".hide()", ".hide()", "display", "none"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600"]
          },
          {
            "code": ".hide()"
          },
          {
            "strong": "1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          "We can animate any element, such as a simple image:"
        ],
        "pre": [
          {
            "code": "$( \".target\" ).hide();"
          },
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "// With the element initially shown, we can hide it slowly:\n$( \"#clickme\" ).click(function() {   $( \"#book\" ).hide( \"slow\", function() {     alert( \"Animation complete.\" );\n  });\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:"
          }
        },
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_05.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_06.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_07.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_08.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "hide()"
          }
        }
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".hide()"
      },
      "example": [
        {
          "desc": "Hides all paragraphs then the link on click.",
          "code":
            "$( \"p\" ).hide();\n$( \"a\" ).click(function( event ) {   event.preventDefault();\n  $( this ).hide();\n});",
          "html":
            "<p>Hello</p>\n<a href=\"#\">Click to hide me too</a>\n<p>Here is another paragraph</p>"
        },
        {
          "desc":
            "Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).hide( \"slow\" );\n});",
          "css": "p {     background: #dad;\n    font-weight: bold;\n  }",
          "html":
            "<button>Hide 'em</button>\n<p>Hiya</p>\n<p>Such interesting text, eh?</p>"
        },
        {
          "desc":
            "Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.",
          "code":
            "$( \"#hider\" ).click(function() {   $( \"span:last-child\" ).hide( \"fast\", function() {     // Use arguments.callee so we don't need a named function\n    $( this ).prev().hide( \"fast\", arguments.callee );\n  });\n});\n$( \"#shower\" ).click(function() {   $( \"span\" ).show( 2000 );\n});",
          "css":
            "span {     background: #def3ca;\n    padding: 3px;\n    float: left;\n  }",
          "html":
            "<button id=\"hider\">Hide</button>\n<button id=\"shower\">Show</button>\n<div>\n  <span>Once</span> <span>upon</span> <span>a</span>\n  <span>time</span> <span>there</span> <span>were</span>\n  <span>three</span> <span>programmers...</span>\n</div>"
        },
        {
          "desc":
            "Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.",
          "code":
            "for ( var i = 0; i < 5; i++ ) {   $( \"<div>\" ).appendTo( document.body );\n}\n$( \"div\" ).click(function() {   $( this ).hide( 2000, function() {     $( this ).remove();\n  });\n});",
          "css":
            "div {     background: #ece023;\n    width: 30px;\n    height: 40px;\n    margin: 2px;\n    float: left;\n  }",
          "html": "<div></div>"
        }
      ],
      "category": [
        {
          "slug": "effects/basics"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.",
      "entry": [
        {
          "type": "method",
          "name": "hover",
          "return": "jQuery",
          "title": ".hover()",
          "desc":
            "Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.",
          "signature": {
            "added": "1.0",
            "argument": [
              {
                "name": "handlerIn",
                "type": "Function",
                "argument": {
                  "name": "eventObject",
                  "type": "Event"
                },
                "desc":
                  "A function to execute when the mouse pointer enters the element."
              },
              {
                "name": "handlerOut",
                "type": "Function",
                "argument": {
                  "name": "eventObject",
                  "type": "Event"
                },
                "desc":
                  "A function to execute when the mouse pointer leaves the element."
              }
            ]
          },
          "longdesc": {
            "p": [
              {
                "code": [".hover()", "mouseenter", "mouseleave"]
              },
              {
                "code": "$( selector ).hover( handlerIn, handlerOut )"
              },
              {
                "code": [
                  {
                    "a": {
                      "href": "/mouseenter/",
                      "$t": ".mouseenter()"
                    }
                  },
                  {
                    "a": {
                      "href": "/mouseleave/",
                      "$t": ".mouseleave()"
                    }
                  }
                ]
              }
            ],
            "pre": {
              "code":
                "$( selector ).mouseenter( handlerIn ).mouseleave( handlerOut );"
            }
          },
          "example": [
            {
              "desc":
                "To add a special style to list items that are being hovered over, try:",
              "code":
                "$( \"li\" ).hover(\n  function() {     $( this ).append( $( \"<span> ***</span>\" ) );\n  }, function() {     $( this ).find( \"span:last\" ).remove();\n  }\n);\n\n$( \"li.fade\" ).hover(function() {   $( this ).fadeOut( 100 );\n  $( this ).fadeIn( 500 );\n});",
              "css":
                "ul {     margin-left: 20px;\n    color: blue;\n  }\n  li {     cursor: default;\n  }\n  span {     color: red;\n  }",
              "html":
                "<ul>\n  <li>Milk</li>\n  <li>Bread</li>\n  <li class=\"fade\">Chips</li>\n  <li class=\"fade\">Socks</li>\n</ul>"
            },
            {
              "desc":
                "To add a special style to table cells that are being hovered over, try:",
              "code":
                "$( \"td\" ).hover(\n  function() {     $( this ).addClass( \"hover\" );\n  }, function() {     $( this ).removeClass( \"hover\" );\n  }\n);"
            },
            {
              "desc": "To unbind the above example use:",
              "code": "$( \"td\" ).off( \"mouseenter mouseleave\" );"
            }
          ],
          "category": [
            {
              "slug": "events/mouse-events"
            },
            {
              "slug": "version/1.0"
            }
          ]
        },
        {
          "type": "method",
          "name": "hover",
          "return": "jQuery",
          "desc":
            "Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.",
          "signature": {
            "added": "1.4",
            "argument": {
              "name": "handlerInOut",
              "type": "Function",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              },
              "desc":
                "A function to execute when the mouse pointer enters or leaves the element."
            }
          },
          "longdesc": {
            "p": [
              {
                "code": [".hover()", "mouseenter", "mouseleave", "event.type"]
              },
              {
                "code": "$(selector).hover(handlerInOut)"
              },
              {
                "code": [
                  {
                    "a": {
                      "href": "/mouseenter/",
                      "$t": ".mouseenter()"
                    }
                  },
                  {
                    "a": {
                      "href": "/mouseleave/",
                      "$t": ".mouseleave()"
                    }
                  }
                ]
              }
            ],
            "pre": {
              "code":
                "$( selector ).on( \"mouseenter mouseleave\", handlerInOut );"
            }
          },
          "example": {
            "desc":
              "Slide the next sibling LI up or down on hover, and toggle a class.",
            "code":
              "$( \"li\" )\n  .filter( \":odd\" )\n    .hide()\n  .end()\n  .filter( \":even\" )\n    .hover(function() {       $( this )\n        .toggleClass( \"active\" )\n        .next()\n          .stop( true, true )\n          .slideToggle();\n    });",
            "css":
              "ul {     margin-left: 20px;\n    color: blue;\n  }\n  li {     cursor: default;\n  }\n  li.active {     background: black;\n    color: white;\n  }\n  span {     color:red;\n  }",
            "html":
              "<ul>\n  <li>Milk</li>\n  <li>White</li>\n  <li>Carrots</li>\n  <li>Orange</li>\n  <li>Broccoli</li>\n  <li>Green</li>\n</ul>"
          },
          "category": [
            {
              "slug": "events/mouse-events"
            },
            {
              "slug": "version/1.0"
            }
          ]
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "html",
          "return": "String",
          "title": ".html()",
          "signature": {
            "added": "1.0"
          },
          "desc":
            "Get the HTML contents of the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              "This method is not available on XML documents.",
              {
                "code": ".html()"
              },
              {
                "code": ["<div>", "class=\"demo-container\""]
              },
              "The result would look like this:",
              {
                "code": "innerHTML"
              }
            ],
            "pre": [
              {
                "code": "$( \"div.demo-container\" ).html();"
              },
              {
                "code":
                  "<div class=\"demo-container\">\n  <div class=\"demo-box\">Demonstration Box</div>\n</div>"
              },
              {
                "code": "<div class=\"demo-box\">Demonstration Box</div>"
              }
            ]
          },
          "note": {
            "id": "html-code-execution",
            "type": "additional"
          },
          "example": {
            "desc": "Click a paragraph to convert it from html to text.",
            "code":
              "$( \"p\" ).click(function() {   var htmlString = $( this ).html();\n  $( this ).text( htmlString );\n});",
            "css":
              "p {     margin: 8px;\n    font-size: 20px;\n    color: blue;\n    cursor: pointer;\n  }\n  b {     text-decoration: underline;\n  }\n  button {     cursor: pointer;\n  }",
            "html":
              "<p>\n  <b>Click</b> to change the <span id=\"tag\">html</span>\n</p>\n<p>\n  to a <span id=\"text\">text</span> node.\n</p>\n<p>\n  This <button name=\"nada\">button</button> does nothing.\n</p>"
          },
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/dom-insertion-inside"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "html",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "htmlString",
                "type": "htmlString",
                "desc":
                  "A string of HTML to set as the content of each matched element."
              }
            },
            {
              "added": "1.4",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "oldhtml",
                    "type": "htmlString"
                  }
                ],
                "return": {
                  "type": "htmlString"
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the HTML contents of each element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": ".html()"
              },
              {
                "code": ".html()"
              },
              "Consider the following HTML:",
              {
                "code": "<div class=\"demo-container\">"
              },
              {
                "code": "<div class=\"demo-container\">"
              },
              {
                "code": ".html()"
              },
              {
                "code": [
                  "<div class=\"demo-container\">",
                  "<p>All new content for <em>6 paragraphs!</em></p>"
                ]
              },
              {
                "code": ["innerHTML", "href"],
                "a": {
                  "href": "http://code.google.com/p/html5shiv/",
                  "$t": "compatibility layer"
                }
              },
              {
                "code": ["<script>", ".html()"],
                "a": {
                  "href": "/text/",
                  "code": ".text()"
                }
              },
              {
                "strong": "Note:",
                "code": [".empty().html( string )", ".html(string)"]
              }
            ],
            "pre": [
              {
                "code":
                  "<div class=\"demo-container\">\n  <div class=\"demo-box\">Demonstration Box</div>\n</div>"
              },
              {
                "code":
                  "$( \"div.demo-container\" )\n  .html( \"<p>All new content. <em>You bet!</em></p>\" );"
              },
              {
                "code":
                  "<div class=\"demo-container\">\n  <p>All new content. <em>You bet!</em></p>\n</div>"
              },
              {
                "code":
                  "$( \"div.demo-container\" ).html(function() {   var emphasis = \"<em>\" + $( \"p\" ).length + \" paragraphs!</em>\";\n  return \"<p>All new content for \" + emphasis + \"</p>\";\n});"
              }
            ]
          },
          "example": [
            {
              "desc": "Add some html to each div.",
              "code":
                "$( \"div\" ).html( \"<span class='red'>Hello <b>Again</b></span>\" );",
              "css": ".red {     color: red;\n  }",
              "html":
                "<span>Hello</span>\n<div></div>\n<div></div>\n<div></div>"
            },
            {
              "desc":
                "Add some html to each div then immediately do further manipulations to the inserted html.",
              "code":
                "$( \"div\" ).html( \"<b>Wow!</b> Such excitement...\" );\n$( \"div b\" )\n  .append( document.createTextNode( \"!!!\" ) )\n  .css( \"color\", \"red\" );",
              "css": "div {     color: blue;\n    font-size: 18px;\n  }",
              "html": "<div></div>\n<div></div>\n<div></div>"
            }
          ],
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/dom-insertion-inside"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "id",
      "return": "",
      "title": "ID Selector (\"#id\")",
      "sample": "#id",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "id",
          "type": "String",
          "desc":
            "An ID to search for, specified via the id attribute of an element."
        }
      },
      "desc": "Selects a single element with the given id attribute.",
      "longdesc": {
        "p": [
          {
            "code": ["document.getElementById()", "h2#pageTitle"]
          },
          {
            "code": ["jQuery()", "$()"]
          },
          {
            "code": "id"
          },
          {
            "a": {
              "href":
                "http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/",
              "$t": "escape those characters with backslashes"
            }
          }
        ]
      },
      "example": [
        {
          "desc":
            "Select the element with the id \"myDiv\" and give it a red border.",
          "code": "$( \"#myDiv\" ).css( \"border\", \"3px solid red\" );",
          "html":
            "<div id=\"notMe\"><p>id=\"notMe\"</p></div>\n<div id=\"myDiv\">id=\"myDiv\"</div>",
          "css":
            "div {     width: 90px;\n    height: 90px;\n    float: left;\n    padding: 5px;\n    margin: 5px;\n    background-color: #eee;\n  }"
        },
        {
          "desc":
            "Select the element with the id \"myID.entry[1]\" and give it a red border. Note how certain characters must be escaped with backslashes.",
          "code":
            "$( \"#myID\\\\.entry\\\\[1\\\\]\" ).css( \"border\", \"3px solid red\" );",
          "html":
            "<div id=\"myID.entry[0]\">id=\"myID.entry[0]\"</div>\n<div id=\"myID.entry[1]\">id=\"myID.entry[1]\"</div>\n<div id=\"myID.entry[2]\">id=\"myID.entry[2]\"</div>",
          "css":
            "div {     width: 300px;\n    float: left;\n    padding: 2px;\n    margin: 3px;\n    background-color: #eee;\n  }"
        }
      ],
      "category": [
        {
          "slug": "selectors/basic-css-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "image",
      "return": "",
      "title": ":image Selector",
      "sample": ":image",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type image.",
      "longdesc": {
        "p": {
          "code": [":image", "[type=\"image\"]"]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":image",
        "data-alt": "[type=\"image\"]"
      },
      "example": {
        "desc": "Finds all image inputs.",
        "code":
          "var input = $( \"input:image\" ).css({   background:\"yellow\",\n  border:\"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 45px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "index",
      "return": "Integer",
      "title": ".index()",
      "signature": [
        {
          "added": "1.4"
        },
        {
          "added": "1.4",
          "argument": {
            "name": "selector",
            "type": "Selector",
            "desc":
              "A selector representing a jQuery collection in which to look for an element."
          }
        },
        {
          "added": "1.0",
          "argument": {
            "name": "element",
            "desc":
              "The DOM element or first element within the jQuery object to look for.",
            "type": [
              {
                "name": "Element"
              },
              {
                "name": "jQuery"
              }
            ]
          }
        }
      ],
      "desc": "Search for a given element from among the matched elements.",
      "longdesc": {
        "h4": ["Return Values", "Detail"],
        "p": [
          {
            "code": ".index()"
          },
          {
            "code": [".index()", ".index()"]
          },
          {
            "code": [".index()", ".index()"]
          },
          {
            "code": [".get()", ".index()"]
          },
          {
            "code": ".index()"
          },
          "We get back the zero-based position of the list item:",
          {
            "samp": "Index: 1"
          },
          {
            "code": ".index()"
          },
          "We get back the zero-based position of the list item:",
          {
            "samp": "Index: 1"
          },
          {
            "code": ".index()"
          },
          "We get back the zero-based position of the first list item within the matched set:",
          {
            "samp": "Index: 1"
          },
          {
            "code": ".index()"
          },
          "We get back the zero-based position of the list item:",
          {
            "samp": "Index: 1"
          },
          {
            "code": ".index()"
          },
          "Again, we get back the zero-based position of the list item:",
          {
            "samp": "Index: 1"
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>"
          },
          {
            "code":
              "var listItem = document.getElementById( \"bar\" );\nalert( \"Index: \" + $( \"li\" ).index( listItem ) );"
          },
          {
            "code":
              "var listItem = $( \"#bar\" );\nalert( \"Index: \" + $( \"li\" ).index( listItem ) );"
          },
          {
            "code":
              "var listItems = $( \"li:gt(0)\" );\nalert( \"Index: \" + $( \"li\" ).index( listItems ) );"
          },
          {
            "code":
              "var listItem = $( \"#bar\" );\nalert( \"Index: \" + listItem.index( \"li\" ) );"
          },
          {
            "code": "alert( \"Index: \" + $( \"#bar\" ).index() );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "On click, returns the index (zero-based) of that div in the page.",
          "code":
            "$( \"div\" ).click(function() {   // `this` is the DOM element that was clicked\n  var index = $( \"div\" ).index( this );\n  $( \"span\" ).text( \"That was div index #\" + index );\n});",
          "css":
            "div {     background: yellow;\n    margin: 5px;\n  }\n  span {     color: red;\n  }",
          "html":
            "<span>Click a div!</span>\n<div>First div</div>\n<div>Second div</div>\n<div>Third div</div>"
        },
        {
          "desc": "Returns the index for the element with ID bar.",
          "css": "div {     font-weight: bold;\n    color: #090;\n  }",
          "code":
            "var listItem = $( \"#bar\" );\n$( \"div\" ).html( \"Index: \" + $( \"li\" ).index( listItem ) );",
          "html":
            "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>\n<div></div>"
        },
        {
          "desc":
            "Returns the index for the first item in the jQuery collection.",
          "css": "div {     font-weight: bold;\n    color: #090;\n  }",
          "code":
            "var listItems = $( \"li:gt(0)\" );\n$( \"div\" ).html( \"Index: \" + $( \"li\" ).index( listItems ) );",
          "html":
            "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>\n<div></div>"
        },
        {
          "desc":
            "Returns the index for the element with ID bar in relation to all <li> elements.",
          "css": "div {     font-weight: bold;\n    color: #090;\n  }",
          "code":
            "$( \"div\" ).html( \"Index: \" +  $( \"#bar\" ).index( \"li\" ) );",
          "html":
            "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>\n<div></div>"
        },
        {
          "desc":
            "Returns the index for the element with ID bar in relation to its siblings.",
          "css": "div {     font-weight: bold;\n    color: #090;\n  }",
          "code":
            "var barIndex = $( \"#bar\" ).index();\n$( \"div\" ).html( \"Index: \" +  barIndex );",
          "html":
            "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>\n<div></div>"
        },
        {
          "desc": "Returns -1, as there is no element with ID foobar.",
          "css": "div {     font-weight: bold;\n    color: #090;\n  }",
          "code":
            "var foobar = $( \"li\" ).index( $( \"#foobar\" ) );\n$( \"div\" ).html( \"Index: \" + foobar );",
          "html":
            "<ul>\n  <li id=\"foo\">foo</li>\n  <li id=\"bar\">bar</li>\n  <li id=\"baz\">baz</li>\n</ul>\n<div></div>"
        }
      ],
      "category": [
        {
          "slug": "miscellaneous/dom-element-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "innerHeight",
          "return": "Number",
          "title": ".innerHeight()",
          "signature": {
            "added": "1.2.6"
          },
          "desc":
            "Get the current computed height for the first element in the set of matched elements, including padding but not border.",
          "longdesc": {
            "p": [
              {
                "code": ["undefined", "null"]
              },
              {
                "code": [
                  "window",
                  "document",
                  {
                    "a": {
                      "href": "/height/",
                      "$t": ".height()"
                    }
                  }
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_02.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured height"
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".innerHeight()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".innerHeight()"
            }
          ],
          "example": {
            "desc": "Get the innerHeight of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text( \"innerHeight:\" + p.innerHeight() );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p>\n<p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "innerHeight",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.8.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ],
                "desc":
                  "A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string)."
              }
            },
            {
              "added": "1.8.0",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "height",
                    "type": "Number"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the CSS inner height of each element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".innerHeight(\"value\")",
                  "100px",
                  "50%",
                  "auto",
                  "box-sizing"
                ]
              },
              "If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed."
            ]
          },
          "example": {
            "desc":
              "Change the inner height of each div the first time it is clicked (and change its color).",
            "code":
              "var modHeight = 70;\n$( \"div\" ).one( \"click\", function() {   $( this ).innerHeight( modHeight ).addClass( \"mod\" );\n  modHeight -= 8;\n});",
            "css":
              "div {   width: 60px;\n  padding: 10px;\n  height: 70px;\n  float: left;\n  margin: 5px;\n  background: red;\n  cursor: pointer;\n}\n.mod {   background: blue;\n  cursor: default;\n}",
            "html":
              "<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.8"
            }
          ]
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "innerWidth",
          "return": "Number",
          "title": ".innerWidth()",
          "signature": {
            "added": "1.2.6"
          },
          "desc":
            "Get the current computed inner width for the first element in the set of matched elements, including padding but not border.",
          "longdesc": {
            "p": [
              {
                "code": ["undefined", "null"]
              },
              {
                "code": [
                  "window",
                  "document",
                  {
                    "a": {
                      "href": "/width/",
                      "$t": ".width()"
                    }
                  }
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_05.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured width"
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".innerWidth()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".innerWidth()"
            }
          ],
          "example": {
            "desc": "Get the innerWidth of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text( \"innerWidth:\" + p.innerWidth() );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p>\n<p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "innerWidth",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.8.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ],
                "desc":
                  "A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string)."
              }
            },
            {
              "added": "1.8.0",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "width",
                    "type": "Number"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the CSS inner width of each element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".innerWidth(\"value\")",
                  "100px",
                  "50%",
                  "auto",
                  "box-sizing"
                ]
              },
              "If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed."
            ]
          },
          "example": {
            "desc":
              "Change the inner width of each div the first time it is clicked (and change its color).",
            "code":
              "var modWidth = 60;\n$( \"div\" ).one( \"click\", function() { $( this ).innerWidth( modWidth ).addClass( \"mod\" );\nmodWidth -= 8;\n});",
            "css":
              "div { width: 60px;\npadding: 10px;\nheight: 50px;\nfloat: left;\nmargin: 5px;\nbackground: red;\ncursor: pointer;\n}\n.mod { background: blue;\ncursor: default;\n}",
            "html":
              "<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.8"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "input",
      "return": "",
      "title": ":input Selector",
      "sample": ":input",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all input, textarea, select and button elements.",
      "longdesc": {
        "p": {
          "code": ":input"
        }
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":input"
      },
      "example": {
        "desc": "Finds all input elements.",
        "code":
          "var allInputs = $( \":input\" );\nvar formChildren = $( \"form > *\" );\n$( \"#messages\" ).text( \"Found \" + allInputs.length + \" inputs and the form has \" +\n  formChildren.length + \" children.\" );\n\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 25px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div id=\"messages\"></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "insertAfter",
      "return": "jQuery",
      "title": ".insertAfter()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "target",
          "desc":
            "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.",
          "type": [
            {
              "name": "Selector"
            },
            {
              "name": "htmlString"
            },
            {
              "name": "Element"
            },
            {
              "name": "Array"
            },
            {
              "name": "jQuery"
            }
          ]
        }
      },
      "desc":
        "Insert every element in the set of matched elements after the target.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/after/",
                  "$t": ".after()"
                }
              },
              ".insertAfter()",
              ".after()",
              ".insertAfter()"
            ]
          },
          "Consider the following HTML:",
          "We can create content and insert it after several elements at once:",
          {
            "code": "<div>"
          },
          "We can also select an element on the page and insert it after another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved after the target (not cloned) and a new set consisting of the inserted element is returned:",
          "If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.",
          {
            "strong": "Before jQuery 1.9,",
            "code": ".end()"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"<p>Test</p>\" ).insertAfter( \".inner\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <p>Test</p>\n  <div class=\"inner\">Goodbye</div>\n  <p>Test</p>\n</div>"
          },
          {
            "code": "$( \"h2\" ).insertAfter( $( \".container\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>\n<h2>Greetings</h2>"
          }
        ]
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Insert all paragraphs after an element with id of \"foo\". Same as $( \"#foo\" ).after( \"p\" )",
        "code": "$( \"p\" ).insertAfter( \"#foo\" );",
        "css": "#foo {     background: yellow;\n  }",
        "html": "<p> is what I said... </p>\n<div id=\"foo\">FOO!</div>"
      },
      "category": [
        {
          "slug": "manipulation/dom-insertion-outside"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "insertBefore",
      "return": "jQuery",
      "title": ".insertBefore()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "target",
          "desc":
            "A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.",
          "type": [
            {
              "name": "Selector"
            },
            {
              "name": "htmlString"
            },
            {
              "name": "Element"
            },
            {
              "name": "Array"
            },
            {
              "name": "jQuery"
            }
          ]
        }
      },
      "desc":
        "Insert every element in the set of matched elements before the target.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/before/",
                  "$t": ".before()"
                }
              },
              ".insertBefore()",
              ".before()",
              ".insertBefore()"
            ]
          },
          "Consider the following HTML:",
          "We can create content and insert it before several elements at once:",
          {
            "code": "<div>"
          },
          "We can also select an element on the page and insert it before another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned) and a new set consisting of the inserted element is returned:",
          "If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.",
          {
            "strong": "Before jQuery 1.9,",
            "code": ".end()"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"<p>Test</p>\" ).insertBefore( \".inner\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <p>Test</p>\n  <div class=\"inner\">Hello</div>\n  <p>Test</p>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"h2\" ).insertBefore( $( \".container\" ) );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          }
        ]
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Insert all paragraphs before an element with id of \"foo\". Same as $( \"#foo\" ).before( \"p\" )",
        "code": "$( \"p\" ).insertBefore( \"#foo\" );",
        "css": "#foo {     background: yellow;\n  }",
        "html": "<div id=\"foo\">FOO!</div>\n<p>I would like to say: </p>"
      },
      "category": [
        {
          "slug": "manipulation/dom-insertion-outside"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "is",
      "return": "Boolean",
      "title": ".is()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "selector",
            "type": "Selector",
            "desc":
              "A string containing a selector expression to match elements against."
          }
        },
        {
          "added": "1.6",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": ["index", "element", "this"]
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "element",
                "type": "Element"
              }
            ],
            "return": {
              "type": "Boolean"
            }
          }
        },
        {
          "added": "1.6",
          "argument": {
            "name": "selection",
            "type": "jQuery",
            "desc":
              "An existing jQuery object to match the current set of elements against."
          }
        },
        {
          "added": "1.6",
          "argument": {
            "name": "elements",
            "type": "Element",
            "desc":
              "One or more elements to match the current set of elements against."
          }
        }
      ],
      "desc": {
        "code": "true"
      },
      "longdesc": {
        "p": [
          {
            "code": ".is()"
          },
          "Suppose you have a list, with two of its items containing a child element:",
          "You can attach a click handler to the <ul> element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:",
          {
            "code": ["<strong>", "<span>"]
          },
          {
            "code": [
              ":first",
              ":gt()",
              ":even",
              ".is()",
              "$( \"li:first\" ).is( \"li:last\" )",
              "true",
              "$( \"li:first-child\" ).is( \"li:last-child\" )",
              "false"
            ],
            "em": "not"
          },
          {
            "code": ["$( \"li:first\" ).is( \"li:last\" )", "false"]
          },
          {
            "code": ["true", ".is()", "true"]
          },
          {
            "code": ["<li>", "<strong>", "<li>"]
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list <strong>item 1</strong></li>\n  <li><span>list item 2</span></li>\n  <li>list item 3</li>\n</ul>"
          },
          {
            "code":
              "$( \"ul\" ).click(function( event ) {   var target = $( event.target );\n  if ( target.is( \"li\" ) ) {     target.css( \"background-color\", \"red\" );\n  }\n});"
          },
          {
            "code":
              "<ul>\n  <li><strong>list</strong> item 1 - one strong tag</li>\n  <li><strong>list</strong> item <strong>2</strong> -\n    two <span>strong tags</span></li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).click(function() {   var li = $( this ),\n    isWithTwo = li.is(function() {       return $( \"strong\", this ).length === 2;\n    });\n  if ( isWithTwo ) {     li.css( \"background-color\", \"green\" );\n  } else {     li.css( \"background-color\", \"red\" );\n  }\n});"
          }
        ],
        "h4": "Using a Function"
      },
      "example": [
        {
          "desc": "Shows a few ways is() can be used inside an event handler.",
          "code":
            "$( \"div\" ).one( \"click\", function() {   if ( $( this ).is( \":first-child\" ) ) {     $( \"p\" ).text( \"It's the first div.\" );\n  } else if ( $( this ).is( \".blue,.red\" ) ) {     $( \"p\" ).text( \"It's a blue or red div.\" );\n  } else if ( $( this ).is( \":contains('Peter')\" ) ) {     $( \"p\" ).text( \"It's Peter!\" );\n  } else {     $( \"p\" ).html( \"It's nothing <em>special</em>.\" );\n  }\n  $( \"p\" ).hide().slideDown( \"slow\" );\n  $( this ).css({     \"border-style\": \"inset\",\n    cursor: \"default\"\n  });\n});",
          "css":
            "div {     width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 4px outset;\n    background: green;\n    text-align: center;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {     background: blue;\n  }\n  .red {     background: red;\n  }\n  span {     color: white;\n    font-size: 16px;\n  }\n  p {     color: red;\n    font-weight: bolder;\n    background: yellow;\n    margin: 3px;\n    clear: left;\n    display: none;\n  }",
          "html":
            "<div></div>\n<div class=\"blue\"></div>\n<div></div>\n<div class=\"red\"></div>\n<div><br/><span>Peter</span></div>\n<div class=\"blue\"></div>\n<p>&nbsp;</p>"
        },
        {
          "desc":
            "Returns true, because the parent of the input is a form element.",
          "code":
            "var isFormParent = $( \"input[type='checkbox']\" ).parent().is( \"form\" );\n$( \"div\" ).text( \"isFormParent = \" + isFormParent );",
          "css": "div {     color: red;\n  }",
          "html": "<form>\n  <input type=\"checkbox\">\n</form>\n<div></div>"
        },
        {
          "desc":
            "Returns false, because the parent of the input is a p element.",
          "code":
            "var isFormParent = $( \"input[type='checkbox']\" ).parent().is( \"form\" );\n$( \"div\" ).text( \"isFormParent = \" + isFormParent );",
          "css": "div {     color: red;\n  }",
          "html":
            "<form>\n  <p><input type=\"checkbox\"></p>\n</form>\n<div></div>"
        },
        {
          "desc":
            "Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.",
          "code":
            "var alt = $( \"#browsers li:nth-child(2n)\" ).css( \"background\", \"#0ff\" );\n$( \"li\" ).click(function() {   var li = $( this );\n  if ( li.is( alt ) ) {     li.slideUp();\n  } else {     li.css( \"background\", \"red\" );\n  }\n});",
          "css": "li {     cursor: pointer;\n  }",
          "html":
            "<ul id=\"browsers\">\n  <li>Chrome</li>\n  <li>Safari</li>\n  <li>Firefox</li>\n  <li>Opera</li>\n</ul>"
        },
        {
          "desc":
            "An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.",
          "code":
            "var alt = $( \"#browsers li:nth-child(2n)\" ).css( \"background\", \"#0ff\" );\n$( \"li\" ).click(function() {   if ( alt.is( this ) ) {     $( this ).slideUp();\n  } else {     $( this ).css( \"background\", \"red\" );\n  }\n});",
          "css": "li {     cursor: pointer;\n  }",
          "html":
            "<ul id=\"browsers\">\n  <li>Chrome</li>\n  <li>Safari</li>\n  <li>Firefox</li>\n  <li>Opera</li>\n</ul>"
        }
      ],
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.6"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "jQuery.Callbacks",
      "type": "method",
      "return": "Callbacks",
      "title": "jQuery.Callbacks()",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "flags",
          "type": "String",
          "desc":
            "An optional list of space-separated flags that change how the callback list behaves."
        }
      },
      "desc":
        "A multi-purpose callbacks list object that provides a powerful way to manage callback lists.",
      "longdesc": {
        "p": [
          {
            "code": ["$.Callbacks()", "$.ajax()", "$.Deferred()"]
          },
          {
            "code": [
              "$.Callbacks()",
              {
                "a": {
                  "href": "/callbacks.add/",
                  "$t": "callbacks.add()"
                }
              },
              {
                "a": {
                  "href": "/callbacks.remove/",
                  "$t": "callbacks.remove()"
                }
              },
              {
                "a": {
                  "href": "/callbacks.fire/",
                  "$t": "callbacks.fire()"
                }
              },
              {
                "a": {
                  "href": "/callbacks.disable/",
                  "$t": "callbacks.disable()"
                }
              }
            ]
          },
          {
            "code": ["fn1", "fn2"]
          },
          {
            "code": "$.Callbacks"
          },
          "The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.",
          {
            "code": [".add()", ".fire()", ".add()", ".fire()"]
          },
          {
            "code": ["$.Callbacks", ".remove()", ".remove()"]
          },
          {
            "code": [
              "flags",
              "$.Callbacks()",
              "$.Callbacks( \"unique stopOnFalse\" )"
            ]
          },
          "By default a callback list will act like an event callback list and can be \"fired\" multiple times.",
          {
            "code": "flags"
          },
          {
            "code": ["$.Callbacks()", "$.Callbacks(\"unique memory\")"],
            "i": [
              "unique",
              "ensure if list was already fired, adding more callbacks will have it called with the latest fired value"
            ]
          },
          {
            "code": [
              "$.Callbacks()",
              ".done()",
              ".fail()",
              "$.Callbacks('memory once')"
            ]
          },
          {
            "code": "$.Callbacks"
          },
          "The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.",
          {
            "code": ["$.Callbacks()", "$.Callbacks"]
          },
          "This can then be used by parts of your application to publish and subscribe to events of interest quite easily:",
          {
            "code": "$.Deferreds"
          }
        ],
        "h3": [
          {
            "id": "getting-started",
            "$t": "Getting started"
          },
          {
            "id": "supported-flags",
            "$t": "Supported Flags"
          },
          {
            "id": "pubsub",
            "$t": "$.Callbacks, $.Deferred and Pub/Sub"
          }
        ],
        "pre": [
          {
            "code":
              "function fn1( value ) {   console.log( value );\n}\n\nfunction fn2( value ) {   console.log( \"fn2 says: \" + value );\n  return false;\n}"
          },
          {
            "code":
              "var callbacks = $.Callbacks();\ncallbacks.add( fn1 );\n\n// Outputs: foo!\ncallbacks.fire( \"foo!\" );\n\ncallbacks.add( fn2 );\n\n// Outputs: bar!, fn2 says: bar!\ncallbacks.fire( \"bar!\" );"
          },
          {
            "code":
              "var callbacks = $.Callbacks();\ncallbacks.add( fn1 );\n\n// Outputs: foo!\ncallbacks.fire( \"foo!\" );\n\ncallbacks.add( fn2 );\n\n// Outputs: bar!, fn2 says: bar!\ncallbacks.fire( \"bar!\" );\n\ncallbacks.remove( fn2 );\n\n// Only outputs foobar, as fn2 has been removed.\ncallbacks.fire( \"foobar\" );"
          },
          {
            "code":
              "var callbacks = $.Callbacks( \"once\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n/*\noutput:\nfoo\n*/"
          },
          {
            "code":
              "var callbacks = $.Callbacks( \"memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nfoobar\n*/"
          },
          {
            "code":
              "var callbacks = $.Callbacks( \"unique\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); // Repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n/*\noutput:\nfoo\nbar\nfn2 says:bar\nfoobar\n*/"
          },
          {
            "code":
              "function fn1( value ) {   console.log( value );\n  return false;\n}\n\nfunction fn2( value ) {   fn1( \"fn2 says: \" + value );\n  return false;\n}\n\nvar callbacks = $.Callbacks( \"stopOnFalse\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n/*\noutput:\nfoo\nbar\nfoobar\n*/"
          },
          {
            "code":
              "function fn1( value ) {   console.log( value );\n  return false;\n}\n\nfunction fn2( value ) {   fn1( \"fn2 says: \" + value );\n  return false;\n}\n\nvar callbacks = $.Callbacks( \"unique memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); // Repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"baz\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n\n/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nbaz\nfn2 says:baz\nfoobar\n*/"
          },
          {
            "code":
              "var callbacks = $.Callbacks(),\n  add = callbacks.add,\n  remove = callbacks.remove,\n  fire = callbacks.fire;\n\nadd( fn1 );\nfire( \"hello world\" );\nremove( fn1 );"
          },
          {
            "code":
              "var topics = { };\n\njQuery.Topic = function( id ) {   var callbacks, method,\n    topic = id && topics[ id ];\n\n  if ( !topic ) {     callbacks = jQuery.Callbacks();\n    topic = {       publish: callbacks.fire,\n      subscribe: callbacks.add,\n      unsubscribe: callbacks.remove\n    };\n    if ( id ) {       topics[ id ] = topic;\n    }\n  }\n  return topic;\n};"
          },
          {
            "code":
              "// Subscribers\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n$.Topic( \"mailArrived\" ).subscribe( fn2 );\n$.Topic( \"mailSent\" ).subscribe( fn1 );\n\n// Publisher\n$.Topic( \"mailArrived\" ).publish( \"hello world!\" );\n$.Topic( \"mailSent\" ).publish( \"woo! mail!\" );\n\n// Here, \"hello world!\" gets pushed to fn1 and fn2\n// when the \"mailArrived\" notification is published\n// with \"woo! mail!\" also being pushed to fn1 when\n// the \"mailSent\" notification is published.\n\n/*\noutput:\nhello world!\nfn2 says: hello world!\nwoo! mail!\n*/"
          },
          {
            "code":
              "// Subscribe to the mailArrived notification\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n\n// Create a new instance of Deferreds\nvar dfd = $.Deferred();\n\n// Define a new topic (without directly publishing)\nvar topic = $.Topic( \"mailArrived\" );\n\n// When the deferred has been resolved, publish a\n// notification to subscribers\ndfd.done( topic.publish );\n\n// Here the Deferred is being resolved with a message\n// that will be passed back to subscribers. It's possible to\n// easily integrate this into a more complex routine\n// (eg. waiting on an Ajax call to complete) so that\n// messages are only published once the task has actually\n// finished.\ndfd.resolve( \"it's been published!\" );"
          }
        ],
        "h2": [
          "Possible flags:",
          {
            "id": "once",
            "code": "$.Callbacks( \"once\" )"
          },
          {
            "id": "memory",
            "code": "$.Callbacks( \"memory\" )"
          },
          {
            "id": "unique",
            "code": "$.Callbacks( \"unique\" )"
          },
          {
            "id": "stopOnFalse",
            "code": "$.Callbacks( \"stopOnFalse\" )"
          },
          {
            "id": "unique-memory",
            "code": "$.Callbacks( 'unique memory' )"
          }
        ],
        "ul": {
          "li": [
            {
              "code": "once"
            },
            {
              "code": "memory"
            },
            {
              "code": "unique"
            },
            {
              "code": "stopOnFalse"
            }
          ]
        }
      },
      "category": [
        {
          "slug": "callbacks-object"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "jQuery.Deferred",
      "type": "method",
      "return": "Deferred",
      "title": "jQuery.Deferred()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "beforeStart",
          "type": "Function",
          "optional": "true",
          "desc":
            "A function that is called just before the constructor returns.",
          "argument": {
            "name": "deferred",
            "type": "Deferred",
            "desc": "The constructed Deferred object."
          }
        }
      },
      "desc":
        "A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.",
      "longdesc": {
        "p": [
          {
            "code": ["jQuery.Deferred()", "deferred"]
          },
          {
            "code": ["jQuery.Deferred", "deferred", "this"],
            "a": {
              "href": "/deferred.then/",
              "code": "deferred.then()"
            }
          },
          {
            "em": ["pending", "resolved", "rejected"],
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then()"
              },
              {
                "href": "/deferred.always/",
                "code": "deferred.always()"
              },
              {
                "href": "/deferred.done/",
                "code": "deferred.done()"
              },
              {
                "href": "/deferred.fail/",
                "code": "deferred.fail()"
              },
              {
                "href": "/deferred.resolve/",
                "code": "deferred.resolve()"
              },
              {
                "href": "/deferred.resolveWith/",
                "code": "deferred.resolveWith()"
              },
              {
                "href": "/deferred.reject/",
                "code": "deferred.reject()"
              },
              {
                "href": "/deferred.rejectWith/",
                "code": "deferred.rejectWith()"
              }
            ],
            "code": ["doneCallbacks", "failCallbacks"]
          },
          {
            "code": "jQuery.ajax()"
          },
          {
            "code": ["jQuery.Deferred()", "jQuery.Deferred()"],
            "a": {
              "href": "http://wiki.commonjs.org/wiki/Promises/A",
              "$t": "CommonJS Promises/A"
            }
          },
          {
            "a": [
              {
                "href": "/deferred.then/",
                "code": "deferred.then()"
              },
              {
                "href": "/deferred.always/",
                "code": "deferred.always()"
              },
              {
                "href": "/deferred.done/",
                "code": "deferred.done()"
              },
              {
                "href": "/deferred.fail/",
                "code": "deferred.fail()"
              },
              {
                "href": "/deferred.resolve/",
                "code": "deferred.resolve(args)"
              },
              {
                "href": "/deferred.reject/",
                "code": "deferred.reject(args)"
              }
            ],
            "code": ["deferred.resolve()", "deferred.then()"]
          },
          {
            "a": [
              {
                "href": "/jQuery.ajax/",
                "code": "jQuery.ajax()"
              },
              {
                "href": "/jQuery.when/",
                "code": "jQuery.when()"
              },
              {
                "href": "/deferred.then/",
                "code": "deferred.then()"
              },
              {
                "href": "/deferred.done/",
                "code": "deferred.done()"
              },
              {
                "href": "/deferred.fail/",
                "code": "deferred.fail()"
              },
              {
                "href": "/deferred.resolve/",
                "code": "deferred.resolve()"
              },
              {
                "href": "/deferred.reject/",
                "code": "deferred.reject()"
              }
            ]
          }
        ],
        "h4": "Enhanced Callbacks with jQuery Deferred"
      },
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.ajax",
      "return": "jqXHR",
      "title": "jQuery.ajax()",
      "signature": [
        {
          "added": "1.5",
          "argument": [
            {
              "name": "url",
              "type": "String",
              "desc":
                "A string containing the URL to which the request is sent."
            },
            {
              "name": "settings",
              "type": "PlainObject",
              "optional": "true",
              "desc": {
                "a": [
                  {
                    "href": "/jQuery.ajaxSetup/",
                    "$t": "$.ajaxSetup()"
                  },
                  {
                    "href": "#jQuery-ajax-settings",
                    "$t": "jQuery.ajax( settings )"
                  }
                ]
              }
            }
          ]
        },
        {
          "added": "1.0",
          "argument": {
            "name": "settings",
            "type": "PlainObject",
            "optional": "true",
            "desc": {
              "a": {
                "href": "/jQuery.ajaxSetup/",
                "$t": "$.ajaxSetup()"
              }
            },
            "property": [
              {
                "default": "depends on DataType",
                "name": "accepts",
                "type": "PlainObject",
                "desc": {
                  "code": ["dataType", "Accept", "mycustomtype", "converters"],
                  "pre": {
                    "code":
                      "$.ajax({   accepts: {     mycustomtype: 'application/x-some-custom-type'\n  },\n\n  // Instructions for how to deserialize a `mycustomtype`\n  converters: {     'text mycustomtype': function(result) {       // Do Stuff\n      return newresult;\n    }\n  },\n\n  // Expect a `mycustomtype` back from server\n  dataType: 'mycustomtype'\n});"
                  },
                  "strong": "Note:"
                }
              },
              {
                "default": "true",
                "name": "async",
                "type": "Boolean",
                "desc": {
                  "code": [
                    "true",
                    "false",
                    "dataType: \"jsonp\"",
                    "async: false",
                    "$.Deferred",
                    "jqXHR.done()"
                  ],
                  "strong": "As of jQuery 1.8"
                }
              },
              {
                "name": "beforeSend",
                "type": "Function",
                "argument": [
                  {
                    "name": "jqXHR",
                    "type": "jqXHR"
                  },
                  {
                    "name": "settings",
                    "type": "PlainObject"
                  }
                ],
                "desc": {
                  "a": {
                    "href": "/Ajax_Events/",
                    "$t": "Ajax Event"
                  },
                  "code": ["false", "beforeSend", "beforeSend"],
                  "strong": "As of jQuery 1.5"
                }
              },
              {
                "name": "cache",
                "default": "true, false for dataType 'script' and 'jsonp'",
                "type": "Boolean",
                "desc": {
                  "code": ["false", "cache"],
                  "strong": "Note:"
                }
              },
              {
                "name": "complete",
                "type": "Function",
                "argument": [
                  {
                    "name": "jqXHR",
                    "type": "jqXHR"
                  },
                  {
                    "name": "textStatus",
                    "type": "String"
                  }
                ],
                "desc": {
                  "code": [
                    "success",
                    "error",
                    "\"success\"",
                    "\"notmodified\"",
                    "\"nocontent\"",
                    "\"error\"",
                    "\"timeout\"",
                    "\"abort\"",
                    "\"parsererror\"",
                    "complete"
                  ],
                  "strong": "As of jQuery 1.5",
                  "a": {
                    "href": "/Ajax_Events/",
                    "$t": "Ajax Event"
                  }
                }
              },
              {
                "name": "contents",
                "type": "PlainObject",
                "added": "1.5",
                "desc":
                  "An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type."
              },
              {
                "default": "'application/x-www-form-urlencoded; charset=UTF-8'",
                "name": "contentType",
                "type": [
                  {
                    "name": "Boolean"
                  },
                  {
                    "name": "String"
                  }
                ],
                "desc": {
                  "code": [
                    "$.ajax()",
                    "false",
                    "application/x-www-form-urlencoded",
                    "multipart/form-data",
                    "text/plain"
                  ],
                  "strong": ["Note:", "Note:"]
                }
              },
              {
                "name": "context",
                "type": "PlainObject",
                "desc": {
                  "code": ["$.ajaxSettings", "$.ajax", "complete"],
                  "pre": {
                    "code":
                      "$.ajax({   url: \"test.html\",\n  context: document.body\n}).done(function() {   $( this ).addClass( \"done\" );\n});"
                  }
                }
              },
              {
                "name": "converters",
                "type": "PlainObject",
                "default":
                  "{ \"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}",
                "added": "1.5",
                "desc":
                  "An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response."
              },
              {
                "name": "crossDomain",
                "type": "Boolean",
                "default":
                  "false for same-domain requests, true for cross-domain requests",
                "added": "1.5",
                "desc": {
                  "code": "true"
                }
              },
              {
                "name": "data",
                "type": [
                  {
                    "name": "PlainObject"
                  },
                  {
                    "name": "String"
                  },
                  {
                    "name": "Array"
                  }
                ],
                "desc": {
                  "code": ["processData", "traditional"]
                }
              },
              {
                "name": "dataFilter",
                "type": "Function",
                "argument": [
                  {
                    "name": "data",
                    "type": "String"
                  },
                  {
                    "name": "type",
                    "type": "String"
                  }
                ],
                "return": {
                  "type": "Anything"
                },
                "desc":
                  "A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter."
              },
              {
                "name": "dataType",
                "default": "Intelligent Guess (xml, json, script, or html)",
                "type": "String",
                "desc": {
                  "ul": {
                    "li": [
                      {
                        "code": "\"xml\""
                      },
                      {
                        "code": "\"html\""
                      },
                      {
                        "code": [
                          "\"script\"",
                          "_=[TIMESTAMP]",
                          "cache",
                          "true"
                        ],
                        "strong": "Note:"
                      },
                      {
                        "code": [
                          "\"json\"",
                          "\"json\"",
                          "\"jsonp\"",
                          "jsonp: false",
                          "null",
                          "{ }"
                        ],
                        "a": {
                          "href": "http://json.org/",
                          "$t": "json.org"
                        }
                      },
                      {
                        "code": [
                          "\"jsonp\"",
                          "\"?callback=?\"",
                          "\"_=[TIMESTAMP]\"",
                          "cache",
                          "true"
                        ],
                        "a": {
                          "href":
                            "http://bob.ippoli.to/archives/2005/12/05/remote-json-jsonp/",
                          "$t": "JSONP"
                        }
                      },
                      {
                        "code": "\"text\""
                      },
                      {
                        "strong": "As of jQuery 1.5",
                        "code": [
                          "\"text xml\"",
                          "\"jsonp text xml\"",
                          "\"jsonp xml\""
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "name": "error",
                "type": "Function",
                "argument": [
                  {
                    "name": "jqXHR",
                    "type": "jqXHR"
                  },
                  {
                    "name": "textStatus",
                    "type": "String"
                  },
                  {
                    "name": "errorThrown",
                    "type": "String"
                  }
                ],
                "desc": {
                  "code": [
                    "null",
                    "\"timeout\"",
                    "\"error\"",
                    "\"abort\"",
                    "\"parsererror\"",
                    "errorThrown",
                    "error"
                  ],
                  "strong": ["As of jQuery 1.5", "Note:"],
                  "em":
                    "This handler is not called for cross-domain script and cross-domain JSONP requests.",
                  "a": {
                    "href": "/Ajax_Events/",
                    "$t": "Ajax Event"
                  }
                }
              },
              {
                "default": "true",
                "name": "global",
                "type": "Boolean",
                "desc": {
                  "code": ["true", "false", "ajaxStart", "ajaxStop"],
                  "a": {
                    "href": "/Ajax_Events/",
                    "$t": "Ajax Events"
                  }
                }
              },
              {
                "name": "headers",
                "type": "PlainObject",
                "default": "{ }",
                "added": "1.5",
                "desc": {
                  "code": [
                    "X-Requested-With: XMLHttpRequest",
                    "XMLHttpRequest",
                    "headers",
                    "beforeSend"
                  ]
                }
              },
              {
                "default": "false",
                "name": "ifModified",
                "type": "Boolean",
                "desc": {
                  "code": "false"
                }
              },
              {
                "default": "depends on current location protocol",
                "name": "isLocal",
                "type": "Boolean",
                "added": "1.5.1",
                "desc": {
                  "code": [
                    "file",
                    "*-extension",
                    "widget",
                    "isLocal",
                    "$.ajaxSetup()"
                  ]
                }
              },
              {
                "name": "jsonp",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Boolean"
                  }
                ],
                "desc": {
                  "code": [
                    "{ jsonp:'onJSONPLoad'}",
                    "'onJSONPLoad=?'",
                    "jsonp",
                    "false",
                    "jsonpCallback",
                    "{ jsonp: false, jsonpCallback: \"callbackName\" }",
                    "jsonp",
                    "false"
                  ],
                  "strong": "As of jQuery 1.5"
                }
              },
              {
                "name": "jsonpCallback",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Function"
                  }
                ],
                "desc": {
                  "strong": "As of jQuery 1.5",
                  "code": "jsonpCallback"
                }
              },
              {
                "default": "'GET'",
                "name": "method",
                "type": "String",
                "added": "1.9.0",
                "desc": {
                  "code": ["\"POST\"", "\"GET\"", "\"PUT\""]
                }
              },
              {
                "name": "mimeType",
                "type": "String",
                "added": "1.5.1",
                "desc": {
                  "abbr": {
                    "title": "XMLHttpRequest",
                    "$t": "XHR"
                  }
                }
              },
              {
                "name": "password",
                "type": "String",
                "desc":
                  "A password to be used with XMLHttpRequest in response to an HTTP access authentication request."
              },
              {
                "default": "true",
                "name": "processData",
                "type": "Boolean",
                "desc": {
                  "code": ["data", "false"]
                }
              },
              {
                "name": "scriptCharset",
                "type": "String",
                "desc": {
                  "code": "charset"
                }
              },
              {
                "name": "statusCode",
                "type": "PlainObject",
                "default": "{ }",
                "added": "1.5",
                "desc": {
                  "p": [
                    "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:",
                    {
                      "code": "error"
                    }
                  ],
                  "pre": {
                    "code":
                      "$.ajax({   statusCode: {     404: function() {       alert( \"page not found\" );\n    }\n  }\n});"
                  }
                }
              },
              {
                "name": "success",
                "type": "Function",
                "argument": [
                  {
                    "name": "data",
                    "type": "Anything"
                  },
                  {
                    "name": "textStatus",
                    "type": "String"
                  },
                  {
                    "name": "jqXHR",
                    "type": "jqXHR"
                  }
                ],
                "desc": {
                  "code": ["dataType", "dataFilter", "jqXHR"],
                  "strong": "As of jQuery 1.5",
                  "em":
                    "the success setting can accept an array of functions. Each function will be called in turn.",
                  "a": {
                    "href": "/Ajax_Events/",
                    "$t": "Ajax Event"
                  }
                }
              },
              {
                "name": "timeout",
                "type": "Number",
                "desc": {
                  "a": {
                    "href": "/jQuery.ajaxSetup/",
                    "$t": "$.ajaxSetup()"
                  },
                  "code": "$.ajax",
                  "strong": [
                    "In jQuery 1.4.x and below,",
                    "In Firefox 3.0+ only,"
                  ]
                }
              },
              {
                "name": "traditional",
                "type": "Boolean",
                "desc": {
                  "code": "true",
                  "a": {
                    "href": "/jQuery.param/",
                    "$t": "param serialization"
                  }
                }
              },
              {
                "default": "'GET'",
                "name": "type",
                "type": "String",
                "desc": {
                  "code": ["method", "type"]
                }
              },
              {
                "default": "The current page",
                "name": "url",
                "type": "String",
                "desc":
                  "A string containing the URL to which the request is sent."
              },
              {
                "name": "username",
                "type": "String",
                "desc":
                  "A username to be used with XMLHttpRequest in response to an HTTP access authentication request."
              },
              {
                "name": "xhr",
                "type": "Function",
                "default":
                  "ActiveXObject when available (IE), the XMLHttpRequest otherwise",
                "desc":
                  "Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory."
              },
              {
                "name": "xhrFields",
                "type": "PlainObject",
                "added": "1.5.1",
                "desc": {
                  "p": [
                    {
                      "code": [
                        {
                          "abbr": {
                            "title": "XMLHttpRequest",
                            "$t": "XHR"
                          }
                        },
                        "withCredentials",
                        "true"
                      ]
                    },
                    {
                      "strong": "In jQuery 1.5",
                      "code": ["withCredentials", "XHR"]
                    }
                  ],
                  "pre": {
                    "code":
                      "$.ajax({    url: a_cross_domain_url,\n   xhrFields: {       withCredentials: true\n   }\n});"
                  }
                }
              }
            ]
          }
        }
      ],
      "desc": "Perform an asynchronous HTTP (Ajax) request.",
      "longdesc": {
        "p": [
          {
            "code": [
              "$.ajax()",
              {
                "a": {
                  "href": "/jQuery.get/",
                  "$t": "$.get()"
                }
              },
              {
                "a": {
                  "href": "/load/",
                  "$t": ".load()"
                }
              },
              "$.ajax()"
            ]
          },
          {
            "code": "$.ajax()"
          },
          {
            "strong": "Note:",
            "code": {
              "a": {
                "href": "/jQuery.ajaxSetup/",
                "$t": "$.ajaxSetup()"
              }
            }
          },
          "This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.",
          {
            "code": [
              "$.ajax()",
              "responseText",
              "responseXML",
              "getResponseHeader()",
              "jqXHR"
            ],
            "strong": "as of jQuery 1.5"
          },
          {
            "strong": "As of jQuery 1.5.1",
            "code": [
              "jqXHR",
              "overrideMimeType()",
              ".overrideMimeType()",
              "beforeSend()"
            ]
          },
          {
            "code": ["$.ajax()", "$.ajax()"],
            "a": {
              "href": "/category/deferred-object/",
              "$t": "Deferred object"
            }
          },
          {
            "code": ["this", "context", "$.ajax", "context", "this"]
          },
          {
            "code": ["XMLHttpRequest", "jqXHR"]
          },
          {
            "code": [
              "onreadystatechange",
              "done",
              "fail",
              "always",
              "statusCode"
            ]
          },
          {
            "code": ["beforeSend", "error", "dataFilter", "success", "complete"]
          },
          {
            "strong": "As of jQuery 1.5",
            "code": ["fail", "done", "always", "$.ajax()"],
            "a": {
              "href": "/category/deferred-object/",
              "$t": "Deferred object methods"
            }
          },
          {
            "code": "$.ajax()"
          },
          {
            "code": ["$.ajax()", "dataType", "dataType"]
          },
          {
            "code": ["text", "html", "xml", "json", "jsonp", "script"]
          },
          {
            "code": ["text", "html", "responseText", "jqXHR"]
          },
          {
            "code": ["xml", "responseXML", "jqXHR"],
            "a": [
              {
                "href": "/jQuery.parseXML/",
                "code": "jQuery.parseXML"
              },
              {
                "href": "http://api.jquery.com/Types/#XMLDocument",
                "code": "XMLDocument"
              }
            ]
          },
          {
            "code": ["json", "responseJSON", "jqXHR"],
            "a": {
              "href": "/jQuery.parseJSON/",
              "code": "jQuery.parseJSON"
            }
          },
          {
            "code": ["script", "$.ajax()"]
          },
          {
            "code": [
              "jsonp",
              "$.ajax()",
              "callback=?",
              "jsonp",
              "jsonpCallback",
              "$.ajax()",
              "$.ajax()",
              "$.ajax()"
            ]
          },
          {
            "a": {
              "href":
                "http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/",
              "$t": "original post detailing its use"
            }
          },
          {
            "code": ["type", "data"]
          },
          {
            "code": [
              "data",
              "key1=value1&key2=value2",
              "{ key1: 'value1', key2: 'value2'}",
              {
                "a": {
                  "href": "/jQuery.param/",
                  "$t": "jQuery.param()"
                }
              },
              "processData",
              "false",
              "contentType",
              "application/x-www-form-urlencoded"
            ]
          },
          {
            "code": [
              "global",
              {
                "a": {
                  "href": "/ajaxSend/",
                  "$t": ".ajaxSend()"
                }
              },
              {
                "a": {
                  "href": "/ajaxError/",
                  "$t": ".ajaxError()"
                }
              },
              {
                "a": {
                  "href": "/ajaxSend/",
                  "$t": ".ajaxSend()"
                }
              },
              "false"
            ]
          },
          {
            "code": ["username", "password"]
          },
          {
            "code": [
              {
                "a": {
                  "href": "/jQuery.ajaxSetup/",
                  "$t": "$.ajaxSetup()"
                }
              },
              "timeout"
            ]
          },
          {
            "code": ["cache", "false", "ifModified", "true"]
          },
          {
            "code": ["scriptCharset", "<script>", "script", "jsonp"]
          },
          {
            "code": ["async", "$.ajax()", "true", "false"]
          },
          {
            "code": ["$.ajax()", "XMLHttpRequest", "xhr", ".abort()"]
          },
          {
            "strong": "As of jQuery 1.5",
            "a": [
              {
                "href": "/jQuery.ajaxPrefilter/",
                "$t": "prefilters"
              },
              {
                "href": "/jQuery.ajaxTransport/",
                "$t": "transports"
              }
            ]
          },
          {
            "code": ["$.ajax()", "json", "contents"]
          },
          "This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).",
          {
            "code": ["text", "json"]
          },
          {
            "code": ["text", "mycustomtype", "mycustomtype", "json"]
          }
        ],
        "pre": [
          {
            "code": "$.ajax();"
          },
          {
            "code":
              "$.ajax({   url: \"http://fiddle.jshell.net/favicon.png\",\n  beforeSend: function( xhr ) {     xhr.overrideMimeType( \"text/plain; charset=x-user-defined\" );\n  }\n})\n  .done(function( data ) {     if ( console && console.log ) {       console.log( \"Sample of data:\", data.slice( 0, 100 ) );\n    }\n  });"
          },
          {
            "code":
              "// Assign handlers immediately after making the request,\n// and remember the jqXHR object for this request\nvar jqxhr = $.ajax( \"example.php\" )\n  .done(function() {     alert( \"success\" );\n  })\n  .fail(function() {     alert( \"error\" );\n  })\n  .always(function() {     alert( \"complete\" );\n  });\n\n// Perform other work here ...\n\n// Set another completion function for the request above\njqxhr.always(function() {   alert( \"second complete\" );\n});"
          },
          {
            "code":
              "$.ajaxSetup({   contents: {     mycustomtype: /mycustomtype/\n  },\n  converters: {     \"mycustomtype json\": function( result ) {       // Do stuff\n      return newresult;\n    }\n  }\n});"
          },
          {
            "code":
              "$.ajaxSetup({   contents: {     mycustomtype: /mycustomtype/\n  },\n  converters: {     \"text mycustomtype\": true,\n    \"mycustomtype json\": function( result ) {       // Do stuff\n      return newresult;\n    }\n  }\n});"
          }
        ],
        "h4": [
          {
            "id": "jqXHR",
            "$t": "The jqXHR Object"
          },
          {
            "id": "callback-functions",
            "$t": "Callback Function Queues"
          },
          {
            "id": "data-types",
            "$t": "Data Types"
          },
          {
            "id": "sending-data-to-server",
            "$t": "Sending Data to the Server"
          },
          {
            "id": "advanced-options",
            "$t": "Advanced Options"
          },
          {
            "id": "extending-ajax",
            "$t": "Extending Ajax"
          },
          {
            "id": "using-converters",
            "$t": "Using Converters"
          }
        ],
        "ul": [
          {
            "li": [
              {
                "strong":
                  "jqXHR.done(function( data, textStatus, jqXHR ) { });",
                "p": {
                  "code": {
                    "a": {
                      "href": "/deferred.done/",
                      "$t": "deferred.done()"
                    }
                  }
                }
              },
              {
                "strong":
                  "jqXHR.fail(function( jqXHR, textStatus, errorThrown ) { });",
                "p": {
                  "code": [
                    ".fail()",
                    ".error()",
                    {
                      "a": {
                        "href": "/deferred.fail/",
                        "$t": "deferred.fail()"
                      }
                    }
                  ]
                }
              },
              {
                "strong":
                  "jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { });",
                "p": [
                  {
                    "code": [".always()", ".complete()"]
                  },
                  {
                    "code": [
                      ".done()",
                      ".fail()",
                      {
                        "a": {
                          "href": "/deferred.always/",
                          "$t": "deferred.always()"
                        }
                      }
                    ]
                  }
                ]
              },
              {
                "strong":
                  "jqXHR.then(function( data, textStatus, jqXHR ) { }, function( jqXHR, textStatus, errorThrown ) { });",
                "p": {
                  "code": [".done()", ".fail()"],
                  "a": {
                    "href": "/deferred.then/",
                    "code": "deferred.then()"
                  }
                }
              }
            ]
          },
          {
            "li": [
              {
                "code": "readyState"
              },
              {
                "code": ["responseXML", "responseText"]
              },
              {
                "code": "status"
              },
              {
                "code": "statusText"
              },
              {
                "code": "abort( [ statusText ] )"
              },
              {
                "code": "getAllResponseHeaders()"
              },
              {
                "code": "getResponseHeader( name )"
              },
              {
                "code": "overrideMimeType( mimeType )"
              },
              {
                "code": "setRequestHeader( name, value )"
              },
              {
                "code": "statusCode( callbacksByStatusCode )"
              }
            ]
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Deprecation Notice:",
            "code": [
              "jqXHR.success()",
              "jqXHR.error()",
              "jqXHR.complete()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()"
            ]
          }
        },
        "ol": {
          "li": [
            {
              "code": ["beforeSend", "jqXHR", "settings"]
            },
            {
              "code": ["error", "jqXHR"]
            },
            {
              "code": ["dataFilter", "dataType", "success"]
            },
            {
              "code": ["success", "jqXHR"]
            },
            {
              "strong": "Promise callbacks",
              "code": [".done()", ".fail()", ".always()", ".then()"]
            },
            {
              "code": ["complete", "jqXHR"]
            }
          ]
        }
      },
      "note": [
        {
          "id": "same-origin-policy",
          "type": "additional"
        },
        {
          "id": "same-origin-policy-exceptions",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc":
            "Save some data to the server and notify the user once it's complete.",
          "code":
            "$.ajax({   method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n})\n  .done(function( msg ) {     alert( \"Data Saved: \" + msg );\n  });"
        },
        {
          "desc": "Retrieve the latest version of an HTML page.",
          "code":
            "$.ajax({   url: \"test.html\",\n  cache: false\n})\n  .done(function( html ) {     $( \"#results\" ).append( html );\n  });"
        },
        {
          "desc": {
            "code": "false"
          },
          "code":
            "var xmlDocument = [create xml document];\nvar xmlRequest = $.ajax({   url: \"page.php\",\n  processData: false,\n  data: xmlDocument\n});\n\nxmlRequest.done( handleResponse );"
        },
        {
          "desc":
            "Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.",
          "code":
            "var menuId = $( \"ul.nav\" ).first().attr( \"id\" );\nvar request = $.ajax({   url: \"script.php\",\n  method: \"POST\",\n  data: { id : menuId },\n  dataType: \"html\"\n});\n\nrequest.done(function( msg ) {   $( \"#log\" ).html( msg );\n});\n\nrequest.fail(function( jqXHR, textStatus ) {   alert( \"Request failed: \" + textStatus );\n});"
        },
        {
          "desc": "Load and execute a JavaScript file.",
          "code":
            "$.ajax({   method: \"GET\",\n  url: \"test.js\",\n  dataType: \"script\"\n});"
        }
      ],
      "category": [
        {
          "slug": "ajax/low-level-interface"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        },
        {
          "slug": "version/1.5.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.ajaxPrefilter",
      "return": "undefined",
      "title": "jQuery.ajaxPrefilter()",
      "desc": {
        "code": "$.ajax()"
      },
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "dataTypes",
            "optional": "true",
            "type": "String",
            "desc":
              "An optional string containing one or more space-separated dataTypes"
          },
          {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A handler to set default values for future Ajax requests.",
            "argument": [
              {
                "name": "options",
                "type": "PlainObject"
              },
              {
                "name": "originalOptions",
                "type": "PlainObject"
              },
              {
                "name": "jqXHR",
                "type": "jqXHR"
              }
            ]
          }
        ]
      },
      "longdesc": {
        "p": [
          {
            "code": "$.ajaxPrefilter()"
          },
          "where:",
          {
            "code": ["$.ajax()", "abortOnRetry", "true"]
          },
          "Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http://mydomain.net/proxy/:",
          {
            "code": "dataTypes"
          },
          {
            "code": ["$.ajaxPrefilter()", "isActuallyScript()"]
          },
          "This would ensure not only that the request is considered \"script\" but also that all the prefilters specifically attached to the script dataType would be applied to it."
        ],
        "pre": [
          {
            "code":
              "$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {   // Modify options, control originalOptions, store jqXHR, etc\n});"
          },
          {
            "code":
              "var currentRequests = { };\n\n$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {   if ( options.abortOnRetry ) {     if ( currentRequests[ options.url ] ) {       currentRequests[ options.url ].abort();\n    }\n    currentRequests[ options.url ] = jqXHR;\n  }\n});"
          },
          {
            "code":
              "$.ajaxPrefilter(function( options ) {   if ( options.crossDomain ) {     options.url = \"http://mydomain.net/proxy/\" + encodeURIComponent( options.url );\n    options.crossDomain = false;\n  }\n});"
          },
          {
            "code":
              "$.ajaxPrefilter( \"json script\", function( options, originalOptions, jqXHR ) {   // Modify options, control originalOptions, store jqXHR, etc\n});"
          },
          {
            "code":
              "$.ajaxPrefilter(function( options ) {   if ( isActuallyScript( options.url ) ) {     return \"script\";\n  }\n});"
          }
        ],
        "ul": {
          "li": [
            {
              "code": "options"
            },
            {
              "code": ["originalOptions", "$.ajax()", "ajaxSettings"]
            },
            {
              "code": "jqXHR"
            }
          ]
        }
      },
      "category": [
        {
          "slug": "ajax/low-level-interface"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.ajaxSetup",
      "return": "PlainObject",
      "title": "jQuery.ajaxSetup()",
      "signature": {
        "added": "1.1",
        "argument": {
          "name": "options",
          "type": "PlainObject",
          "desc":
            "A set of key/value pairs that configure the default Ajax request. All options are optional."
        }
      },
      "desc":
        "Set default values for future Ajax requests. Its use is not recommended.",
      "longdesc": {
        "p": [
          {
            "code": [
              "$.ajaxSetup()",
              {
                "a": {
                  "href": "/jQuery.ajax/",
                  "$t": "$.ajax()"
                }
              }
            ]
          },
          {
            "code": "$.ajaxSetup()"
          },
          {
            "strong": "Note:",
            "em": ["all", "strongly recommend against using this API"],
            "code": ["$.ajax", "$.get()"]
          },
          {
            "code": "url"
          },
          "Now each time an Ajax request is made, the \"ping.php\" URL will be used automatically:"
        ],
        "pre": [
          {
            "code": "$.ajaxSetup({   url: \"ping.php\"\n});"
          },
          {
            "code":
              "$.ajax({   // url not set here; uses ping.php\n  data: { \"name\": \"Dan\" }\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "code": [
              {
                "a": {
                  "href": "/ajaxStart/",
                  "$t": ".ajaxStart()"
                }
              },
              {
                "a": {
                  "href": "/ajaxStop/",
                  "$t": ".ajaxStop()"
                }
              },
              {
                "a": {
                  "href": "/ajaxComplete/",
                  "$t": ".ajaxComplete()"
                }
              },
              {
                "a": {
                  "href": "/ajaxError/",
                  "$t": ".ajaxError()"
                }
              },
              {
                "a": {
                  "href": "/ajaxSuccess/",
                  "$t": ".ajaxSuccess()"
                }
              },
              {
                "a": {
                  "href": "/ajaxSend/",
                  "$t": ".ajaxSend()"
                }
              },
              "options",
              "$.ajaxSetup()"
            ]
          }
        }
      },
      "example": {
        "desc":
          "Sets the defaults for Ajax requests to the url \"/xmlhttp/\", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.",
        "code":
          "$.ajaxSetup({   url: \"/xmlhttp/\",\n  global: false,\n  type: \"POST\"\n});\n$.ajax({ data: myData });"
      },
      "category": [
        {
          "slug": "ajax/low-level-interface"
        },
        {
          "slug": "version/1.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.ajaxTransport",
      "return": "undefined",
      "title": "jQuery.ajaxTransport()",
      "desc":
        "Creates an object that handles the actual transmission of Ajax data.",
      "signature": {
        "added": "1.5",
        "argument": [
          {
            "name": "dataType",
            "type": "String",
            "desc": "A string identifying the data type to use"
          },
          {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc":
              "A handler to return the new transport object to use with the data type provided in the first argument.",
            "argument": [
              {
                "name": "options",
                "type": "PlainObject"
              },
              {
                "name": "originalOptions",
                "type": "PlainObject"
              },
              {
                "name": "jqXHR",
                "type": "jqXHR"
              }
            ]
          }
        ]
      },
      "longdesc": {
        "p": [
          {
            "code": ["send", "abort", "$.ajax()", "$.ajax()"]
          },
          "Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.",
          {
            "code": "$.ajaxTransport()"
          },
          "where:",
          {
            "code": "completeCallback"
          },
          "where:",
          "Just like prefilters, a transport's factory function can be attached to a specific dataType:",
          "The following example shows how a minimal image transport could be implemented:",
          "The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.",
          {
            "code": [
              "converters",
              {
                "a": {
                  "href": "/jQuery.ajaxSetup/",
                  "$t": "$.ajaxSetup()"
                }
              },
              "$.ajax()"
            ]
          },
          "The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used:",
          {
            "code": ["converters", "$.ajaxSetup()", "$.ajax()"]
          },
          {
            "code": "$.ajaxSetup()"
          }
        ],
        "pre": [
          {
            "code":
              "$.ajaxTransport( dataType, function( options, originalOptions, jqXHR ) {   if( /* transportCanHandleRequest */ ) {     return {       send: function( headers, completeCallback ) {         // Send code\n      },\n      abort: function() {         // Abort code\n      }\n    };\n  }\n});"
          },
          {
            "code": "function( status, statusText, responses, headers ) { }"
          },
          {
            "code":
              "$.ajaxTransport( \"script\", function( options, originalOptions, jqXHR ) {   // Will only be called for script requests\n});"
          },
          {
            "code":
              "$.ajaxTransport( \"image\", function( s ) {   if ( s.type === \"GET\" && s.async ) {     var image;\n    return {       send: function( _ , callback ) {         image = new Image();\n        function done( status ) {           if ( image ) {             var statusText = ( status === 200 ) ? \"success\" : \"error\",\n              tmp = image;\n            image = image.onreadystatechange = image.onerror = image.onload = null;\n            callback( status, statusText, { image: tmp } );\n          }\n        }\n        image.onreadystatechange = image.onload = function() {           done( 200 );\n        };\n        image.onerror = function() {           done( 404 );\n        };\n        image.src = s.url;\n      },\n      abort: function() {         if ( image ) {           image = image.onreadystatechange = image.onerror = image.onload = null;\n        }\n      }\n    };\n  }\n});"
          },
          {
            "code":
              "// List of data converters\n// 1) Key format is \"source_type destination_type\"\n//    (a single space in-between)\n// 2) The catchall symbol \"*\" can be used for source_type\nconverters: {   // Convert anything to text\n  \"* text\": window.String,\n  // Text to html (true = no transformation)\n  \"text html\": true,\n  // Evaluate text as a json expression\n  \"text json\": jQuery.parseJSON,\n  // Parse text as xml\n  \"text xml\": jQuery.parseXML\n}"
          },
          {
            "code":
              "jQuery.ajaxSetup({   accepts: {     script: \"text/javascript, application/javascript\"\n  },\n  contents: {     script: /javascript/\n  },\n  converters: {     \"text script\": jQuery.globalEval\n  }\n});"
          }
        ],
        "ul": [
          {
            "li": [
              {
                "code": "options"
              },
              {
                "code": ["originalOptions", "$.ajax()"]
              },
              {
                "code": "jqXHR"
              },
              {
                "code": "headers"
              },
              {
                "code": "completeCallback"
              }
            ]
          },
          {
            "li": [
              {
                "code": "status"
              },
              {
                "code": "statusText"
              },
              {
                "code": ["responses", "{ xml: XMLData, text: textData }"]
              },
              {
                "code": ["headers", "XMLHttpRequest.getAllResponseHeaders()"]
              }
            ]
          }
        ],
        "h4": {
          "id": "handling-custom-data-types",
          "$t": "Handling Custom Data Types"
        }
      },
      "category": [
        {
          "slug": "ajax/low-level-interface"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.boxModel",
      "return": "Boolean",
      "deprecated": "1.3",
      "removed": "1.8",
      "title": "jQuery.boxModel",
      "signature": {
        "added": "1.0"
      },
      "desc": {
        "a": {
          "href": "http://www.w3.org/TR/REC-CSS2/box.html",
          "$t": "W3C CSS Box Model"
        },
        "strong": "This property was removed in jQuery 1.8"
      },
      "longdesc": {},
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "deprecated/deprecated-1.3"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entries": {
      "deprecated": "1.3",
      "removed": "1.9",
      "entry": [
        {
          "type": "property",
          "name": "jQuery.browser",
          "return": "PlainObject",
          "deprecated": "1.3",
          "removed": "1.9",
          "title": "jQuery.browser",
          "signature": {
            "added": "1.0"
          },
          "desc": {
            "strong": "This property was removed in jQuery 1.9"
          },
          "longdesc": {
            "p": [
              {
                "code": "$.browser"
              },
              "Available flags are:",
              {
                "code": ["$(document).ready()", "$.browser"]
              },
              {
                "code": ["$.browser", "navigator.userAgent", "$.browser"],
                "a": {
                  "href": "http://modernizr.com/",
                  "$t": "Modernizr"
                }
              }
            ],
            "ul": {
              "li": [
                "webkit (as of jQuery 1.4)",
                "safari (deprecated)",
                "opera",
                "msie",
                "mozilla"
              ]
            }
          },
          "example": [
            {
              "desc": "Show the browser info.",
              "code":
                "jQuery.each( jQuery.browser, function( i, val ) {   $( \"<div>\" + i + \" : <span>\" + val + \"</span>\" )\n  .appendTo( document.body );\n});"
            },
            {
              "desc": {
                "strong": "Will not work in jQuery 1.9 or later",
                "a": {
                  "href": "https://github.com/jquery/jquery-migrate/#readme",
                  "$t": "jQuery Migrate"
                }
              },
              "code": "$.browser.msie;"
            },
            {
              "desc": {
                "strong": "Will not work in jQuery 1.9 or later",
                "a": {
                  "href": "https://github.com/jquery/jquery-migrate/#readme",
                  "$t": "jQuery Migrate"
                }
              },
              "code":
                "if ( $.browser.webkit ) {     alert( \"This is WebKit!\" );\n  }"
            }
          ],
          "category": [
            {
              "slug": "properties/global-jquery-object-properties"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.1.3"
            },
            {
              "slug": "deprecated/deprecated-1.3"
            },
            {
              "slug": "removed"
            }
          ]
        },
        {
          "type": "property",
          "name": "jQuery.browser.version",
          "return": "String",
          "deprecated": "1.3",
          "removed": "1.9",
          "signature": {
            "added": "1.1.3"
          },
          "desc": {
            "strong": "This property was removed in jQuery 1.9"
          },
          "longdesc": {
            "p": [
              "Here are some typical results:",
              "Note that IE8 claims to be 7 in Compatibility View."
            ],
            "ul": {
              "li": [
                "Internet Explorer: 6.0, 7.0, 8.0",
                "Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9",
                "Opera: 10.06, 11.01",
                "Safari/Webkit: 312.8, 418.9"
              ]
            }
          },
          "example": [
            {
              "desc": {
                "strong": "Will not work in jQuery 1.9 or later",
                "a": {
                  "href": "https://github.com/jquery/jquery-migrate/#readme",
                  "$t": "jQuery Migrate"
                }
              },
              "code":
                "$( \"p\" ).html( \"The version # of the browser's rendering engine is: <span>\" +\n  $.browser.version + \"</span>\" );"
            },
            {
              "desc": {
                "strong": "Will not work in jQuery 1.9 or later",
                "a": {
                  "href": "https://github.com/jquery/jquery-migrate/#readme",
                  "$t": "jQuery Migrate"
                }
              },
              "code": "if ( $.browser.msie ) {   alert( $.browser.version );\n}"
            }
          ],
          "category": [
            {
              "slug": "properties/global-jquery-object-properties"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.1.3"
            },
            {
              "slug": "deprecated/deprecated-1.3"
            },
            {
              "slug": "removed"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.contains",
      "return": "Boolean",
      "title": "jQuery.contains()",
      "signature": {
        "added": "1.4",
        "argument": [
          {
            "name": "container",
            "type": "Element",
            "desc": "The DOM element that may contain the other element."
          },
          {
            "name": "contained",
            "type": "Element",
            "desc":
              "The DOM element that may be contained by (a descendant of) the other element."
          }
        ]
      },
      "desc":
        "Check to see if a DOM element is a descendant of another DOM element.",
      "longdesc": {
        "p": {
          "code": ["$.contains()", "true", "false", "$.contains()", "false"],
          "em": "element"
        },
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "em": "must"
          }
        }
      },
      "example": {
        "desc": "Check if an element is a descendant of another.",
        "code":
          "$.contains( document.documentElement, document.body ); // true\n$.contains( document.body, document.documentElement ); // false"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.cssHooks",
      "return": "Object",
      "title": "jQuery.cssHooks",
      "signature": {
        "added": "1.4.3"
      },
      "desc":
        "Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.",
      "longdesc": {
        "p": [
          {
            "code": "$.cssHooks"
          },
          {
            "code": [
              "-webkit-border-radius",
              "border-radius",
              "-moz-border-radius",
              ".css()",
              "border-radius",
              "borderRadius"
            ]
          },
          {
            "code": ["$.cssHooks", ".animate()"]
          },
          "Defining a new css hook is straight-forward. The skeleton template below can serve as a guide to creating your own.",
          {
            "code": ["border-radius", "style"]
          },
          "To define a complete css hook, combine the support test with a filled-out version of the skeleton template provided in the first example:",
          "You can then set the border radius in a supported browser using either the DOM (camelCased) style or the CSS (hyphenated) style:",
          "If the browser lacks support for any form of the CSS property, vendor-prefixed or not, the style is not applied to the element. However, if the browser supports a proprietary alternative, it can be applied to the cssHooks instead.",
          {
            "code": ".css()",
            "a": {
              "href": "/jQuery.cssNumer/",
              "code": "jQuery.cssNumber"
            }
          },
          {
            "code": "jQuery.fx.step"
          },
          "Note that this works best for simple numeric-value animations. More custom code may be required depending on the CSS property, the type of value it returns, and the animation's complexity."
        ],
        "pre": [
          {
            "code":
              "(function( $ ) { \n// First, check to see if cssHooks are supported\nif ( !$.cssHooks ) {   // If not, output an error message\n  throw( new Error( \"jQuery 1.4.3 or above is required for this plugin to work\" ) );\n}\n\n// Wrap in a document ready call, because jQuery writes\n// cssHooks at this time and will blow away your functions\n// if they exist.\n$(function () {   $.cssHooks[ \"someCSSProp\" ] = {     get: function( elem, computed, extra ) {       // Handle getting the CSS property\n    },\n    set: function( elem, value ) {       // Handle setting the CSS value\n    }\n  };\n});\n\n})( jQuery );"
          },
          {
            "code":
              "(function( $ ) { \nfunction styleSupport( prop ) {   var vendorProp, supportedProp,\n\n    // Capitalize first character of the prop to test vendor prefix\n    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n    prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n    div = document.createElement( \"div\" );\n\n  if ( prop in div.style ) { \n    // Browser supports standard CSS property name\n    supportedProp = prop;\n  } else { \n    // Otherwise test support for vendor-prefixed property names\n    for ( var i = 0; i < prefixes.length; i++ ) {       vendorProp = prefixes[ i ] + capProp;\n      if ( vendorProp in div.style ) {         supportedProp = vendorProp;\n        break;\n      }\n    }\n  }\n\n  // Avoid memory leak in IE\n  div = null;\n\n  // Add property to $.support so it can be accessed elsewhere\n  $.support[ prop ] = supportedProp;\n  return supportedProp;\n}\n\n// Call the function, e.g. testing for \"border-radius\" support:\nstyleSupport( \"borderRadius\" );\n\n})( jQuery );"
          },
          {
            "code":
              "(function( $ ) { \nif ( !$.cssHooks ) {   throw( new Error( \"jQuery 1.4.3+ is needed for this plugin to work\" ) );\n}\n\nfunction styleSupport( prop ) {   var vendorProp, supportedProp,\n    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n    prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n    div = document.createElement( \"div\" );\n\n  if ( prop in div.style ) {     supportedProp = prop;\n  } else {     for ( var i = 0; i < prefixes.length; i++ ) {       vendorProp = prefixes[ i ] + capProp;\n      if ( vendorProp in div.style ) {         supportedProp = vendorProp;\n        break;\n      }\n    }\n  }\n\n  div = null;\n  $.support[ prop ] = supportedProp;\n  return supportedProp;\n}\n\nvar borderRadius = styleSupport( \"borderRadius\" );\n\n// Set cssHooks only for browsers that support a vendor-prefixed border radius\nif ( borderRadius && borderRadius !== \"borderRadius\" ) {   $.cssHooks.borderRadius = {     get: function( elem, computed, extra ) {       return $.css( elem, borderRadius );\n    },\n    set: function( elem, value) {       elem.style[ borderRadius ] = value;\n    }\n  };\n}\n\n})( jQuery );"
          },
          {
            "code":
              "$( \"#element\" ).css( \"borderRadius\", \"10px\" );\n$( \"#another\" ).css( \"border-radius\", \"20px\" );"
          },
          {
            "code":
              "(function( $ ) { \n// Feature test for support of a CSS property\n// and a proprietary alternative\n// ...\nif ( $.support.someCSSProp && $.support.someCSSProp !== \"someCSSProp\" ) { \n  // Set cssHooks for browsers that\n  // support only a vendor-prefixed someCSSProp\n  $.cssHooks.someCSSProp = {     get: function( elem, computed, extra ) {       return $.css( elem, $.support.someCSSProp );\n    },\n    set: function( elem, value) {       elem.style[ $.support.someCSSProp ] = value;\n    }\n  };\n} else if ( supportsProprietaryAlternative ) {   $.cssHooks.someCSSProp = {     get: function( elem, computed, extra ) {       // Handle crazy conversion from the proprietary alternative\n    },\n    set: function( elem, value ) {       // Handle crazy conversion to the proprietary alternative\n    }\n  }\n}\n\n})( jQuery );"
          },
          {
            "code": "$.cssNumber.someCSSProp = true;"
          },
          {
            "code":
              "$.fx.step.someCSSProp = function( fx ) {   $.cssHooks.someCSSProp.set( fx.elem, fx.now + fx.unit );\n};"
          }
        ],
        "h4": [
          {
            "id": "feature-testing",
            "$t": "Feature Testing"
          },
          {
            "id": "defining-complete-csshook",
            "$t": "Defining a complete css hook"
          },
          {
            "id": "special-units",
            "$t": "Special units"
          },
          {
            "id": "animating",
            "$t": "Animating with cssHooks"
          }
        ]
      },
      "category": [
        {
          "slug": "css"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.cssNumber",
      "return": "Object",
      "title": "jQuery.cssNumber",
      "signature": {
        "added": "1.4.3"
      },
      "desc": {
        "a": {
          "href": "/css/",
          "code": ".css()"
        },
        "code": "px"
      },
      "longdesc": {
        "p": [
          {
            "code": ["jQuery.cssNumber", "px"],
            "a": {
              "href": "/css/",
              "code": ".css()"
            }
          },
          {
            "code": ["jQuery.cssNumber", "true", "px", "jQuery.cssNumber"],
            "a": {
              "href": "/css/",
              "code": ".css()"
            }
          },
          "By default the object contains the following properties:"
        ],
        "pre": {
          "code": "jQuery.cssNumber.someCSSProp = true;"
        },
        "ul": {
          "li": [
            {
              "code": "zIndex"
            },
            {
              "code": "fontWeight"
            },
            {
              "code": "opacity"
            },
            {
              "code": "zoom"
            },
            {
              "code": "lineHeight"
            },
            {
              "code": "widows"
            },
            {
              "code": "orphans"
            },
            {
              "code": "fillOpacity"
            },
            {
              "code": "columnCount"
            },
            {
              "code": "order"
            },
            {
              "code": "flexGrow"
            },
            {
              "code": "flexShrink"
            }
          ]
        }
      },
      "category": [
        {
          "slug": "css"
        },
        {
          "slug": "manipulation/style-properties"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Store arbitrary data associated with the specified element and/or return the value that was set.",
      "entry": [
        {
          "type": "method",
          "name": "jQuery.data",
          "return": "Object",
          "title": "jQuery.data()",
          "signature": {
            "added": "1.2.3",
            "argument": [
              {
                "name": "element",
                "type": "Element",
                "desc": "The DOM element to associate with the data."
              },
              {
                "name": "key",
                "type": "String",
                "desc": "A string naming the piece of data to set."
              },
              {
                "name": "value",
                "type": "Anything",
                "desc": {
                  "code": "undefined"
                }
              }
            ]
          },
          "desc":
            "Store arbitrary data associated with the specified element. Returns the value that was set.",
          "longdesc": {
            "p": [
              {
                "strong": "Note:",
                "code": {
                  "a": {
                    "href": "/data/",
                    "$t": ".data()"
                  }
                }
              },
              {
                "code": "jQuery.data()"
              }
            ],
            "pre": {
              "code":
                "jQuery.data( document.body, \"foo\", 52 );\njQuery.data( document.body, \"bar\", \"test\" );"
            }
          },
          "note": [
            {
              "id": "no-data-on-xml",
              "type": "additional"
            },
            {
              "id": "jquery-data-doesnt-accept-undefined",
              "type": "additional",
              "data-title": "jQuery.data",
              "data-parameters": "el, \"name\""
            }
          ],
          "example": {
            "desc": "Store then retrieve a value from the div element.",
            "code":
              "var div = $( \"div\" )[ 0 ];\njQuery.data( div, \"test\", {   first: 16,\n  last: \"pizza!\"\n});\n$( \"span:first\" ).text( jQuery.data( div, \"test\" ).first );\n$( \"span:last\" ).text( jQuery.data( div, \"test\" ).last );",
            "css": "div {     color: blue;\n  }\n  span {     color: red;\n  }",
            "html":
              "<div>\n  The values stored were\n  <span></span>\n  and\n  <span></span>\n</div>"
          },
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.2.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.4.3"
            }
          ]
        },
        {
          "type": "method",
          "name": "jQuery.data",
          "return": "Object",
          "signature": [
            {
              "added": "1.2.3",
              "argument": [
                {
                  "name": "element",
                  "type": "Element",
                  "desc": "The DOM element to query for the data."
                },
                {
                  "name": "key",
                  "type": "String",
                  "desc": "Name of the data stored."
                }
              ]
            },
            {
              "added": "1.4",
              "argument": {
                "name": "element",
                "type": "Element",
                "desc": "The DOM element to query for the data."
              }
            }
          ],
          "desc": {
            "code": "jQuery.data(element, name, value)"
          },
          "longdesc": {
            "p": [
              {
                "strong": "Note:",
                "code": {
                  "a": {
                    "href": "/data/",
                    "$t": ".data()"
                  }
                }
              },
              {
                "strong": "Regarding HTML5 data-* attributes:",
                "code": [
                  "data-*",
                  {
                    "a": {
                      "href": "/data/",
                      "$t": ".data()"
                    }
                  }
                ]
              },
              {
                "code": "jQuery.data()"
              },
              {
                "code": "body"
              },
              {
                "code": "jQuery.data( element )"
              },
              {
                "em": "Note:"
              }
            ],
            "pre": {
              "code":
                "alert( jQuery.data( document.body, \"foo\" ) );\nalert( jQuery.data( document.body ) );"
            }
          },
          "example": {
            "desc": "Get the data named \"blah\" stored at for an element.",
            "code":
              "$( \"button\" ).click( function() {   var value,\n    div = $( \"div\" )[ 0 ];\n  switch ( $( \"button\" ).index( this ) ) {   case 0 :\n    value = jQuery.data( div, \"blah\" );\n    break;\n  case 1 :\n    jQuery.data( div, \"blah\", \"hello\" );\n    value = \"Stored!\";\n    break;\n  case 2 :\n    jQuery.data( div, \"blah\", 86 );\n    value = \"Stored!\";\n    break;\n  case 3 :\n    jQuery.removeData( div, \"blah\" );\n    value = \"Removed!\";\n    break;\n  }\n  $( \"span\" ).text( \"\" + value );\n});",
            "css":
              "div {     margin: 5px;\n    background: yellow;\n  }\n  button {     margin: 5px;\n    font-size: 14px;\n  }\n  p {     margin: 5px;\n    color: blue;\n  }\n  span {     color: red;\n  }",
            "html":
              "<div>A div</div>\n<button>Get \"blah\" from the div</button>\n<button>Set \"blah\" to \"hello\"</button>\n<button>Set \"blah\" to 86</button>\n<button>Remove \"blah\" from the div</button>\n<p>The \"blah\" value of this div is <span>?</span></p>"
          },
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.2.3"
            },
            {
              "slug": "version/1.4"
            },
            {
              "slug": "version/1.4.3"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.dequeue",
      "return": "undefined",
      "title": "jQuery.dequeue()",
      "signature": {
        "added": "1.3",
        "argument": [
          {
            "name": "element",
            "type": "Element",
            "desc":
              "A DOM element from which to remove and execute a queued function."
          },
          {
            "name": "queueName",
            "optional": "true",
            "type": "String",
            "desc": {
              "code": "fx"
            }
          }
        ]
      },
      "desc": "Execute the next function on the queue for the matched element.",
      "longdesc": {
        "p": [
          {
            "strong": "Note:",
            "code": {
              "a": {
                "href": "/dequeue/",
                "$t": ".dequeue()"
              }
            }
          },
          {
            "code": ["jQuery.dequeue()", "jQuery.dequeue()"]
          }
        ]
      },
      "example": {
        "desc":
          "Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.",
        "code":
          "$( \"button\" ).click(function() {   $( \"div\" )\n    .animate({ left: '+=200px' }, 2000 )\n    .animate({ top: '0px' }, 600 )\n    .queue(function() {       $( this ).toggleClass( \"red\" );\n      $.dequeue( this );\n    })\n    .animate({ left:'10px', top:'30px' }, 700 );\n});",
        "css":
          "div {     margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {     background-color: red;\n  }",
        "html": "<button>Start</button>\n<div></div>"
      },
      "category": [
        {
          "slug": "data"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.each",
      "return": "Object",
      "title": "jQuery.each()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "array",
              "type": "Array",
              "desc": "The array to iterate over."
            },
            {
              "name": "callback",
              "type": "Function",
              "argument": [
                {
                  "name": "indexInArray",
                  "type": "Integer"
                },
                {
                  "name": "value",
                  "type": "Object"
                }
              ],
              "desc": "The function that will be executed on every object."
            }
          ]
        },
        {
          "added": "1.0",
          "argument": [
            {
              "name": "object",
              "type": "Object",
              "desc": "The object to iterate over."
            },
            {
              "name": "callback",
              "type": "Function",
              "argument": [
                {
                  "name": "propertyName",
                  "type": "String"
                },
                {
                  "name": "valueOfProperty",
                  "type": "Object"
                }
              ],
              "desc": "The function that will be executed on every object."
            }
          ]
        }
      ],
      "desc":
        "A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.",
      "longdesc": {
        "p": [
          {
            "code": ["$.each()", "$.each()", "this", "this", "Object"],
            "a": {
              "href": "/each/",
              "$t": "$(selector).each()"
            }
          },
          {
            "b": "Note:",
            "code": [
              "$.each()",
              "length",
              "length",
              "{ bar: 'foo', length: 10}"
            ]
          },
          "This produces two messages:",
          {
            "samp": ["0: 52", "1: 97"],
            "br": {}
          },
          "If an object is used as the collection, the callback is passed a key-value pair each time:",
          "Once again, this produces two messages:",
          {
            "samp": ["flammable: inflammable", "duh: no duh"],
            "br": {}
          },
          {
            "code": ["$.each()", "false", "continue"],
            "em": "non-false"
          }
        ],
        "pre": [
          {
            "code":
              "$.each([ 52, 97 ], function( index, value ) {   alert( index + \": \" + value );\n});"
          },
          {
            "code":
              "var obj = {   \"flammable\": \"inflammable\",\n  \"duh\": \"no duh\"\n};\n$.each( obj, function( key, value ) {   alert( key + \": \" + value );\n});"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Iterates through the array displaying each number as both a word and numeral",
          "code":
            "var arr = [ \"one\", \"two\", \"three\", \"four\", \"five\" ];\nvar obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };\n\njQuery.each( arr, function( i, val ) {   $( \"#\" + val ).text( \"Mine is \" + val + \".\" );\n\n  // Will stop running after \"three\"\n  return ( val !== \"three\" );\n});\n\njQuery.each( obj, function( i, val ) {   $( \"#\" + i ).append( document.createTextNode( \" - \" + val ) );\n});",
          "css":
            "div {     color: blue;\n  }\n  div#five {     color: red;\n  }",
          "html":
            "<div id=\"one\"></div>\n<div id=\"two\"></div>\n<div id=\"three\"></div>\n<div id=\"four\"></div>\n<div id=\"five\"></div>"
        },
        {
          "desc":
            "Iterates over items in an array, accessing both the current item and its index.",
          "code":
            "$.each( [ \"a\", \"b\", \"c\" ], function( i, l ){   alert( \"Index #\" + i + \": \" + l );\n});"
        },
        {
          "desc":
            "Iterates over the properties in an object, accessing both the current item and its key.",
          "code":
            "$.each({ name: \"John\", lang: \"JS\" }, function( k, v ) {   alert( \"Key: \" + k + \", Value: \" + v );\n});"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.error",
      "return": "",
      "title": "jQuery.error()",
      "signature": {
        "added": "1.4.1",
        "argument": {
          "name": "message",
          "type": "String",
          "desc": "The message to send out."
        }
      },
      "desc": "Takes a string and throws an exception containing it.",
      "longdesc": {
        "p":
          "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages."
      },
      "example": {
        "desc": "Override jQuery.error for display in Firebug.",
        "code": "jQuery.error = console.error;"
      },
      "category": [
        {
          "slug": "internals"
        },
        {
          "slug": "version/1.4.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.escapeSelector",
      "return": "Selector",
      "title": "jQuery.escapeSelector()",
      "desc":
        "Escapes any character that has a special meaning in a CSS selector.",
      "signature": {
        "added": "3.0",
        "argument": {
          "name": "selector",
          "type": "Selector",
          "desc": "A string containing a selector expression to escape."
        }
      },
      "longdesc": {
        "p": [
          "This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.",
          {
            "a": {
              "href": "https://drafts.csswg.org/cssom/#the-css.escape()-method",
              "$t": "CSS Working Group's CSS.escape() method"
            },
            "code": "$.escapeSelector()"
          }
        ]
      },
      "example": [
        {
          "desc": "Escape an ID containing a hash.",
          "code": "$.escapeSelector( \"#target\" ); // \"\\#target\""
        },
        {
          "desc": {
            "code": [".box", "div"]
          },
          "code": "$( \"div\" ).find( \".\" + $.escapeSelector( \".box\" ) );"
        }
      ],
      "category": [
        {
          "slug": "css"
        },
        {
          "slug": "version/3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.extend",
      "return": "Object",
      "title": "jQuery.extend()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "target",
              "type": "Object",
              "desc":
                "An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument."
            },
            {
              "name": "object1",
              "type": "Object",
              "optional": "true",
              "desc": "An object containing additional properties to merge in."
            },
            {
              "name": "objectN",
              "optional": "true",
              "type": "Object",
              "desc": "Additional objects containing properties to merge in."
            }
          ]
        },
        {
          "added": "1.1.4",
          "argument": [
            {
              "name": "deep",
              "optional": "true",
              "type": "Boolean",
              "desc": {
                "code": "false"
              }
            },
            {
              "name": "target",
              "type": "Object",
              "desc":
                "The object to extend. It will receive the new properties."
            },
            {
              "name": "object1",
              "type": "Object",
              "desc": "An object containing additional properties to merge in."
            },
            {
              "name": "objectN",
              "optional": "true",
              "type": "Object",
              "desc": "Additional objects containing properties to merge in."
            }
          ]
        }
      ],
      "desc":
        "Merge the contents of two or more objects together into the first object.",
      "longdesc": {
        "p": [
          {
            "code": ["$.extend()", "null", "undefined"]
          },
          {
            "code": "$.extend()"
          },
          {
            "code": "$.extend()"
          },
          {
            "code": ["$.extend()", "true"]
          },
          {
            "strong": "Warning",
            "code": "false"
          },
          {
            "em": "will",
            "code": "new MyCustomObject(args)"
          },
          {
            "code": "deep"
          },
          {
            "a": {
              "href": "http://lodash.com",
              "$t": "lodash"
            }
          }
        ],
        "pre": {
          "code": "var object = $.extend({ }, object1, object2);"
        }
      },
      "example": [
        {
          "desc": "Merge two objects, modifying the first.",
          "code":
            "var object1 = {   apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {   banana: { price: 200 },\n  durian: 100\n};\n\n// Merge object2 into object1\n$.extend( object1, object2 );\n\n// Assuming JSON.stringify - not available in IE<8\n$( \"#log\" ).append( JSON.stringify( object1 ) );",
          "html": "<div id=\"log\"></div>"
        },
        {
          "desc": "Merge two objects recursively, modifying the first.",
          "code":
            "var object1 = {   apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {   banana: { price: 200 },\n  durian: 100\n};\n\n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n\n// Assuming JSON.stringify - not available in IE<8\n$( \"#log\" ).append( JSON.stringify( object1 ) );",
          "html": "<div id=\"log\"></div>"
        },
        {
          "desc":
            "Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.",
          "code":
            "var defaults = { validate: false, limit: 5, name: \"foo\" };\nvar options = { validate: true, name: \"bar\" };\n\n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( { }, defaults, options );\n\n// Assuming JSON.stringify - not available in IE<8\n$( \"#log\" ).append( \"<div><b>defaults -- </b>\" + JSON.stringify( defaults ) + \"</div>\" );\n$( \"#log\" ).append( \"<div><b>options -- </b>\" + JSON.stringify( options ) + \"</div>\" );\n$( \"#log\" ).append( \"<div><b>settings -- </b>\" + JSON.stringify( settings ) + \"</div>\" );",
          "html": "<div id=\"log\"></div>"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.fn.extend",
      "return": "Object",
      "title": "jQuery.fn.extend()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "object",
          "type": "Object",
          "desc": "An object to merge onto the jQuery prototype."
        }
      },
      "desc":
        "Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.",
      "longdesc": {
        "code": ["jQuery.fn.extend()", "$.fn", "jQuery()"]
      },
      "example": {
        "desc": {
          "code": "$.fn"
        },
        "code":
          "jQuery.fn.extend({   check: function() {     return this.each(function() {       this.checked = true;\n    });\n  },\n  uncheck: function() {     return this.each(function() {       this.checked = false;\n    });\n  }\n});\n\n// Use the newly created .check() method\n$( \"input[type='checkbox']\" ).check();",
        "css": "label {     display: block;\n    margin: .5em;\n  }",
        "html":
          "<label><input type=\"checkbox\" name=\"foo\"> Foo</label>\n<label><input type=\"checkbox\" name=\"bar\"> Bar</label>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.fx.interval",
      "return": "Number",
      "deprecated": "3.0",
      "title": "jQuery.fx.interval",
      "desc": "The rate (in milliseconds) at which animations fire.",
      "signature": {
        "added": "1.4.3"
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "http://caniuse.com/#feat=requestanimationframe",
              "code": "requestAnimationFrame"
            }
          },
          {
            "code": "requestAnimationFrame"
          },
          "Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect."
        ]
      },
      "example": {
        "desc": "Cause all animations to run with less frames.",
        "code":
          "jQuery.fx.interval = 100;\n$( \"input\" ).click(function() {   $( \"div\" ).toggle( 3000 );\n});",
        "css":
          "div {     width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }",
        "html": "<p><input type=\"button\" value=\"Run\"></p>\n<div></div>"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "properties/global-jquery-object-properties"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.fx.off",
      "return": "Boolean",
      "title": "jQuery.fx.off",
      "desc": "Globally disable all animations.",
      "signature": {
        "added": "1.3"
      },
      "longdesc": {
        "p": [
          {
            "code": "true"
          },
          {
            "code": "false"
          }
        ],
        "ul": {
          "li": [
            "jQuery is being used on a low-resource device.",
            "Users are encountering accessibility problems with the animations."
          ]
        }
      },
      "example": {
        "desc": "Toggle animation on and off",
        "code":
          "var toggleFx = function() {   $.fx.off = !$.fx.off;\n};\ntoggleFx();\n$( \"button\" ).click( toggleFx );\n$( \"input\" ).click(function() {   $( \"div\" ).toggle( \"slow\" );\n});",
        "css":
          "div {     width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }",
        "html":
          "<input type=\"button\" value=\"Run\">\n<button>Toggle fx</button>\n<div></div>"
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "properties/global-jquery-object-properties"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.get",
      "return": "jqXHR",
      "title": "jQuery.get()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "url",
              "type": "String",
              "desc":
                "A string containing the URL to which the request is sent."
            },
            {
              "name": "data",
              "optional": "true",
              "type": [
                {
                  "name": "PlainObject"
                },
                {
                  "name": "String"
                }
              ],
              "desc":
                "A plain object or string that is sent to the server with the request."
            },
            {
              "name": "success",
              "optional": "true",
              "type": "Function",
              "argument": [
                {
                  "name": "data",
                  "type": "PlainObject"
                },
                {
                  "name": "textStatus",
                  "type": "String"
                },
                {
                  "name": "jqXHR",
                  "type": "jqXHR"
                }
              ],
              "desc": {
                "code": ["dataType", "null"],
                "a": {
                  "href": "/jQuery.noop/",
                  "code": "jQuery.noop"
                }
              }
            },
            {
              "name": "dataType",
              "optional": "true",
              "type": "String",
              "desc":
                "The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html)."
            }
          ]
        },
        {
          "added": "1.12/2.2",
          "argument": {
            "name": "settings",
            "type": "PlainObject",
            "optional": "false",
            "desc": {
              "code": ["url", "GET"],
              "a": [
                {
                  "href": "/jQuery.ajaxSetup/",
                  "$t": "$.ajaxSetup()"
                },
                {
                  "href": "/jquery.ajax/#jQuery-ajax-settings",
                  "$t": "jQuery.ajax( settings )"
                }
              ]
            }
          }
        }
      ],
      "desc": "Load data from the server using a HTTP GET request.",
      "longdesc": {
        "p": [
          "This is a shorthand Ajax function, which is equivalent to:",
          {
            "code": "success"
          },
          {
            "strong": ["As of jQuery 1.5", "jQuery 1.4"],
            "code": ["success", "XMLHttpRequest", "jqXHR", "textStatus"],
            "a": {
              "href": "#jqxhr-object",
              "$t": "\"jqXHR\" object"
            },
            "abbr": {
              "title": "XMLHTTPRequest",
              "$t": "XHR"
            }
          },
          "Most implementations will specify a success handler:",
          "This example fetches the requested HTML snippet and inserts it on the page.",
          {
            "strong": "As of jQuery 1.5",
            "code": [
              "XMLHTTPRequest",
              "$.get()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()",
              "$.ajax()"
            ],
            "a": [
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              },
              {
                "href": "/jQuery.ajax/#jqXHR",
                "$t": "jqXHR Object"
              }
            ]
          },
          {
            "code": ["$.get()", ".done()", ".fail()", ".always()"]
          },
          {
            "code": [
              "jqXHR.success()",
              "jqXHR.error()",
              "jqXHR.complete()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()"
            ],
            "strong": "removed as of jQuery 3.0"
          }
        ],
        "pre": [
          {
            "code":
              "$.ajax({   url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});"
          },
          {
            "code":
              "$.get( \"ajax/test.html\", function( data ) {   $( \".result\" ).html( data );\n  alert( \"Load was performed.\" );\n});"
          },
          {
            "code":
              "// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.get( \"example.php\", function() {   alert( \"success\" );\n})\n  .done(function() {     alert( \"second success\" );\n  })\n  .fail(function() {     alert( \"error\" );\n  })\n  .always(function() {     alert( \"finished\" );\n  });\n\n// Perform other work here ...\n\n// Set another completion function for the request above\njqxhr.always(function() {   alert( \"second finished\" );\n});"
          }
        ],
        "h4": [
          {
            "id": "jqxhr-object",
            "$t": "The jqXHR Object"
          },
          "Deprecation Notice"
        ]
      },
      "note": [
        {
          "id": "same-origin-policy",
          "type": "additional"
        },
        {
          "id": "use-ajaxerror",
          "type": "additional",
          "data-title": "jQuery.get()"
        },
        {
          "id": "same-origin-policy-exceptions",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc": "Request the test.php page, but ignore the return results.",
          "code": "$.get( \"test.php\" );"
        },
        {
          "desc":
            "Request the test.php page and send some additional data along (while still ignoring the return results).",
          "code": "$.get( \"test.php\", { name: \"John\", time: \"2pm\" } );"
        },
        {
          "desc":
            "Pass arrays of data to the server (while still ignoring the return results).",
          "code":
            "$.get( \"test.php\", { \"choices[]\": [\"Jon\", \"Susan\"] } );"
        },
        {
          "desc":
            "Alert the results from requesting test.php (HTML or XML, depending on what was returned).",
          "code":
            "$.get( \"test.php\", function( data ) {   alert( \"Data Loaded: \" + data );\n});"
        },
        {
          "desc":
            "Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).",
          "code":
            "$.get( \"test.cgi\", { name: \"John\", time: \"2pm\" } )\n  .done(function( data ) {     alert( \"Data Loaded: \" + data );\n  });"
        },
        {
          "desc":
            "Get the test.php page contents, which has been returned in json format (<?php echo json_encode( array( \"name\"=>\"John\",\"time\"=>\"2pm\" ) ); ?>), and add it to the page.",
          "code":
            "$.get( \"test.php\", function( data ) {   $( \"body\" )\n    .append( \"Name: \" + data.name ) // John\n    .append( \"Time: \" + data.time ); //  2pm\n}, \"json\" );"
        }
      ],
      "category": [
        {
          "slug": "ajax/shorthand-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.getJSON",
      "return": "jqXHR",
      "title": "jQuery.getJSON()",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "url",
            "type": "String",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "data",
            "optional": "true",
            "type": [
              {
                "name": "PlainObject"
              },
              {
                "name": "String"
              }
            ],
            "desc":
              "A plain object or string that is sent to the server with the request."
          },
          {
            "name": "success",
            "optional": "true",
            "type": "Function",
            "argument": [
              {
                "name": "data",
                "type": "PlainObject"
              },
              {
                "name": "textStatus",
                "type": "String"
              },
              {
                "name": "jqXHR",
                "type": "jqXHR"
              }
            ],
            "desc":
              "A callback function that is executed if the request succeeds."
          }
        ]
      },
      "desc":
        "Load JSON-encoded data from the server using a GET HTTP request.",
      "longdesc": {
        "p": [
          "This is a shorthand Ajax function, which is equivalent to:",
          {
            "code": "data"
          },
          "Most implementations will specify a success handler:",
          "This example, of course, relies on the structure of the JSON file:",
          "Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body.",
          {
            "code": [
              "success",
              {
                "a": {
                  "href": "/jQuery.parseJSON/",
                  "$t": "$.parseJSON()"
                }
              }
            ]
          },
          {
            "strong": ["As of jQuery 1.5", "jQuery 1.4"],
            "code": ["success", "XMLHttpRequest", "jqXHR", "textStatus"],
            "a": {
              "href": "/jQuery.get/#jqxhr-object",
              "$t": "\"jqXHR\" object"
            },
            "abbr": {
              "title": "XMLHTTPRequest",
              "$t": "XHR"
            }
          },
          {
            "code": [
              "jsonp",
              {
                "a": {
                  "href": "/jQuery.ajax/",
                  "$t": "$.ajax()"
                }
              }
            ]
          },
          {
            "strong": "As of jQuery 1.5",
            "code": [
              "XMLHTTPRequest",
              "$.getJSON()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()",
              "$.ajax()"
            ],
            "a": [
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              },
              {
                "href": "/jQuery.ajax/#jqXHR",
                "$t": "jqXHR Object"
              }
            ]
          },
          {
            "code": ["$.getJSON()", ".done()", ".always()", ".fail()"]
          },
          {
            "code": [
              "jqXHR.success()",
              "jqXHR.error()",
              "jqXHR.complete()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()"
            ],
            "strong": "removed as of jQuery 3.0"
          }
        ],
        "pre": [
          {
            "code":
              "$.ajax({   dataType: \"json\",\n  url: url,\n  data: data,\n  success: success\n});"
          },
          {
            "code":
              "$.getJSON( \"ajax/test.json\", function( data ) {   var items = [];\n  $.each( data, function( key, val ) {     items.push( \"<li id='\" + key + \"'>\" + val + \"</li>\" );\n  });\n\n  $( \"<ul/>\", {     \"class\": \"my-new-list\",\n    html: items.join( \"\" )\n  }).appendTo( \"body\" );\n});"
          },
          {
            "code":
              "{   \"one\": \"Singular sensation\",\n  \"two\": \"Beady little eyes\",\n  \"three\": \"Little birds pitch by my doorstep\"\n}"
          },
          {
            "code":
              "// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.getJSON( \"example.json\", function() {   console.log( \"success\" );\n})\n  .done(function() {     console.log( \"second success\" );\n  })\n  .fail(function() {     console.log( \"error\" );\n  })\n  .always(function() {     console.log( \"complete\" );\n  });\n\n// Perform other work here ...\n\n// Set another completion function for the request above\njqxhr.complete(function() {   console.log( \"second complete\" );\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Important:",
            "a": {
              "href": "http://json.org/",
              "$t": "http://json.org/"
            }
          }
        },
        "h4": [
          {
            "id": "jsonp",
            "$t": "JSONP"
          },
          {
            "id": "jqxhr-object",
            "$t": "The jqXHR Object"
          },
          "Deprecation Notice"
        ]
      },
      "note": [
        {
          "id": "same-origin-policy",
          "type": "additional"
        },
        {
          "id": "same-origin-policy-exceptions",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc":
            "Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.",
          "code":
            "(function() {   var flickerAPI = \"http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?\";\n  $.getJSON( flickerAPI, {     tags: \"mount rainier\",\n    tagmode: \"any\",\n    format: \"json\"\n  })\n    .done(function( data ) {       $.each( data.items, function( i, item ) {         $( \"<img>\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" );\n        if ( i === 3 ) {           return false;\n        }\n      });\n    });\n})();",
          "html": "<div id=\"images\"></div>",
          "css": "img {     height: 100px;\n    float: left;\n  }"
        },
        {
          "desc":
            "Load the JSON data from test.js and access a name from the returned JSON data.",
          "code":
            "$.getJSON( \"test.js\", function( json ) {   console.log( \"JSON Data: \" + json.users[ 3 ].name );\n });"
        },
        {
          "desc":
            "Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.\n      If an error occurs, log an error message instead.",
          "code":
            "$.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } )\n  .done(function( json ) {     console.log( \"JSON Data: \" + json.users[ 3 ].name );\n  })\n  .fail(function( jqxhr, textStatus, error ) {     var err = textStatus + \", \" + error;\n    console.log( \"Request Failed: \" + err );\n});"
        }
      ],
      "category": [
        {
          "slug": "ajax/shorthand-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.getScript",
      "return": "jqXHR",
      "title": "jQuery.getScript()",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "url",
            "type": "String",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "success",
            "optional": "true",
            "type": "Function",
            "argument": [
              {
                "name": "script",
                "type": "String"
              },
              {
                "name": "textStatus",
                "type": "String"
              },
              {
                "name": "jqXHR",
                "type": "jqXHR"
              }
            ],
            "desc":
              "A callback function that is executed if the request succeeds."
          }
        ]
      },
      "desc":
        "Load a JavaScript file from the server using a GET HTTP request, then execute it.",
      "longdesc": {
        "p": [
          "This is a shorthand Ajax function, which is equivalent to:",
          "The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.",
          "The callback is fired once the script has been loaded but not necessarily executed.",
          "Scripts are included and run by referencing the file name:",
          {
            "a": {
              "href": "/deferred.fail/",
              "code": ".fail()"
            }
          },
          {
            "code": [".ajaxError()", "$.getScript()"]
          },
          {
            "code": ["$.getScript()", "false"],
            "a": {
              "href": "/jquery.ajaxsetup/",
              "code": "$.ajaxSetup()"
            }
          },
          {
            "code": "$.ajax()"
          }
        ],
        "pre": [
          {
            "code":
              "$.ajax({   url: url,\n  dataType: \"script\",\n  success: success\n});"
          },
          {
            "code":
              "$.getScript( \"ajax/test.js\", function( data, textStatus, jqxhr ) {   console.log( data ); // Data returned\n  console.log( textStatus ); // Success\n  console.log( jqxhr.status ); // 200\n  console.log( \"Load was performed.\" );\n});"
          },
          {
            "code":
              "$.getScript( \"ajax/test.js\" )\n  .done(function( script, textStatus ) {     console.log( textStatus );\n  })\n  .fail(function( jqxhr, settings, exception ) {     $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );\n});"
          },
          {
            "code":
              "$( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) {   if ( settings.dataType == \"script\" ) {     $( this ).text( \"Triggered ajaxError handler.\" );\n  }\n});"
          },
          {
            "code": "$.ajaxSetup({   cache: true\n});"
          }
        ],
        "h4": [
          {
            "id": "success-callback",
            "$t": "Success Callback"
          },
          {
            "id": "handling-errors",
            "$t": "Handling Errors"
          },
          {
            "id": "caching-requests",
            "$t": "Caching Responses"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Define a $.cachedScript() method that allows fetching a cached script:",
          "code":
            "jQuery.cachedScript = function( url, options ) { \n  // Allow user to set any option except for dataType, cache, and url\n  options = $.extend( options || { }, {     dataType: \"script\",\n    cache: true,\n    url: url\n  });\n\n  // Use $.ajax() since it is more flexible than $.getScript\n  // Return the jqXHR object so we can chain callbacks\n  return jQuery.ajax( options );\n};\n\n// Usage\n$.cachedScript( \"ajax/test.js\" ).done(function( script, textStatus ) {   console.log( textStatus );\n});"
        },
        {
          "desc": {
            "a": {
              "href": "https://github.com/jquery/jquery-color",
              "$t": "official jQuery Color Animation plugin"
            }
          },
          "code":
            "var url = \"https://code.jquery.com/color/jquery.color.js\";\n$.getScript( url, function() {   $( \"#go\" ).click(function() {     $( \".block\" )\n      .animate({         backgroundColor: \"rgb(255, 180, 180)\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({         backgroundColor: \"olive\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({         backgroundColor: \"#00f\"\n      }, 1000 );\n  });\n});",
          "html":
            "<button id=\"go\">&raquo; Run</button>\n<div class=\"block\"></div>",
          "css":
            ".block {      background-color: blue;\n     width: 150px;\n     height: 70px;\n     margin: 10px;\n  }"
        }
      ],
      "category": [
        {
          "slug": "ajax/shorthand-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.globalEval",
      "return": "Anything",
      "title": "jQuery.globalEval()",
      "signature": {
        "added": "1.0.4",
        "argument": {
          "name": "code",
          "type": "String",
          "desc": "The JavaScript code to execute."
        }
      },
      "desc": "Execute some JavaScript code globally.",
      "longdesc": {
        "p": {
          "code": "eval()"
        }
      },
      "example": {
        "desc": "Execute a script in the global context.",
        "code":
          "function test() {   jQuery.globalEval( \"var newVar = true;\" )\n}\ntest();\n// newVar === true"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.grep",
      "return": "Array",
      "title": "jQuery.grep()",
      "desc":
        "Finds the elements of an array which satisfy a filter function. The original array is not affected.",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "array",
            "type": "ArrayLikeObject",
            "desc": "The array-like object to search through."
          },
          {
            "name": "function",
            "type": "Function",
            "argument": [
              {
                "name": "elementOfArray",
                "type": "Object"
              },
              {
                "name": "indexInArray",
                "type": "Integer"
              }
            ],
            "return": {
              "type": "Boolean"
            },
            "desc": {
              "code": "this"
            }
          },
          {
            "name": "invert",
            "optional": "true",
            "type": "Boolean",
            "desc":
              "If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true.  If \"invert\" is true, then the function returns an array consisting of all elements for which \"callback\" returns false."
          }
        ]
      },
      "longdesc": {
        "p": [
          {
            "code": "$.grep()"
          },
          "The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array."
        ]
      },
      "example": [
        {
          "desc":
            "Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.",
          "code":
            "var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];\n$( \"div\" ).text( arr.join( \", \" ) );\n\narr = jQuery.grep(arr, function( n, i ) {   return ( n !== 5 && i > 4 );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n\narr = jQuery.grep(arr, function( a ) {   return a !== 9;\n});\n\n$( \"span\" ).text( arr.join( \", \" ) );",
          "css":
            "div {     color: blue;\n  }\n  p {     color: green;\n    margin: 0;\n  }\n  span {     color: red;\n  }",
          "html": "<div></div>\n<p></p>\n<span></span>"
        },
        {
          "desc":
            "Filter an array of numbers to include only numbers bigger then zero.",
          "code":
            "$.grep( [ 0, 1, 2 ], function( n, i ) {   return n > 0;\n});",
          "results": "[ 1, 2 ]"
        },
        {
          "desc":
            "Filter an array of numbers to include numbers that are not bigger than zero.",
          "code":
            "$.grep( [ 0, 1, 2 ], function( n, i ) {     return n > 0;\n}, true );",
          "results": "[ 0 ]"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.hasData",
      "return": "Boolean",
      "title": "jQuery.hasData()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "element",
          "type": "Element",
          "desc": "A DOM element to be checked for data."
        }
      },
      "desc":
        "Determine whether an element has any jQuery data associated with it.",
      "longdesc": {
        "p": [
          {
            "code": [
              "jQuery.hasData()",
              {
                "a": {
                  "href": "/jQuery.data/",
                  "$t": "jQuery.data()"
                }
              },
              "false",
              "true"
            ]
          },
          {
            "code": ["jQuery.hasData(element)", "jQuery.data(element)"]
          },
          {
            "code": [".on()", ".bind()", ".live()", ".delegate()"]
          }
        ]
      },
      "example": {
        "desc": "Set data on an element and see the results of hasData.",
        "code":
          "var $p = jQuery( \"p\" ), p = $p[ 0 ];\n$p.append( jQuery.hasData( p ) + \" \" ); // false\n\n$.data( p, \"testing\", 123 );\n$p.append( jQuery.hasData( p ) + \" \" ); // true\n\n$.removeData( p, \"testing\" );\n$p.append( jQuery.hasData( p ) + \" \" ); // false\n\n$p.on( \"click\", function() { } );\n$p.append( jQuery.hasData( p ) + \" \" ); // true\n\n$p.off( \"click\" );\n$p.append( jQuery.hasData( p ) + \" \" ); // false",
        "html": "<p>Results: </p>"
      },
      "category": [
        {
          "slug": "data"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.holdReady",
      "return": "undefined",
      "title": "jQuery.holdReady()",
      "desc": "Holds or releases the execution of jQuery's ready event.",
      "signature": {
        "added": "1.6",
        "argument": {
          "name": "hold",
          "type": "Boolean",
          "desc":
            "Indicates whether the ready hold is being requested or released"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["$.holdReady()", "<head>"],
            "em": "advanced feature"
          },
          {
            "code": [
              "$.holdReady( true )",
              "$.holdReady( false )",
              "$.holdReady( true )",
              "$.holdReady( false )"
            ],
            "em": "and",
            "a": {
              "href": "/ready/",
              "code": "ready"
            }
          }
        ]
      },
      "example": {
        "desc": "Delay the ready event until a custom plugin has loaded.",
        "code":
          "$.holdReady( true );\n$.getScript( \"myplugin.js\", function() {   $.holdReady( false );\n});"
      },
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "properties/global-jquery-object-properties"
        },
        {
          "slug": "events/document-loading"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.htmlPrefilter",
      "return": "String",
      "title": "jQuery.htmlPrefilter()",
      "desc": {
        "a": {
          "href": "/category/manipulation/",
          "$t": "jQuery manipulation methods"
        }
      },
      "signature": {
        "added": "1.12/2.2",
        "argument": {
          "name": "html",
          "type": "String",
          "desc": "The HTML string on which to operate."
        }
      },
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/category/manipulation/",
              "$t": "jQuery manipulation methods"
            },
            "code": "<del>"
          },
          {
            "code": ["htmlPrefilter", "jQuery.htmlPrefilter()"],
            "pre": "<a title=\"<div />\"><>"
          },
          "However, while the above fix is short and simple, it puts the burden on you to ensure XHTML-compliant tags in any HTML strings. A more thorough fix for this issue would be this:"
        ],
        "pre": [
          {
            "code":
              "var htmlPrefilter = $.htmlPrefilter,\n  rdel = /<(del)(?=[\\s>])[\\w\\W]*?<\\/\\1\\s*>/gi;\n\n$.htmlPrefilter = function( html ) {   return htmlPrefilter.call( this, html ).replace( rdel, \"\" );\n};"
          },
          {
            "code":
              "$.htmlPrefilter = function( html ) {   // Return HTML strings unchanged\n  return html;\n};"
          },
          {
            "code":
              "var panything = \"[\\\\w\\\\W]*?\",\n\n  // Whitespace\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#space-character\n  pspace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n  // End of tag name (whitespace or greater-than)\n  pnameEnd = pspace.replace( \"]\", \">]\" ),\n\n  // Tag name (a leading letter, then almost anything)\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state\n  pname = \"[a-z]\" + pnameEnd.replace( \"[\", \"[^/\\\\0\" ) + \"*\",\n\n  // Void element (end tag prohibited)\n  // https://html.spec.whatwg.org/multipage/syntax.html#void-elements\n  pvoidName = \"(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|\" +\n    \"source|track|wbr)(?=\" + pnameEnd + \")\",\n\n  // Attributes (double-quoted value, single-quoted value, unquoted value, or no value)\n  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n  pattrs = \"(?:\" + pspace + \"+[^\\\\0-\\\\x20\\\\x7f-\\\\x9f=\\\"'/>]+(?:\" + pspace + \"*=\" + pspace +\n    \"*(?:\\\"\" + panything + \"\\\"|'\" + panything + \"'|\" +\n    pnameEnd.replace( \"[\", \"[^\" ) + \"*(?!/)\" +\n    \")|))*\" + pspace + \"*\",\n\n  // Trailing content of a close tag\n  pcloseTail = \"(?:\" + pspace + panything + \"|)\",\n\n  rspecialHtml = new RegExp(\n    // Non-void element that self-closes: –$5\n    \"(<)(?!\" + pvoidName + \")(\" + pname + \")(\" + pattrs + \")(\\\\/)(>)|\" +\n      // No-innerHTML container (element, comment, or CDATA): $6\n      \"(<(script|style|textarea)\" + pattrs + \">\" + panything + \"<\\\\/\\\\7\" + pcloseTail + \">|\" +\n      \"<!--\" + panything + \"--)\",\n    \"gi\"\n  ),\n\n  // \"<\"; element name; attributes; \">\"; \"<\"; \"/\"; element name; \">\"; no-innerHTML container\n  pspecialReplacement = \"$2$3$5$4$2$5$6\";\n\n$.htmlPrefilter = function( html ) {   return ( html + \"\" ).replace( rspecialHtml, pspecialReplacement );\n};"
          }
        ]
      },
      "category": {
        "slug": "manipulation"
      }
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.inArray",
      "return": "Number",
      "title": "jQuery.inArray()",
      "signature": {
        "added": "1.2",
        "argument": [
          {
            "name": "value",
            "type": "Anything",
            "desc": "The value to search for."
          },
          {
            "name": "array",
            "type": "Array",
            "desc": "An array through which to search."
          },
          {
            "name": "fromIndex",
            "type": "Number",
            "optional": "true",
            "desc":
              "The index of the array at which to begin the search. The default is 0, which will search the whole array."
          }
        ]
      },
      "desc":
        "Search for a specified value within an array and return its index (or -1 if not found).",
      "longdesc": {
        "p": [
          {
            "code": ["$.inArray()", ".indexOf()", "value", "$.inArray()"]
          },
          {
            "code": ["value", "array"]
          },
          {
            "code": "-1"
          }
        ],
        "pre": {
          "code": "$.inArray( 5 + 5, [ \"8\", \"9\", \"10\", 10 + \"\" ] );"
        }
      },
      "example": {
        "desc": "Report the index of some elements in the array.",
        "code":
          "var arr = [ 4, \"Pete\", 8, \"John\" ];\nvar $spans = $( \"span\" );\n$spans.eq( 0 ).text( jQuery.inArray( \"John\", arr ) );\n$spans.eq( 1 ).text( jQuery.inArray( 4, arr ) );\n$spans.eq( 2 ).text( jQuery.inArray( \"Karl\", arr ) );\n$spans.eq( 3 ).text( jQuery.inArray( \"Pete\", arr, 2 ) );",
        "css": "div {     color: blue;\n  }\n  span {     color: red;\n  }",
        "html":
          "<div>\"John\" found at <span></span></div>\n<div>4 found at <span></span></div>\n<div>\"Karl\" not found, so <span></span></div>\n<div>\"Pete\" is in the array, but not at or after index 2, so <span></span></div>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isArray",
      "return": "boolean",
      "title": "jQuery.isArray()",
      "signature": {
        "added": "1.3",
        "argument": {
          "name": "obj",
          "type": "Object",
          "desc": "Object to test whether or not it is an array."
        }
      },
      "desc": "Determine whether the argument is an array.",
      "longdesc": {
        "p": {
          "code": "$.isArray()"
        }
      },
      "example": {
        "desc": "Finds out if the parameter is an array.",
        "code": "$( \"b\" ).append( \"\" + $.isArray([]) );",
        "html": "Is [] an Array? <b></b>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isEmptyObject",
      "return": "Boolean",
      "title": "jQuery.isEmptyObject()",
      "signature": {
        "added": "1.4",
        "argument": {
          "name": "object",
          "type": "Object",
          "desc": "The object that will be checked to see if it's empty."
        }
      },
      "desc":
        "Check to see if an object is empty (contains no enumerable properties).",
      "longdesc": {
        "p": {
          "code": "Object",
          "a": {
            "href": "/jQuery.isPlainObject/",
            "code": "$.isPlainObject()"
          }
        }
      },
      "example": {
        "desc": "Check an object to see if it's empty.",
        "code":
          "jQuery.isEmptyObject({ }); // true\njQuery.isEmptyObject({ foo: \"bar\" }); // false"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isFunction",
      "return": "boolean",
      "title": "jQuery.isFunction()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "obj",
          "type": "PlainObject",
          "desc": "Object to test whether or not it is a function."
        }
      },
      "desc":
        "Determine if the argument passed is a JavaScript function object.",
      "longdesc": {
        "p": {
          "strong": "Note:",
          "code": ["alert()", "getAttribute()"]
        }
      },
      "example": [
        {
          "desc": "Test a few parameter examples.",
          "code":
            "function stub() { }\nvar objs = [\n  function() { },\n  { x:15, y:20 },\n  null,\n  stub,\n  \"function\"\n];\n\njQuery.each( objs, function( i ) {   var isFunc = jQuery.isFunction( objs[ i ]);\n  $( \"span\" ).eq( i ).text( isFunc );\n});",
          "css":
            "div {     color: blue;\n    margin: 2px;\n    font-size: 14px;\n  }\n  span {     color: red;\n  }",
          "html":
            "<div>jQuery.isFunction( objs[ 0 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 1 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 2 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 3 ] ) = <span></span></div>\n<div>jQuery.isFunction( objs[ 4 ] ) = <span></span></div>"
        },
        {
          "desc": "Finds out if the parameter is a function.",
          "code": "$.isFunction(function() { });",
          "results": "true"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isNumeric",
      "return": "Boolean",
      "title": "jQuery.isNumeric()",
      "desc": "Determines whether its argument represents a JavaScript number.",
      "signature": {
        "added": "1.7",
        "argument": {
          "name": "value",
          "type": "Anything",
          "desc": "The value to be tested."
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ["$.isNumeric()", "true", "false"]
          },
          {
            "code": ["$.isNumeric()", "true", "string", "false"],
            "a": {
              "href": "/Types/#Number",
              "code": "number"
            }
          }
        ]
      },
      "example": {
        "desc": "Sample return values of $.isNumeric with various inputs.",
        "code":
          "// true (numeric)\n$.isNumeric( \"-10\" )\n$.isNumeric( \"0\" )\n$.isNumeric( 0xFF )\n$.isNumeric( \"0xFF\" )\n$.isNumeric( \"8e5\" )\n$.isNumeric( \"3.1415\" )\n$.isNumeric( +10 )\n$.isNumeric( 0144 )\n\n// false (non-numeric)\n$.isNumeric( \"-0x42\" )\n$.isNumeric( \"7.2acdgs\" )\n$.isNumeric( \"\" )\n$.isNumeric( { } )\n$.isNumeric( NaN )\n$.isNumeric( null )\n$.isNumeric( true )\n$.isNumeric( Infinity )\n$.isNumeric( undefined )"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isPlainObject",
      "return": "Boolean",
      "title": "jQuery.isPlainObject()",
      "signature": {
        "added": "1.4",
        "argument": {
          "name": "object",
          "type": "PlainObject",
          "desc":
            "The object that will be checked to see if it's a plain object."
        }
      },
      "desc":
        "Check to see if an object is a plain object (created using \"{ }\" or \"new Object\").",
      "longdesc": {
        "p": [
          {
            "strong": "Note:",
            "code": "$.isPlainObject()"
          },
          {
            "code": ["document.location", "$.isPlainObject()"]
          },
          {
            "code": "$.isPlainObject()"
          }
        ],
        "pre": {
          "code": "console.log( $.isPlainObject( document.location ) );"
        }
      },
      "example": {
        "desc": "Check an object to see if it's a plain object.",
        "code":
          "jQuery.isPlainObject({ }) // true\njQuery.isPlainObject( \"test\" ) // false"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isWindow",
      "return": "boolean",
      "title": "jQuery.isWindow()",
      "signature": {
        "added": "1.4.3",
        "argument": {
          "name": "obj",
          "type": "PlainObject",
          "desc": "Object to test whether or not it is a window."
        }
      },
      "desc": "Determine whether the argument is a window.",
      "longdesc": {
        "p":
          "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe)."
      },
      "example": {
        "desc": "Finds out if the parameter is a window.",
        "code": "$( \"b\" ).append( \"\" + $.isWindow( window ) );",
        "html": "Is 'window' a window? <b></b>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.isXMLDoc",
      "return": "Boolean",
      "title": "jQuery.isXMLDoc()",
      "signature": {
        "added": "1.1.4",
        "argument": {
          "name": "node",
          "type": "Element",
          "desc":
            "The DOM node that will be checked to see if it's in an XML document."
        }
      },
      "desc":
        "Check to see if a DOM node is within an XML document (or is an XML document).",
      "longdesc": {},
      "example": {
        "desc": "Check an object to see if it's in an XML document.",
        "code":
          "jQuery.isXMLDoc( document ) // false\njQuery.isXMLDoc( document.body ) // false"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.makeArray",
      "return": "Array",
      "title": "jQuery.makeArray()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "obj",
          "type": "PlainObject",
          "desc": "Any object to turn into a native Array."
        }
      },
      "desc": "Convert an array-like object into a true JavaScript array.",
      "longdesc": {
        "p": [
          {
            "code": ["$()", "[]", ".pop()", ".reverse()"]
          },
          "Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array."
        ]
      },
      "example": [
        {
          "desc": "Turn a collection of HTMLElements into an Array of them.",
          "code":
            "// Returns a NodeList\nvar elems = document.getElementsByTagName( \"div\" );\n// Convert the NodeList to an Array\nvar arr = jQuery.makeArray( elems );\n// Use an Array method on list of dom elements\narr.reverse();\n$( arr ).appendTo( document.body );",
          "css": "div {     color: red;\n  }",
          "html":
            "<div>First</div>\n<div>Second</div>\n<div>Third</div>\n<div>Fourth</div>"
        },
        {
          "desc": "Turn a jQuery object into an array",
          "code": "var obj = $( \"li\" );\nvar arr = $.makeArray( obj );",
          "results":
            "( typeof obj === \"object\" && obj.jquery ) === true;\njQuery.isArray( arr ) === true;"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.map",
      "return": "Array",
      "title": "jQuery.map()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "array",
              "type": "Array",
              "desc": "The Array to translate."
            },
            {
              "name": "callback",
              "type": "Function",
              "argument": [
                {
                  "name": "elementOfArray",
                  "type": "Object"
                },
                {
                  "name": "indexInArray",
                  "type": "Integer"
                }
              ],
              "return": {
                "type": "Object"
              },
              "desc": {
                "code": "this"
              }
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "object",
              "type": "Object",
              "desc": "The Object to translate."
            },
            {
              "name": "callback",
              "type": "Function",
              "argument": [
                {
                  "name": "propertyOfObject",
                  "type": "Object"
                },
                {
                  "name": "key",
                  "type": "String"
                }
              ],
              "return": {
                "type": "Object"
              },
              "desc": {
                "code": "this"
              }
            }
          ]
        }
      ],
      "desc":
        "Translate all items in an array or object to new array of items.",
      "longdesc": {
        "p": [
          {
            "code": "$('div').map( callback );",
            "a": {
              "href": "/map/",
              "$t": ".map()"
            }
          },
          {
            "code": ["$.map()", "$.map()"],
            "strong": ["Prior to jQuery 1.6", "As of jQuery 1.6"],
            "em": "arrays only"
          },
          {
            "code": [".length", ".length - 1", "$.map()"],
            "em": "and",
            "a": {
              "href": "/jQuery.makeArray/",
              "$t": "$.makeArray()"
            }
          },
          "The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.",
          "The function can return:"
        ],
        "pre": {
          "code":
            "// The following object masquerades as an array.\nvar fakeArray = { \"length\": 2, 0: \"Addy\", 1: \"Subtracty\" };\n\n// Therefore, convert it to a real array\nvar realArray = $.makeArray( fakeArray )\n\n// Now it can be used reliably with $.map()\n$.map( realArray, function( val, i ) {   // Do something\n});"
        },
        "ul": {
          "li": [
            "the translated value, which will be mapped to the resulting array",
            {
              "code": ["null", "undefined"]
            },
            "an array of values, which will be flattened into the full array"
          ]
        }
      },
      "example": [
        {
          "desc": "Use $.map() to change the values of an array.",
          "code":
            "var arr = [ \"a\", \"b\", \"c\", \"d\", \"e\" ];\n$( \"div\" ).text( arr.join( \", \" ) );\n\narr = jQuery.map( arr, function( n, i ) {   return ( n.toUpperCase() + i );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n\narr = jQuery.map( arr, function( a ) {   return a + a;\n});\n$( \"span\" ).text( arr.join( \", \" ) );",
          "css":
            "div {     color: blue;\n  }\n  p {     color: green;\n    margin: 0;\n  }\n  span {     color: red;\n  }",
          "html": "<div></div>\n<p></p>\n<span></span>"
        },
        {
          "desc":
            "Map the original array to a new one and add 4 to each value.",
          "code": "$.map( [ 0, 1, 2 ], function( n ) {   return n + 4;\n});",
          "results": "[4, 5, 6]"
        },
        {
          "desc":
            "Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.",
          "code":
            "$.map( [ 0, 1, 2 ], function( n ) {   return n > 0 ? n + 1 : null;\n});",
          "results": "[ 2, 3 ]"
        },
        {
          "desc":
            "Map the original array to a new one; each element is added with its original value and the value plus one.",
          "code":
            "$.map( [ 0, 1, 2 ], function( n ) {     return [ n, n + 1 ];\n});",
          "results": "[ 0, 1, 1, 2, 2, 3 ]"
        },
        {
          "desc":
            "Map the original object to a new array and double each value.",
          "code":
            "var dimensions = { width: 10, height: 15, length: 20 };\ndimensions = $.map( dimensions, function( value, index ) {   return value * 2;\n});",
          "results": "[ 20, 30, 40 ]"
        },
        {
          "desc": "Map an object's keys to an array.",
          "code":
            "var dimensions = { width: 10, height: 15, length: 20 };\nvar keys = $.map( dimensions, function( value, key ) {   return key;\n});",
          "results": "[ \"width\", \"height\", \"length\" ]"
        },
        {
          "desc":
            "Map the original array to a new one; each element is squared.",
          "code": "$.map( [ 0, 1, 2, 3 ], function( a ) {   return a * a;\n});",
          "results": "[ 0, 1, 4, 9 ]"
        },
        {
          "desc": {
            "code": "null"
          },
          "code":
            "$.map( [ 0, 1, 52, 97 ], function( a ) {   return (a > 50 ? a - 45 : null);\n});",
          "results": "[ 7, 52 ]"
        },
        {
          "desc":
            "Augment the resulting array by returning an array inside the function.",
          "code":
            "var array = [ 0, 1, 52, 97 ];\narray = $.map( array, function( a, index ) {   return [ a - 45, index ];\n});",
          "results": "[ -45, 0, -44, 1, 7, 2, 52, 3]"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.merge",
      "return": "Array",
      "title": "jQuery.merge()",
      "desc": "Merge the contents of two arrays together into the first array.",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "first",
            "type": "ArrayLikeObject",
            "desc":
              "The first array-like object to merge, the elements of second added."
          },
          {
            "name": "second",
            "type": "ArrayLikeObject",
            "desc":
              "The second array-like object to merge into the first, unaltered."
          }
        ]
      },
      "longdesc": {
        "p": [
          {
            "code": ["$.merge()", "$.merge()", "length"]
          },
          {
            "code": ["$.merge()", "$.merge()"]
          },
          "This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.",
          {
            "code": "$.makeArray"
          }
        ],
        "pre": {
          "code": "var newArray = $.merge([], oldArray);"
        }
      },
      "example": [
        {
          "desc": "Merges two arrays, altering the first argument.",
          "code": "$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )",
          "results": "[ 0, 1, 2, 2, 3, 4 ]"
        },
        {
          "desc": "Merges two arrays, altering the first argument.",
          "code": "$.merge( [ 3, 2, 1 ], [ 4, 3, 2 ] )",
          "results": "[ 3, 2, 1, 4, 3, 2 ]"
        },
        {
          "desc":
            "Merges two arrays, but uses a copy, so the original isn't altered.",
          "code":
            "var first = [ \"a\", \"b\", \"c\" ];\nvar second = [ \"d\", \"e\", \"f\" ];\n$.merge( $.merge( [], first ), second );",
          "results": "[ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]"
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.noConflict",
      "return": "Object",
      "title": "jQuery.noConflict()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "removeAll",
          "type": "Boolean",
          "optional": "true",
          "desc":
            "A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself)."
        }
      },
      "desc": {
        "code": "$"
      },
      "longdesc": {
        "p": [
          {
            "code": [
              "$",
              "$",
              "jQuery",
              "$",
              "$",
              "$.noConflict()",
              "$",
              "noConflict()"
            ]
          },
          {
            "code": "$.noConflict( true )"
          },
          {
            "code": [".ready()", ".ready()", "$"]
          },
          {
            "code": ["jQuery", "true", "jQuery"]
          }
        ],
        "pre": [
          {
            "code":
              "<script src=\"other_lib.js\"></script>\n<script src=\"jquery.js\"></script>\n<script>\n$.noConflict();\n// Code that uses other library's $ can follow here.\n</script>"
          },
          {
            "code":
              "<script src=\"other_lib.js\"></script>\n<script src=\"jquery.js\"></script>\n<script>\n$.noConflict();\njQuery( document ).ready(function( $ ) {   // Code that uses jQuery's $ can follow here.\n});\n// Code that uses other library's $ can follow here.\n</script>"
          }
        ]
      },
      "example": [
        {
          "desc": "Map the original object that was referenced by $ back to $.",
          "code":
            "jQuery.noConflict();\n// Do something with jQuery\njQuery( \"div p\" ).hide();\n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";"
        },
        {
          "desc":
            "Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.",
          "code":
            "jQuery.noConflict();\n(function( $ ) {   $(function() {     // More code using $ as alias to jQuery\n  });\n})(jQuery);\n\n// Other code using $ as an alias to the other library"
        },
        {
          "desc":
            "Create a different alias instead of jQuery to use in the rest of the script.",
          "code":
            "var j = jQuery.noConflict();\n\n// Do something with jQuery\nj( \"div p\" ).hide();\n\n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";"
        },
        {
          "desc":
            "Completely move jQuery to a new namespace in another object.",
          "code": "var dom = { };\ndom.query = jQuery.noConflict( true );",
          "results":
            "// Do something with the new jQuery\ndom.query( \"div p\" ).hide();\n\n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";\n\n// Do something with another version of jQuery\njQuery( \"div > p\" ).hide();"
        },
        {
          "desc":
            "Load two versions of jQuery (not recommended). Then, restore jQuery's globally scoped variables to the first loaded jQuery.",
          "html":
            "<div id=\"log\">\n  <h3>Before $.noConflict(true)</h3>\n</div>\n<script src=\"https://code.jquery.com/jquery-1.6.2.js\"></script>",
          "code":
            "var $log = $( \"#log\" );\n\n$log.append( \"2nd loaded jQuery version ($): \" + $.fn.jquery + \"<br>\" );\n\n// Restore globally scoped jQuery variables to the first version loaded\n// (the newer version)\n\njq162 = jQuery.noConflict( true );\n\n$log.append( \"<h3>After $.noConflict(true)</h3>\" );\n$log.append( \"1st loaded jQuery version ($): \" + $.fn.jquery + \"<br>\" );\n$log.append( \"2nd loaded jQuery version (jq162): \" + jq162.fn.jquery + \"<br>\" );"
        }
      ],
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "miscellaneous/setup-methods"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.noop",
      "return": "undefined",
      "title": "jQuery.noop()",
      "signature": {
        "added": "1.4"
      },
      "desc": "An empty function.",
      "longdesc": {
        "p": [
          "You can use this empty function when you wish to pass around a function that will do nothing.",
          {
            "code": "jQuery.noop"
          }
        ]
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.now",
      "return": "Number",
      "title": "jQuery.now()",
      "signature": {
        "added": "1.4.3"
      },
      "desc": "Return a number representing the current time.",
      "longdesc": {
        "p": {
          "code": ["$.now()", "(new Date).getTime()"]
        }
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.param",
      "return": "String",
      "title": "jQuery.param()",
      "signature": [
        {
          "added": "1.2",
          "argument": {
            "name": "obj",
            "type": [
              {
                "name": "Array"
              },
              {
                "name": "PlainObject"
              },
              {
                "name": "jQuery"
              }
            ],
            "desc": "An array, a plain object, or a jQuery object to serialize."
          }
        },
        {
          "added": "1.4",
          "argument": [
            {
              "name": "obj",
              "type": [
                {
                  "name": "Array"
                },
                {
                  "name": "PlainObject"
                },
                {
                  "name": "jQuery"
                }
              ],
              "desc":
                "An array, a plain object, or a jQuery object to serialize."
            },
            {
              "name": "traditional",
              "type": "Boolean",
              "desc":
                "A Boolean indicating whether to perform a traditional \"shallow\" serialization."
            }
          ]
        }
      ],
      "desc":
        "Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.",
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/serialize/",
              "$t": ".serialize()"
            }
          },
          "As of jQuery 1.3, the return value of a function is used instead of the function as a String.",
          {
            "code": ["$.param()", "jQuery.ajaxSettings.traditional = true;"]
          },
          {
            "code": [
              "$.param()",
              "jQuery.ajaxSettings.traditional",
              "false",
              "$.param()"
            ]
          },
          {
            "a": {
              "href": "/serializeArray/",
              "$t": ".serializeArray()"
            }
          },
          "In jQuery 1.4, HTML5 input elements are also serialized.",
          "We can display a query string representation of an object and a URI-decoded version of the same as follows:",
          {
            "code": ["recursiveEncoded", "recursiveDecoded"]
          },
          {
            "samp": [
              "a%5Bone%5D=1&a%5Btwo%5D=2&a%5Bthree%5D=3&b%5B%5D=1&b%5B%5D=2&b%5B%5D=3",
              "a[one]=1&a[two]=2&a[three]=3&b[]=1&b[]=2&b[]=3"
            ],
            "br": {}
          },
          {
            "code": ["$.param()", "traditional", "true"]
          },
          {
            "code": ["shallowEncoded", "shallowDecoded"]
          },
          {
            "samp": [
              "a=%5Bobject+Object%5D&b=1&b=2&b=3",
              "a=[object+Object]&b=1&b=2&b=3"
            ],
            "br": {}
          }
        ],
        "pre": [
          {
            "code":
              "[\n  { name: \"first\", value: \"Rick\" },\n  { name: \"last\", value: \"Astley\" },\n  { name: \"job\", value: \"Rock Star\" }\n]"
          },
          {
            "code":
              "var myObject = {   a: {     one: 1,\n    two: 2,\n    three: 3\n  },\n  b: [ 1, 2, 3 ]\n};\nvar recursiveEncoded = $.param( myObject );\nvar recursiveDecoded = decodeURIComponent( $.param( myObject ) );\n\nalert( recursiveEncoded );\nalert( recursiveDecoded );"
          },
          {
            "code":
              "var myObject = {   a: {     one: 1,\n    two: 2,\n    three: 3\n  },\n  b: [ 1, 2, 3 ]\n};\nvar shallowEncoded = $.param( myObject, true );\nvar shallowDecoded = decodeURIComponent( shallowEncoded );\n\nalert( shallowEncoded );\nalert( shallowDecoded );"
          }
        ],
        "div": [
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": "obj"
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Serialize a key/value object.",
          "code":
            "var params = { width:1680, height:1050 };\nvar str = jQuery.param( params );\n$( \"#results\" ).text( str );",
          "css": "div {     color: red;\n  }",
          "html": "<div id=\"results\"></div>"
        },
        {
          "desc": "Serialize a few complex objects",
          "code":
            "// <=1.3.2:\n$.param({ a: [ 2, 3, 4 ] }); // \"a=2&a=3&a=4\"\n// >=1.4:\n$.param({ a: [ 2, 3, 4 ] }); // \"a[]=2&a[]=3&a[]=4\"\n\n// <=1.3.2:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// \"a=[object+Object]&d=3&d=4&d=[object+Object]\"\n\n// >=1.4:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// \"a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5\"",
          "css": "div {     color: red;\n  }"
        }
      ],
      "category": [
        {
          "slug": "miscellaneous/collection-manipulation"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "ajax/helper-functions"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.parseHTML",
      "return": "Array",
      "title": "jQuery.parseHTML()",
      "desc": "Parses a string into an array of DOM nodes.",
      "signature": {
        "added": "1.8",
        "argument": [
          {
            "name": "data",
            "type": "String",
            "desc": "HTML string to be parsed"
          },
          {
            "name": "context",
            "type": "Element",
            "optional": "true",
            "default": "document",
            "desc":
              "Document element to serve as the context in which the HTML fragment will be created"
          },
          {
            "name": "keepScripts",
            "type": "Boolean",
            "optional": "true",
            "default": "false",
            "desc":
              "A Boolean indicating whether to include scripts passed in the HTML string"
          }
        ]
      },
      "longdesc": {
        "p": [
          {
            "code": "jQuery.parseHTML",
            "a": {
              "href": "/jQuery.trim/",
              "code": "jQuery.trim"
            }
          },
          {
            "code": ["context", "document", "null", "undefined"]
          },
          {
            "code": [
              "context",
              "null",
              "undefined",
              "document",
              "jQuery.parseHTML",
              "document",
              "$( \"#log\" ).append( $( htmlString ) )"
            ]
          },
          {
            "code": [
              "jQuery.parseHTML",
              "keepScripts",
              "true",
              "<img onerror>",
              "keepScripts",
              "false"
            ],
            "em": "any"
          }
        ],
        "h2": "Security Considerations"
      },
      "example": {
        "desc":
          "Create an array of DOM nodes using an HTML string and insert it into a div.",
        "html": "<div id=\"log\">\n  <h3>Content:</h3>\n</div>",
        "code":
          "var $log = $( \"#log\" ),\n  str = \"hello, <b>my name is</b> jQuery.\",\n  html = $.parseHTML( str ),\n  nodeNames = [];\n\n// Append the parsed HTML\n$log.append( html );\n\n// Gather the parsed HTML's node names\n$.each( html, function( i, el ) {   nodeNames[ i ] = \"<li>\" + el.nodeName + \"</li>\";\n});\n\n// Insert the node names\n$log.append( \"<h3>Node Names:</h3>\" );\n$( \"<ol></ol>\" )\n  .append( nodeNames.join( \"\" ) )\n  .appendTo( $log );"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.8"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.parseJSON",
      "deprecated": "3.0",
      "return": [
        {
          "type": "String"
        },
        {
          "type": "Number"
        },
        {
          "type": "Object"
        },
        {
          "type": "Array"
        },
        {
          "type": "Boolean"
        }
      ],
      "title": "jQuery.parseJSON()",
      "signature": {
        "added": "1.4.1",
        "argument": {
          "name": "json",
          "type": "String",
          "desc": "The JSON string to parse."
        }
      },
      "desc":
        "Takes a well-formed JSON string and returns the resulting JavaScript value.",
      "longdesc": {
        "p": [
          {
            "code": ["$.parseJSON", "JSON.parse"]
          },
          "Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:",
          {
            "code": [
              "$.parseJSON( '{ \"testing\":\"1\\t2\\n3\" }' )",
              "\"1\\\\t2\\\\n3\""
            ]
          },
          {
            "code": "JSON.parse",
            "a": {
              "href": "http://json.org/",
              "$t": "http://json.org/"
            }
          },
          {
            "code": ["$.parseJSON", "null", "null", "undefined"]
          }
        ],
        "ul": {
          "li": [
            {
              "code": "\"{ test: 1}\""
            },
            {
              "code": "\"{ 'test': 1}\""
            },
            {
              "code": "\"'test'\""
            },
            {
              "code": ["\".1\"", "\"0.1\""]
            },
            {
              "code": ["\"undefined\"", "undefined", "null"]
            },
            {
              "code": ["\"NaN\"", "NaN", "Infinity"]
            }
          ]
        }
      },
      "example": {
        "desc": "Parse a JSON string.",
        "code":
          "var obj = jQuery.parseJSON( '{ \"name\": \"John\" }' );\nalert( obj.name === \"John\" );"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.parseXML",
      "return": "XMLDocument",
      "title": "jQuery.parseXML()",
      "desc": "Parses a string into an XML document.",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "data",
          "type": "String",
          "desc": "a well-formed XML string to be parsed"
        }
      },
      "longdesc": {
        "p": {
          "code": ["jQuery.parseXML", "jQuery"]
        }
      },
      "example": {
        "desc":
          "Create a jQuery object using an XML string and obtain the value of the title node.",
        "html": "<p id=\"someElement\"></p>\n<p id=\"anotherElement\"></p>",
        "code":
          "var xml = \"<rss version='2.0'><channel><title>RSS Title</title></channel></rss>\",\n  xmlDoc = $.parseXML( xml ),\n  $xml = $( xmlDoc ),\n  $title = $xml.find( \"title\" );\n\n// Append \"RSS Title\" to #someElement\n$( \"#someElement\" ).append( $title.text() );\n\n// Change the title to \"XML Title\"\n$title.text( \"XML Title\" );\n\n// Append \"XML Title\" to #anotherElement\n$( \"#anotherElement\" ).append( $title.text() );"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.post",
      "return": "jqXHR",
      "title": "jQuery.post()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "url",
              "type": "String",
              "desc":
                "A string containing the URL to which the request is sent."
            },
            {
              "name": "data",
              "optional": "true",
              "type": [
                {
                  "name": "PlainObject"
                },
                {
                  "name": "String"
                }
              ],
              "desc":
                "A plain object or string that is sent to the server with the request."
            },
            {
              "name": "success",
              "optional": "true",
              "type": "Function",
              "argument": [
                {
                  "name": "data",
                  "type": "PlainObject"
                },
                {
                  "name": "textStatus",
                  "type": "String"
                },
                {
                  "name": "jqXHR",
                  "type": "jqXHR"
                }
              ],
              "desc": {
                "code": ["dataType", "null"]
              }
            },
            {
              "name": "dataType",
              "optional": "true",
              "type": "String",
              "desc":
                "The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html)."
            }
          ]
        },
        {
          "added": "1.12/2.2",
          "argument": {
            "name": "settings",
            "type": "PlainObject",
            "optional": "false",
            "desc": {
              "code": ["url", "POST"],
              "a": [
                {
                  "href": "/jQuery.ajaxSetup/",
                  "$t": "$.ajaxSetup()"
                },
                {
                  "href": "/jquery.ajax/#jQuery-ajax-settings",
                  "$t": "jQuery.ajax( settings )"
                }
              ]
            }
          }
        }
      ],
      "desc": "Load data from the server using a HTTP POST request.",
      "longdesc": {
        "p": [
          "This is a shorthand Ajax function, which is equivalent to:",
          {
            "code": "success"
          },
          {
            "strong": ["As of jQuery 1.5", "jQuery 1.4"],
            "code": ["success", "XMLHttpRequest"],
            "a": {
              "href": "#jqxhr-object",
              "$t": "\"jqXHR\" object"
            }
          },
          "Most implementations will specify a success handler:",
          "This example fetches the requested HTML snippet and inserts it on the page.",
          {
            "code": [
              "POST",
              "cache",
              "ifModified",
              {
                "a": {
                  "href": "/jQuery.ajaxSetup/",
                  "$t": "jQuery.ajaxSetup()"
                }
              }
            ]
          },
          {
            "strong": "As of jQuery 1.5",
            "code": [
              "XMLHTTPRequest",
              "$.get()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()",
              "$.ajax()"
            ],
            "a": [
              {
                "href": "/category/deferred-object/",
                "$t": "Deferred object"
              },
              {
                "href": "/jQuery.ajax/#jqXHR",
                "$t": "jqXHR Object"
              }
            ]
          },
          {
            "code": ["$.get()", ".done()", ".fail()", ".always()"]
          },
          {
            "code": [
              "jqXHR.success()",
              "jqXHR.error()",
              "jqXHR.complete()",
              "jqXHR.done()",
              "jqXHR.fail()",
              "jqXHR.always()"
            ],
            "strong": "removed as of jQuery 3.0"
          }
        ],
        "pre": [
          {
            "code":
              "$.ajax({   type: \"POST\",\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});"
          },
          {
            "code":
              "$.post( \"ajax/test.html\", function( data ) {   $( \".result\" ).html( data );\n});"
          },
          {
            "code":
              "// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.post( \"example.php\", function() {   alert( \"success\" );\n})\n  .done(function() {     alert( \"second success\" );\n  })\n  .fail(function() {     alert( \"error\" );\n  })\n  .always(function() {     alert( \"finished\" );\n  });\n\n// Perform other work here ...\n\n// Set another completion function for the request above\njqxhr.always(function() {   alert( \"second finished\" );\n});"
          }
        ],
        "h4": [
          {
            "id": "jqxhr-object",
            "$t": "The jqXHR Object"
          },
          "Deprecation Notice"
        ]
      },
      "note": [
        {
          "id": "same-origin-policy",
          "type": "additional"
        },
        {
          "id": "use-ajaxerror",
          "type": "additional",
          "data-title": "jQuery.post()"
        }
      ],
      "example": [
        {
          "desc": "Request the test.php page, but ignore the return results.",
          "code": "$.post( \"test.php\" );"
        },
        {
          "desc":
            "Request the test.php page and send some additional data along (while still ignoring the return results).",
          "code": "$.post( \"test.php\", { name: \"John\", time: \"2pm\" } );"
        },
        {
          "desc":
            "Pass arrays of data to the server (while still ignoring the return results).",
          "code":
            "$.post( \"test.php\", { 'choices[]': [ \"Jon\", \"Susan\" ] } );"
        },
        {
          "desc": "Send form data using Ajax requests",
          "code": "$.post( \"test.php\", $( \"#testform\" ).serialize() );"
        },
        {
          "desc":
            "Alert the results from requesting test.php (HTML or XML, depending on what was returned).",
          "code":
            "$.post( \"test.php\", function( data ) {   alert( \"Data Loaded: \" + data );\n});"
        },
        {
          "desc":
            "Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).",
          "code":
            "$.post( \"test.php\", { name: \"John\", time: \"2pm\" })\n  .done(function( data ) {     alert( \"Data Loaded: \" + data );\n  });"
        },
        {
          "desc":
            "Post to the test.php page and get content which has been returned in json format (<?php echo json_encode(array(\"name\"=>\"John\",\"time\"=>\"2pm\")); ?>).",
          "code":
            "$.post( \"test.php\", { func: \"getNameAndTime\" }, function( data ) {   console.log( data.name ); // John\n  console.log( data.time ); // 2pm\n}, \"json\");"
        },
        {
          "desc": "Post a form using Ajax and put results in a div",
          "code":
            "// Attach a submit handler to the form\n$( \"#searchForm\" ).submit(function( event ) { \n  // Stop form from submitting normally\n  event.preventDefault();\n\n  // Get some values from elements on the page:\n  var $form = $( this ),\n    term = $form.find( \"input[name='s']\" ).val(),\n    url = $form.attr( \"action\" );\n\n  // Send the data using post\n  var posting = $.post( url, { s: term } );\n\n  // Put the results in a div\n  posting.done(function( data ) {     var content = $( data ).find( \"#content\" );\n    $( \"#result\" ).empty().append( content );\n  });\n});",
          "html":
            "<form action=\"/\" id=\"searchForm\">\n  <input type=\"text\" name=\"s\" placeholder=\"Search...\">\n  <input type=\"submit\" value=\"Search\">\n</form>\n<!-- the result of the search will be rendered inside this div -->\n<div id=\"result\"></div>"
        }
      ],
      "category": [
        {
          "slug": "ajax/shorthand-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.proxy",
      "return": "Function",
      "title": "jQuery.proxy()",
      "signature": [
        {
          "added": "1.4",
          "argument": [
            {
              "name": "function",
              "type": "Function",
              "desc": "The function whose context will be changed."
            },
            {
              "name": "context",
              "type": "PlainObject",
              "desc": {
                "code": "this"
              }
            }
          ]
        },
        {
          "added": "1.4",
          "argument": [
            {
              "name": "context",
              "type": "PlainObject",
              "desc":
                "The object to which the context of the function should be set."
            },
            {
              "name": "name",
              "type": "String",
              "desc": {
                "code": "context"
              }
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "function",
              "type": "Function",
              "desc": "The function whose context will be changed."
            },
            {
              "name": "context",
              "type": "PlainObject",
              "desc": {
                "code": "this"
              }
            },
            {
              "name": "additionalArguments",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "code": "function"
              }
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "context",
              "type": "PlainObject",
              "desc":
                "The object to which the context of the function should be set."
            },
            {
              "name": "name",
              "type": "String",
              "desc": {
                "code": "context"
              }
            },
            {
              "name": "additionalArguments",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "code": "name"
              }
            }
          ]
        }
      ],
      "desc":
        "Takes a function and returns a new one that will always have a particular context.",
      "longdesc": {
        "p": [
          {
            "code": "jQuery.proxy()"
          },
          {
            "code": ["jQuery.proxy()", "\"click.myproxy1\""]
          },
          {
            "strong": "As of jQuery 1.6",
            "code": "$.proxy()"
          },
          {
            "strong": "As of jQuery 1.9",
            "code": ["context", "null", "undefined", "this", "$.proxy()"]
          }
        ]
      },
      "example": [
        {
          "desc":
            "Change the context of functions bound to a click handler using the \"function, context\" signature. Unbind the first handler after first click.",
          "html":
            "<p><button type=\"button\" id=\"test\">Test</button></p>\n<div id=\"log\"></div>",
          "code":
            "var me = {   type: \"zombie\",\n  test: function( event ) {     // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( \"background-color\", \"red\" );\n\n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( \"#log\" ).append( \"Hello \" + this.type + \"<br>\" );\n    $( \"#test\" ).off( \"click\", this.test );\n  }\n};\n\nvar you = {   type: \"person\",\n  test: function( event ) {     $( \"#log\" ).append( this.type + \" \" );\n  }\n};\n\n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n\n// attach click handlers to #test\n$( \"#test\" )\n  // this === \"zombie\"; handler unbound after first click\n  .on( \"click\", $.proxy( me.test, me ) )\n\n  // this === \"person\"\n  .on( \"click\", youClick )\n\n  // this === \"zombie\"\n  .on( \"click\", $.proxy( you.test, me ) )\n\n  // this === \"<button> element\"\n  .on( \"click\", you.test );"
        },
        {
          "desc":
            "Enforce the context of the function using the \"context, function name\" signature. Unbind the handler after first click.",
          "html":
            "<p><button id=\"test\">Test</button></p>\n  <p id=\"log\"></p>",
          "code":
            "var obj = {   name: \"John\",\n  test: function() {     $( \"#log\" ).append( this.name );\n    $( \"#test\" ).off( \"click\", obj.test );\n  }\n};\n$( \"#test\" ).on( \"click\", jQuery.proxy( obj, \"test\" ) );"
        },
        {
          "desc":
            "Change the context of a function bound to the click handler,",
          "html":
            "<p><button type=\"button\" id=\"test\">Test</button></p>\n<div id=\"log\"></div>",
          "code":
            "var me = {   // I'm a dog\n  type: \"dog\",\n\n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {     $( \"#log\" )\n\n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( \"<h3>Hello \" + one.type + \":</h3>\" )\n\n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( \"I am a \" + this.type + \", \" )\n\n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( \"and they are \" + two.type + \".<br>\" )\n\n      // The event type is \"click\"\n      .append( \"Thanks for \" + event.type + \"ing.\" )\n\n      // The clicked element is `event.target`,\n      // and its type is \"button\"\n      .append( \"the \" + event.target.type + \".\" );\n  }\n};\n\nvar you = { type: \"cat\" };\nvar they = { type: \"fish\" };\n\n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n\n$( \"#test\" )\n  .on( \"click\", proxy );"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Show or manipulate the queue of functions to be executed on the matched element.",
      "entry": [
        {
          "type": "method",
          "name": "jQuery.queue",
          "return": "Array",
          "title": "jQuery.queue()",
          "signature": {
            "added": "1.3",
            "argument": [
              {
                "name": "element",
                "type": "Element",
                "desc": "A DOM element to inspect for an attached queue."
              },
              {
                "name": "queueName",
                "optional": "true",
                "type": "String",
                "desc": {
                  "code": "fx"
                }
              }
            ]
          },
          "desc":
            "Show the queue of functions to be executed on the matched element.",
          "longdesc": {
            "p": {
              "strong": "Note:",
              "code": {
                "a": {
                  "href": "/queue/",
                  "$t": ".queue()"
                }
              }
            }
          },
          "example": {
            "desc": "Show the length of the queue.",
            "code":
              "$( \"#show\" ).click(function() {   var n = jQuery.queue( $( \"div\" )[ 0 ], \"fx\" );\n  $( \"span\" ).text( \"Queue length is: \" + n.length );\n});\n\nfunction runIt() {   $( \"div\" )\n    .show( \"slow\" )\n    .animate({       left: \"+=200\"\n    }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( \"fast\" )\n    .animate({       left: \"-=200\"\n    }, 1500 )\n    .hide( \"slow\" )\n    .show( 1200 )\n    .slideUp( \"normal\", runIt );\n}\n\nrunIt();",
            "css":
              "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }\n  span {     color: red;\n  }",
            "html":
              "<button id=\"show\">Show Length of Queue</button>\n<span></span>\n<div></div>"
          },
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.3"
            }
          ]
        },
        {
          "type": "method",
          "name": "jQuery.queue",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.3",
              "argument": [
                {
                  "name": "element",
                  "type": "Element",
                  "desc":
                    "A DOM element where the array of queued functions is attached."
                },
                {
                  "name": "queueName",
                  "type": "String",
                  "desc": {
                    "code": "fx"
                  }
                },
                {
                  "name": "newQueue",
                  "type": "Array",
                  "desc":
                    "An array of functions to replace the current queue contents."
                }
              ]
            },
            {
              "added": "1.3",
              "argument": [
                {
                  "name": "element",
                  "type": "Element",
                  "desc": "A DOM element on which to add a queued function."
                },
                {
                  "name": "queueName",
                  "type": "String",
                  "desc": {
                    "code": "fx"
                  }
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "desc": "The new function to add to the queue."
                }
              ]
            }
          ],
          "desc":
            "Manipulate the queue of functions to be executed on the matched element.",
          "longdesc": {
            "p": [
              {
                "strong": "Note:",
                "code": {
                  "a": {
                    "href": "/queue/",
                    "$t": ".queue()"
                  }
                }
              },
              {
                "code": "fx"
              },
              {
                "code": ["jQuery.queue()", "jQuery.queue()"]
              },
              {
                "code": ["jQuery.queue()", "jQuery.dequeue()"]
              }
            ]
          },
          "example": [
            {
              "desc": "Queue a custom function.",
              "code":
                "$( document.body ).click(function() {   var divs = $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {     $( this ).addClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: \"-=200\" }, 500 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {     $( this ).removeClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});",
              "css":
                "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }",
              "html": "Click here...\n<div></div>"
            },
            {
              "desc": "Set a queue array to delete the queue.",
              "code":
                "$( \"#start\" ).click(function() {   var divs = $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 5000 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {     $( this ).addClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: \"-=200\" }, 1500 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {     $( this ).removeClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});\n$( \"#stop\" ).click(function() {   jQuery.queue( $( \"div\" )[ 0 ], \"fx\", [] );\n  $( \"div\" ).stop();\n});",
              "css":
                "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }",
              "html":
                "<button id=\"start\">Start</button>\n<button id=\"stop\">Stop</button>\n<div></div>"
            }
          ],
          "category": [
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.3"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.ready",
      "return": "Thenable",
      "title": "jQuery.ready",
      "desc":
        "A Promise-like object (or \"thenable\") that resolves when the document is ready.",
      "signature": {
        "added": "1.8"
      },
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/jQuery.when/",
                  "$t": "jQuery.when"
                }
              },
              "Promise.resolve()",
              "jQuery.Deferred"
            ]
          },
          {
            "code": {
              "a": {
                "href": "/ready/",
                "$t": "ready()"
              }
            }
          }
        ]
      },
      "example": [
        {
          "desc": {
            "code": {
              "a": {
                "href": "/jQuery.when/",
                "$t": "jQuery.when"
              }
            }
          },
          "code":
            "$.when( $.ready ).then(function() {   // Document is ready.\n});"
        },
        {
          "desc": {
            "code": {
              "a": {
                "href": "/jQuery.when/",
                "$t": "jQuery.when"
              }
            }
          },
          "code":
            "$.when(\n  $.getJSON( \"ajax/test.json\" ),\n  $.ready\n).done(function( data ) {   // Document is ready.\n  // Value of test.json is passed as `data`.\n});"
        }
      ],
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "properties/global-jquery-object-properties"
        },
        {
          "slug": "events/document-loading"
        },
        {
          "slug": "version/1.8"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.readyException",
      "return": "Selector",
      "title": "jQuery.readyException()",
      "desc": {
        "code": "jQuery()"
      },
      "signature": {
        "added": "3.1",
        "argument": {
          "name": "error",
          "type": "Error",
          "desc": {
            "code": "jQuery()"
          }
        }
      },
      "longdesc": {
        "p": {
          "code": ["jQuery()", "jQuery( document ).ready()", "window.onerror"]
        }
      },
      "example": {
        "desc": {
          "code": "console.error"
        },
        "code":
          "jQuery.readyException = function( error ) {   console.error( error );\n};"
      },
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "version/3.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.removeData",
      "return": "jQuery",
      "title": "jQuery.removeData()",
      "signature": {
        "added": "1.2.3",
        "argument": [
          {
            "name": "element",
            "type": "Element",
            "desc": "A DOM element from which to remove data."
          },
          {
            "name": "name",
            "type": "String",
            "optional": "true",
            "desc": "A string naming the piece of data to remove."
          }
        ]
      },
      "desc": "Remove a previously-stored piece of data.",
      "longdesc": {
        "p": [
          {
            "strong": "Note:",
            "code": {
              "a": {
                "href": "/removeData/",
                "$t": ".removeData()"
              }
            }
          },
          {
            "code": [
              "jQuery.removeData()",
              {
                "a": {
                  "href": "/jQuery.data/",
                  "$t": "jQuery.data()"
                }
              },
              "jQuery.removeData()"
            ]
          }
        ]
      },
      "example": {
        "desc": "Set a data store for 2 names then remove one of them.",
        "code":
          "var div = $( \"div\" )[ 0 ];\n$( \"span:eq(0)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\njQuery.data( div, \"test1\", \"VALUE-1\" );\njQuery.data( div, \"test2\", \"VALUE-2\" );\n$( \"span:eq(1)\" ).text( \"\" + jQuery.data( div, \"test1\" ) );\njQuery.removeData( div, \"test1\" );\n$( \"span:eq(2)\" ).text( \"\" + jQuery.data( div, \"test1\" ) );\n$( \"span:eq(3)\" ).text( \"\" + jQuery.data( div, \"test2\" ) );",
        "css":
          "div {     margin: 2px;\n    color: blue;\n  }\n  span {     color: red;\n  }",
        "html":
          "<div>value1 before creation: <span></span></div>\n<div>value1 after creation: <span></span></div>\n<div>value1 after removal: <span></span></div>\n<div>value2 after removal: <span></span></div>"
      },
      "category": [
        {
          "slug": "data"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.2.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.speed",
      "return": "PlainObject",
      "title": "jQuery.speed",
      "desc":
        "Creates an object containing a set of properties ready to be used in the definition of custom animations.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/duration-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          },
          "argument": {
            "name": "settings",
            "type": "PlainObject",
            "optional": "true",
            "property": [
              {
                "name": "easing",
                "type": "String",
                "default": "swing",
                "optional": "true",
                "desc":
                  "A string indicating which easing function to use for the transition."
              },
              {
                "name": "complete",
                "type": "Function",
                "optional": "true",
                "desc": "A function to call once the animation is complete."
              }
            ]
          }
        },
        {
          "added": "1.1",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.1",
          "argument": {
            "name": "settings",
            "type": "PlainObject",
            "property": [
              {
                "name": "duration",
                "default": "400",
                "optional": "true",
                "desc":
                  "A string or number determining how long the animation will run.",
                "type": [
                  {
                    "name": "Number"
                  },
                  {
                    "name": "String"
                  }
                ]
              },
              {
                "name": "easing",
                "type": "String",
                "default": "swing",
                "optional": "true",
                "desc":
                  "A string indicating which easing function to use for the transition."
              },
              {
                "name": "complete",
                "type": "Function",
                "optional": "true",
                "desc": "A function to call once the animation is complete."
              }
            ]
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ["$.speed()", "duration", "easing", "queue"]
          },
          {
            "code": ["$.speed()", ".addClass()"]
          }
        ]
      },
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.sub",
      "return": "jQuery",
      "deprecated": "1.7",
      "removed": "1.9",
      "title": "jQuery.sub()",
      "signature": {
        "added": "1.5"
      },
      "desc":
        "Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.",
      "longdesc": {
        "p": [
          {
            "strong":
              "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8."
          },
          "There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.",
          "Note that jQuery.sub() doesn't attempt to do any sort of isolation - that's not its intention. All the methods on the sub'd version of jQuery will still point to the original jQuery (events bound and triggered will still be through the main jQuery, data will be bound to elements through the main jQuery, Ajax queries and events will run through the main jQuery, etc.).",
          {
            "i": "strongly",
            "a": {
              "href":
                "http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/",
              "$t": "Some examples of using the jQuery UI widget factory"
            }
          },
          "The particular use cases of this method can be best described through some examples."
        ]
      },
      "example": [
        {
          "desc":
            "Adding a method to a jQuery sub so that it isn't exposed externally:",
          "code":
            "(function(){   var sub$ = jQuery.sub();\n  sub$.fn.myCustomMethod = function() {     return \"just for me\";\n  };\n\n  sub$( document ).ready(function() {     sub$( \"body\" ).myCustomMethod() // \"just for me\"\n  });\n})();\n\ntypeof jQuery( \"body\" ).myCustomMethod // undefined"
        },
        {
          "desc": "Override some jQuery methods to provide new functionality.",
          "code":
            "(function() {   var myjQuery = jQuery.sub();\n\n  myjQuery.fn.remove = function() { \n    // New functionality: Trigger a remove event\n    this.trigger( \"remove\" );\n\n    // Be sure to call the original jQuery remove method\n    return jQuery.fn.remove.apply( this, arguments );\n  };\n\n  myjQuery(function( $ ) {     $( \".menu\" ).click(function() {       $( this ).find( \".submenu\" ).remove();\n    });\n\n    // A new remove event is now triggered from this copy of jQuery\n    $( document ).on( \"remove\", function( event ) {       $( event.target ).parent().hide();\n    });\n  });\n})();\n\n// Regular jQuery doesn't trigger a remove event when removing an element\n// This functionality is only contained within the modified 'myjQuery'."
        },
        {
          "desc": "Create a plugin that returns plugin-specific methods.",
          "code":
            "(function() { \n  // Create a new copy of jQuery using sub()\n  var plugin = jQuery.sub();\n\n  // Extend that copy with the new plugin methods\n  plugin.fn.extend({     open: function() {       return this.show();\n    },\n    close: function() {       return this.hide();\n    }\n  });\n\n  // Add our plugin to the original jQuery\n  jQuery.fn.myplugin = function() {     this.addClass( \"plugin\" );\n\n    // Make sure our plugin returns our special plugin version of jQuery\n    return plugin( this );\n  };\n})();\n\n$( document ).ready(function() { \n  // Call the plugin, open method now exists\n  $( \"#main\" ).myplugin().open();\n\n  // Note: Calling just $( \"#main\" ).open() won't work as open doesn't exist!\n});"
        }
      ],
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "version/1.5"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jQuery.support",
      "return": "Object",
      "deprecated": "1.9",
      "title": "jQuery.support",
      "signature": {
        "added": "1.3"
      },
      "desc": {
        "a": {
          "href": "http://modernizr.com",
          "$t": "Modernizr"
        },
        "code": "jQuery.support"
      },
      "category": [
        {
          "slug": "properties/global-jquery-object-properties"
        },
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "version/1.5.1"
        },
        {
          "slug": "deprecated/deprecated-1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.trim",
      "return": "String",
      "title": "jQuery.trim()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "str",
          "type": "String",
          "desc": "The string to trim."
        }
      },
      "desc": "Remove the whitespace from the beginning and end of a string.",
      "longdesc": {
        "p": {
          "code": "$.trim()"
        }
      },
      "example": [
        {
          "desc":
            "Remove the white spaces at the start and at the end of the string.",
          "code":
            "var str = \"         lots of spaces before and after         \";\n$( \"#original\" ).html( \"Original String: '\" + str + \"'\" );\n$( \"#trimmed\" ).html( \"$.trim()'ed: '\" + $.trim(str) + \"'\" );",
          "html": "<pre id=\"original\"></pre>\n<pre id=\"trimmed\"></pre>"
        },
        {
          "desc":
            "Remove the white spaces at the start and at the end of the string.",
          "code": "$.trim(\"    hello, how are you?    \");",
          "results": "\"hello, how are you?\""
        }
      ],
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.type",
      "return": "String",
      "title": "jQuery.type()",
      "signature": {
        "added": "1.4.3",
        "argument": {
          "name": "obj",
          "type": "Anything",
          "desc": "Object to get the internal JavaScript [[Class]] of."
        }
      },
      "desc": "Determine the internal JavaScript [[Class]] of an object.",
      "longdesc": {
        "p":
          "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:",
        "ul": {
          "li": [
            {
              "$t":
                "If the object is undefined or null, then \"undefined\" or \"null\" is returned accordingly.",
              "ul": {
                "li": [
                  "jQuery.type( undefined ) === \"undefined\"",
                  "jQuery.type() === \"undefined\"",
                  "jQuery.type( window.notDefined ) === \"undefined\"",
                  "jQuery.type( null ) === \"null\""
                ]
              }
            },
            {
              "$t":
                "If the argument is either a primitive value or an instance of a standard built-in ECMAScript object, the [[Class]] internal property is used to determine the type. ()",
              "a": {
                "href":
                  "http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/",
                "$t": "More details about this technique."
              },
              "ul": {
                "li": [
                  "jQuery.type( true ) === \"boolean\"",
                  "jQuery.type( new Boolean() ) === \"boolean\"",
                  "jQuery.type( 3 ) === \"number\"",
                  "jQuery.type( new Number(3) ) === \"number\"",
                  "jQuery.type( \"test\" ) === \"string\"",
                  "jQuery.type( new String(\"test\") ) === \"string\"",
                  "jQuery.type( function(){ } ) === \"function\"",
                  "jQuery.type( [] ) === \"array\"",
                  "jQuery.type( new Array() ) === \"array\"",
                  "jQuery.type( new Date() ) === \"date\"",
                  {
                    "strong": "as of jQuery 1.9"
                  },
                  {
                    "strong": "as of jQuery 1.9"
                  },
                  {
                    "strong": "as of jQuery 1.12"
                  },
                  "jQuery.type( /test/ ) === \"regexp\""
                ]
              }
            },
            "Everything else returns \"object\" as its type."
          ]
        }
      },
      "example": {
        "desc": "Find out if the parameter is a RegExp.",
        "code": "$( \"b\" ).append( \"\" + jQuery.type( /test/ ) );",
        "html": "Is it a RegExp? <b></b>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.unique",
      "return": "Array",
      "deprecated": "3.0",
      "title": "jQuery.unique()",
      "signature": {
        "added": "1.1.3",
        "argument": {
          "name": "array",
          "type": "Array",
          "desc": "The Array of DOM elements."
        }
      },
      "desc":
        "Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.",
      "longdesc": {
        "p": [
          {
            "strong": {
              "code": {
                "a": {
                  "href": "/jQuery.uniqueSort/",
                  "$t": "jQuery.uniqueSort()"
                }
              }
            }
          },
          {
            "code": "$.unique()",
            "em": "exact same"
          },
          "As of jQuery 1.4 the results will always be returned in document order."
        ]
      },
      "example": {
        "desc": "Removes any duplicate elements from the array of divs.",
        "code":
          "// unique() must take a native array\nvar divs = $( \"div\" ).get();\n\n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( \".dup\" ).get() );\n$( \"div:eq(1)\" ).text( \"Pre-unique there are \" + divs.length + \" elements.\" );\n\ndivs = jQuery.unique( divs );\n$( \"div:eq(2)\" ).text( \"Post-unique there are \" + divs.length + \" elements.\" )\n  .css( \"color\", \"red\" );",
        "css": "div {     color: blue;\n  }",
        "html":
          "<div>There are 6 divs in this document.</div>\n<div></div>\n<div class=\"dup\"></div>\n<div class=\"dup\"></div>\n<div class=\"dup\"></div>\n<div></div>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.1.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.uniqueSort",
      "return": "Array",
      "title": "jQuery.uniqueSort()",
      "signature": {
        "added": "1.12-2.2",
        "argument": {
          "name": "array",
          "type": "Array",
          "desc": "The Array of DOM elements."
        }
      },
      "desc":
        "Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.",
      "longdesc": {
        "p": [
          {
            "code": "$.uniqueSort()",
            "em": "exact same"
          },
          {
            "code": {
              "a": {
                "href": "/jQuery.unique/",
                "$t": "jQuery.unique()"
              }
            }
          },
          "As of jQuery 1.4 the results will always be returned in document order."
        ]
      },
      "example": {
        "desc": "Removes any duplicate elements from the array of divs.",
        "code":
          "// unique() must take a native array\nvar divs = $( \"div\" ).get();\n\n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( \".dup\" ).get() );\n$( \"div:eq(1)\" ).text( \"Pre-unique there are \" + divs.length + \" elements.\" );\n\ndivs = jQuery.uniqueSort( divs );\n$( \"div:eq(2)\" ).text( \"Post-unique there are \" + divs.length + \" elements.\" )\n  .css( \"color\", \"red\" );",
        "css": "div {     color: blue;\n  }",
        "html":
          "<div>There are 6 divs in this document.</div>\n<div></div>\n<div class=\"dup\"></div>\n<div class=\"dup\"></div>\n<div class=\"dup\"></div>\n<div></div>"
      },
      "category": [
        {
          "slug": "utilities"
        },
        {
          "slug": "version/1.12-2.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "jQuery.when",
      "return": "Promise",
      "title": "jQuery.when()",
      "signature": {
        "added": "1.5",
        "argument": {
          "name": "deferreds",
          "desc": "Zero or more Thenable objects.",
          "type": [
            {
              "name": "Deferred"
            },
            {
              "name": "Promise"
            },
            {
              "name": "Thenable"
            }
          ]
        }
      },
      "desc": {
        "a": {
          "href": "/category/deferred-object/",
          "$t": "Deferred"
        }
      },
      "longdesc": {
        "p": [
          {
            "code": "jQuery.when()"
          },
          {
            "code": ["jQuery.when()", "jQuery.ajax()"],
            "a": {
              "href": "/deferred.then/",
              "code": "deferred.then"
            }
          },
          {
            "code": "jQuery.when()"
          },
          {
            "code": "jQuery.when()"
          },
          {
            "code": ["jQuery.when()", "jQuery.when()"]
          },
          "In the event a Deferred was resolved with no value, the corresponding doneCallback argument will be undefined. If a Deferred resolved to a single value, the corresponding argument will hold that value. In the case where a Deferred resolved to multiple values, the corresponding argument will be an array of those values. For example:",
          {
            "code": "jQuery.when()"
          }
        ],
        "pre": [
          {
            "code":
              "$.when( $.ajax( \"test.aspx\" ) ).then(function( data, textStatus, jqXHR ) {   alert( jqXHR.status ); // Alerts 200\n});"
          },
          {
            "code":
              "$.when( { testing: 123 } ).done(function( x ) {   alert( x.testing ); // Alerts \"123\"\n});"
          },
          {
            "code":
              "$.when().then(function( x ) {   alert( \"I fired immediately\" );\n});"
          },
          {
            "code":
              "var d1 = $.Deferred();\nvar d2 = $.Deferred();\n\n$.when( d1, d2 ).done(function ( v1, v2 ) {     console.log( v1 ); // \"Fish\"\n    console.log( v2 ); // \"Pizza\"\n});\n\nd1.resolve( \"Fish\" );\nd2.resolve( \"Pizza\" );"
          },
          {
            "code":
              "var d1 = $.Deferred();\nvar d2 = $.Deferred();\nvar d3 = $.Deferred();\n\n$.when( d1, d2, d3 ).done(function ( v1, v2, v3 ) {     console.log( v1 ); // v1 is undefined\n    console.log( v2 ); // v2 is \"abc\"\n    console.log( v3 ); // v3 is an array [ 1, 2, 3, 4, 5 ]\n});\n\nd1.resolve();\nd2.resolve( \"abc\" );\nd3.resolve( 1, 2, 3, 4, 5 );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).",
          "code":
            "$.when( $.ajax( \"/page1.php\" ), $.ajax( \"/page2.php\" ) ).done(function( a1, a2 ) {   // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = \"Whip\", a2[ 0 ] = \" It\"\n  if ( /Whip It/.test( data ) ) {     alert( \"We got what we came for!\" );\n  }\n});"
        },
        {
          "desc": {
            "code": ["myFunc", "myFailure"]
          },
          "code":
            "$.when( $.ajax( \"/page1.php\" ), $.ajax( \"/page2.php\" ) )\n  .then( myFunc, myFailure );"
        }
      ],
      "category": [
        {
          "slug": "core"
        },
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.5"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.",
      "entry": [
        {
          "type": "method",
          "name": "jQuery",
          "return": "jQuery",
          "title": "jQuery()",
          "signature": [
            {
              "added": "1.0",
              "argument": [
                {
                  "name": "selector",
                  "type": "Selector",
                  "desc": "A string containing a selector expression"
                },
                {
                  "name": "context",
                  "optional": "true",
                  "type": [
                    {
                      "name": "Element"
                    },
                    {
                      "name": "jQuery"
                    }
                  ],
                  "desc": "A DOM Element, Document, or jQuery to use as context"
                }
              ]
            },
            {
              "added": "1.0",
              "argument": {
                "name": "element",
                "type": "Element",
                "desc": "A DOM element to wrap in a jQuery object."
              }
            },
            {
              "added": "1.0",
              "argument": {
                "name": "elementArray",
                "type": "Array",
                "desc":
                  "An array containing a set of DOM elements to wrap in a jQuery object."
              }
            },
            {
              "added": "1.0",
              "argument": {
                "name": "object",
                "type": "PlainObject",
                "desc": "A plain object to wrap in a jQuery object."
              }
            },
            {
              "added": "1.0",
              "argument": {
                "name": "selection",
                "type": "jQuery",
                "desc": "An existing jQuery object to clone."
              }
            },
            {
              "added": "1.4"
            }
          ],
          "desc":
            "Accepts a string containing a CSS selector which is then used to match a set of elements.",
          "longdesc": {
            "p": [
              {
                "code": ["jQuery()", "$()"]
              },
              {
                "code": {
                  "a": {
                    "href": "/length/",
                    "$t": ".length"
                  }
                }
              },
              {
                "code": "$()"
              },
              {
                "code": "this"
              },
              {
                "code": [
                  ".find()",
                  "$( \"span\", this )",
                  "$( this ).find( \"span\" )"
                ]
              },
              "The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.",
              "Please note that although you can pass text nodes and comment nodes into a jQuery collection this way, most operations don't support them. The few that do will have an explicit note on their API documentation page.",
              {
                "code": "this"
              },
              {
                "code": ["this", "$()"]
              },
              {
                "code": ["$()", ".find()"]
              },
              {
                "code": "$()"
              },
              {
                "code": [
                  "jQuery()",
                  {
                    "a": {
                      "href": "/length/",
                      "$t": ".length"
                    }
                  }
                ],
                "em": "no arguments"
              },
              {
                "code": [
                  ".data()",
                  ".prop()",
                  ".on()",
                  ".off()",
                  ".trigger()",
                  ".triggerHandler()",
                  ".data()",
                  ".data()"
                ]
              },
              {
                "code": [
                  ".trigger( \"eventName\" )",
                  ".triggerHandler( \"eventName\" )"
                ]
              }
            ],
            "pre": [
              {
                "code": "$( \"div.foo\" );"
              },
              {
                "code":
                  "$( \"div.foo\" ).click(function() {   $( \"span\", this ).addClass( \"bar\" );\n});"
              },
              {
                "code":
                  "$( \"div.foo\" ).click(function() {   $( this ).slideUp();\n});"
              },
              {
                "code":
                  "$.post( \"url.xml\", function( data ) {   var $child = $( data ).find( \"child\" );\n});"
              },
              {
                "code":
                  "// Define a plain object\nvar foo = { foo: \"bar\", hello: \"world\" };\n\n// Pass it to the jQuery function\nvar $foo = $( foo );\n\n// Test accessing property values\nvar test1 = $foo.prop( \"foo\" ); // bar\n\n// Test setting property values\n$foo.prop( \"foo\", \"foobar\" );\nvar test2 = $foo.prop( \"foo\" ); // foobar\n\n// Test using .data() as summarized above\n$foo.data( \"keyName\", \"someValue\" );\nconsole.log( $foo ); // will now contain a jQuery{ randomNumber} property\n\n// Test binding an event name and triggering\n$foo.on( \"eventName\", function () {   console.log( \"eventName was called\" );\n});\n\n$foo.trigger( \"eventName\" ); // Logs \"eventName was called\""
              },
              {
                "code":
                  "$foo.triggerHandler( \"eventName\" ); // Also logs \"eventName was called\""
              }
            ],
            "h4": [
              {
                "id": "selector-context",
                "$t": "Selector Context"
              },
              {
                "id": "using-dom-elements",
                "$t": "Using DOM elements"
              },
              {
                "id": "cloning-jquery-objects",
                "$t": "Cloning jQuery Objects"
              },
              {
                "id": "returning-empty-set",
                "$t": "Returning an Empty Set"
              },
              {
                "id": "working-with-plain-objects",
                "$t": "Working With Plain Objects"
              }
            ]
          },
          "example": [
            {
              "desc":
                "Find all p elements that are children of a div element and apply a border to them.",
              "code": "$( \"div > p\" ).css( \"border\", \"1px solid gray\" );",
              "html": "<p>one</p>\n<div><p>two</p></div>\n<p>three</p>"
            },
            {
              "desc":
                "Find all inputs of type radio within the first form in the document.",
              "code": "$( \"input:radio\", document.forms[ 0 ] );"
            },
            {
              "desc":
                "Find all div elements within an XML document from an Ajax response.",
              "code": "$( \"div\", xml.responseXML );"
            },
            {
              "desc": "Set the background color of the page to black.",
              "code": "$( document.body ).css( \"background\", \"black\" );"
            },
            {
              "desc": "Hide all the input elements within a form.",
              "code": "$( myForm.elements ).hide();"
            }
          ],
          "category": [
            {
              "slug": "core"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "jQuery",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": [
                {
                  "name": "html",
                  "type": "htmlString",
                  "desc": {
                    "strong": "not"
                  }
                },
                {
                  "name": "ownerDocument",
                  "optional": "true",
                  "type": "document",
                  "desc":
                    "A document in which the new elements will be created."
                }
              ]
            },
            {
              "added": "1.4",
              "argument": [
                {
                  "name": "html",
                  "type": "htmlString",
                  "desc":
                    "A string defining a single, standalone, HTML element (e.g. <div/> or <div></div>)."
                },
                {
                  "name": "attributes",
                  "type": "PlainObject",
                  "desc":
                    "An object of attributes, events, and methods to call on the newly-created element."
                }
              ]
            }
          ],
          "desc":
            "Creates DOM elements on the fly from the provided string of raw HTML.",
          "longdesc": {
            "h4": {
              "id": "creating-new-elements",
              "$t": "Creating New Elements"
            },
            "p": [
              {
                "code": ["$()", "<tag ... >"]
              },
              {
                "a": {
                  "href": "/jQuery.parseHTML/",
                  "$t": "$.parseHTML()"
                }
              },
              {
                "code": [
                  ".ownerDocument",
                  "$(\"<p>hello iframe</p>\", $(\"#myiframe\").prop(\"contentWindow\").document)"
                ]
              },
              {
                "code": [
                  ".innerHTML",
                  "<div>",
                  "innerHTML",
                  "$( \"<img />\" )",
                  "$( \"<img>\" )",
                  "$( \"<a></a>\" )",
                  "$( \"<a>\" )",
                  ".createElement()"
                ]
              },
              {
                "code": [".innerHTML", "<html>", "<title>", "<head>"]
              },
              {
                "code": "href",
                "a": {
                  "href": "http://code.google.com/p/html5shiv/",
                  "$t": "compatibility layer"
                }
              },
              "To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:",
              "Tags that cannot contain elements may be quick-closed or not:",
              {
                "code": ["jQuery()", ".content()"]
              },
              {
                "strong": "As of jQuery 1.9.0",
                "a": {
                  "href": "https://github.com/jquery/jquery-migrate/#readme",
                  "$t": "jQuery Migrate plugin"
                },
                "code": ["jQuery()", "<"]
              },
              {
                "strong": "As of jQuery 1.4",
                "code": "jQuery()",
                "a": {
                  "href": "/attr/",
                  "$t": ".attr()"
                }
              },
              {
                "strong": ["Important:", "As of jQuery 1.4"],
                "a": [
                  {
                    "href": "/category/events/",
                    "$t": "event type"
                  },
                  {
                    "href": "/val/",
                    "$t": "val"
                  },
                  {
                    "href": "/css/",
                    "$t": "css"
                  },
                  {
                    "href": "/html/",
                    "$t": "html"
                  },
                  {
                    "href": "/text/",
                    "$t": "text"
                  },
                  {
                    "href": "/data/",
                    "$t": "data"
                  },
                  {
                    "href": "/width/",
                    "$t": "width"
                  },
                  {
                    "href": "/height/",
                    "$t": "height"
                  },
                  {
                    "href": "/offset/",
                    "$t": "offset"
                  }
                ]
              },
              {
                "strong": "As of jQuery 1.8",
                "code": "jQuery.fn"
              },
              {
                "code": ["\"class\"", "\"className\""]
              },
              {
                "code": ["$( \"<input>\", { size: \"4\"} )", ".size()"]
              }
            ],
            "pre": [
              {
                "code":
                  "$( \"<p id='test'>My <em>new</em> text</p>\" ).appendTo( \"body\" );"
              },
              {
                "code": "$( \"<a href='http://jquery.com'></a>\" );"
              },
              {
                "code": "$( \"<img>\" );\n$( \"<input>\" );"
              },
              {
                "code":
                  "var el = $( \"<br>2<br>3\" ); // returns [<br>, \"2\", <br>]\nel = $( \"<br>2<br>3 >\" ); // returns [<br>, \"2\", <br>, \"3 >\"]"
              },
              {
                "code": {
                  "div": {}
                }
              },
              {
                "code": {
                  "div": {}
                }
              }
            ]
          },
          "example": [
            {
              "desc":
                "Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.",
              "code": "$( \"<div><p>Hello</p></div>\" ).appendTo( \"body\" )"
            },
            {
              "desc": "Create some DOM elements.",
              "code":
                "$( \"<div/>\", {   \"class\": \"test\",\n  text: \"Click me!\",\n  click: function() {     $( this ).toggleClass( \"test\" );\n  }\n})\n  .appendTo( \"body\" );"
            }
          ],
          "category": [
            {
              "slug": "core"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "jQuery",
          "return": "jQuery",
          "signature": {
            "added": "1.0",
            "argument": {
              "name": "callback",
              "type": "Function",
              "desc": "The function to execute when the DOM is ready."
            }
          },
          "desc":
            "Binds a function to be executed when the DOM has finished loading.",
          "longdesc": {
            "p": {
              "code": ["$( document ).ready()", "$()"]
            }
          },
          "example": [
            {
              "desc": "Execute the function when the DOM is ready to be used.",
              "code": "$(function() {   // Document is ready\n});"
            },
            {
              "desc":
                "Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.",
              "code":
                "jQuery(function( $ ) {   // Your code using failsafe $ alias here...\n});"
            }
          ],
          "category": [
            {
              "slug": "core"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "jquery",
      "return": "String",
      "title": ".jquery",
      "signature": {
        "added": "1.0"
      },
      "desc": "A string containing the jQuery version number.",
      "longdesc": {
        "p": {
          "code": [".jquery", "$.fn", "jQuery"]
        }
      },
      "example": [
        {
          "desc": "Determine if an object is a jQuery object",
          "code":
            "var a = { what: \"A regular JS object\" },\n  b = $( \"body\" );\n\nif ( a.jquery ) { // Falsy, since it's undefined\n  alert( \"a is a jQuery object!\" );\n}\n\nif ( b.jquery ) { // Truthy, since it's a string\n    alert( \"b is a jQuery object!\" );\n}"
        },
        {
          "desc": "Get the current version of jQuery running on the page",
          "code": "alert( \"You are running jQuery version: \" + $.fn.jquery );"
        }
      ],
      "category": [
        {
          "slug": "internals"
        },
        {
          "slug": "properties/jquery-object-instance-properties"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "keydown",
      "return": "jQuery",
      "title": ".keydown()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "desc":
        "Bind an event handler to the \"keydown\" JavaScript event, or trigger that event on an element.",
      "longdesc": {
        "p": [
          {
            "code": [".on( \"keydown\", handler )", ".trigger( \"keydown\" )"]
          },
          {
            "code": "keydown"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the input field:",
          "Now when the insertion point is inside the field, pressing a key displays the alert:",
          {
            "samp": "Handler for .keydown() called."
          },
          {
            "code": ".keydown()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["document", "document"]
          },
          {
            "a": {
              "href": "/category/events/event-object/",
              "$t": "event object"
            },
            "code": [".which", ".keypress()"]
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input id=\"target\" type=\"text\" value=\"Hello there\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).keydown(function() {   alert( \"Handler for .keydown() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).keydown();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "keydown"
      },
      "example": {
        "desc":
          "Show the event object for the keydown handler when a key is pressed in the input.",
        "code":
          "var xTriggered = 0;\n$( \"#target\" ).keydown(function( event ) {   if ( event.which == 13 ) {    event.preventDefault();\n  }\n  xTriggered++;\n  var msg = \"Handler for .keydown() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n});\n\n$( \"#other\" ).click(function() {   $( \"#target\" ).keydown();\n});",
        "css":
          "fieldset {     margin-bottom: 1em;\n  }\n  input {     display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {     width: 100%;\n  }\n  .print-output-line {     white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }",
        "height": "460",
        "html":
          "<form>\n  <fieldset>\n    <label for=\"target\">Type Something:</label>\n    <input id=\"target\" type=\"text\">\n  </fieldset>\n</form>\n<button id=\"other\">\n  Trigger the handler\n</button>\n<script type=\"text/javascript\" src=\"/resources/events.js\"></script>"
      },
      "category": [
        {
          "slug": "events/keyboard-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "keypress",
      "return": "jQuery",
      "title": ".keypress()",
      "desc":
        "Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "strong": "Note:",
            "code": "keypress"
          },
          {
            "code": [".on( \"keypress\", handler )", ".trigger( \"keypress\" )"]
          },
          {
            "code": ["keypress", "keydown", "keydown", "keypress"],
            "kbd": ["Shift", "Esc", "delete"]
          },
          {
            "code": "keypress"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the input field:",
          "Now when the insertion point is inside the field, pressing a key displays the log:",
          {
            "samp": "Handler for .keypress() called."
          },
          {
            "code": ".keypress()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["document", "document"]
          },
          {
            "code": ["event", ".which"]
          },
          {
            "code": [
              "keydown",
              "keyup",
              "keypress",
              "keydown",
              "keyup",
              "keypress",
              ".keydown()",
              ".keyup()"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <fieldset>\n    <input id=\"target\" type=\"text\" value=\"Hello there\">\n  </fieldset>\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).keypress(function() {   console.log( \"Handler for .keypress() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).keypress();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "keypress"
      },
      "example": {
        "desc":
          "Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object's output.",
        "code":
          "var xTriggered = 0;\n$( \"#target\" ).keypress(function( event ) {   if ( event.which == 13 ) {      event.preventDefault();\n  }\n  xTriggered++;\n  var msg = \"Handler for .keypress() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n});\n\n$( \"#other\" ).click(function() {   $( \"#target\" ).keypress();\n});",
        "css":
          "fieldset {     margin-bottom: 1em;\n  }\n  input {     display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {     width: 100%;\n  }\n  .print-output-line {     white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }",
        "height": "460",
        "html":
          "<form>\n  <fieldset>\n    <label for=\"target\">Type Something:</label>\n    <input id=\"target\" type=\"text\">\n  </fieldset>\n</form>\n<button id=\"other\">\n  Trigger the handler\n</button>\n<script src=\"/resources/events.js\"></script>"
      },
      "category": [
        {
          "slug": "events/keyboard-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "keyup",
      "return": "jQuery",
      "title": ".keyup()",
      "desc":
        "Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"keyup\", handler )", ".trigger( \"keyup\" )"]
          },
          {
            "code": "keyup"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the input field:",
          "Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:",
          {
            "samp": "Handler for .keyup() called."
          },
          {
            "code": ".keyup()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["document", "document"]
          },
          {
            "code": [".which", ".keypress()"]
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input id=\"target\" type=\"text\" value=\"Hello there\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).keyup(function() {   alert( \"Handler for .keyup() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).keyup();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "keyup"
      },
      "example": {
        "desc":
          "Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.",
        "code":
          "var xTriggered = 0;\n$( \"#target\" ).keyup(function( event ) {   xTriggered++;\n  var msg = \"Handler for .keyup() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n}).keydown(function( event ) {   if ( event.which == 13 ) {     event.preventDefault();\n  }\n});\n\n$( \"#other\").click(function() {   $( \"#target\" ).keyup();\n});",
        "css":
          "fieldset {     margin-bottom: 1em;\n  }\n  input {     display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {     width: 100%;\n  }\n  .print-output-line {     white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }",
        "height": "460",
        "html":
          "<form>\n  <fieldset>\n    <label for=\"target\">Type Something:</label>\n    <input id=\"target\" type=\"text\">\n  </fieldset>\n</form>\n<button id=\"other\">\n  Trigger the handler\n</button>\n<script type=\"text/javascript\" src=\"/resources/events.js\"></script>"
      },
      "category": [
        {
          "slug": "events/keyboard-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "lang",
      "return": "",
      "title": ":lang() Selector",
      "sample": ":lang(language)",
      "signature": {
        "added": "1.9",
        "argument": {
          "name": "language",
          "type": "String",
          "desc": "A language code."
        }
      },
      "desc": "Selects all elements of the specified language.",
      "longdesc": {
        "p": [
          {
            "code": [
              ":lang()",
              "$(\"div:lang(en)\")",
              "<div lang=\"en\">",
              "<div lang=\"en-us\">",
              "<div>",
              "<div lang=\"fr\">"
            ]
          },
          {
            "code": ["lang", "meta"]
          },
          {
            "a": {
              "href": "http://www.w3.org/TR/css3-selectors/#lang-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "example": {
        "desc": "Color div elements according to their language.",
        "code":
          "$( \"div:lang(en-us)\" ).addClass( \"usa\" );\n$( \"div:lang(es-es)\" ).addClass( \"spain\" );",
        "html":
          "<h3>USA</h3>\n<div lang=\"en-us\">red\n  <div>white\n    <div>and blue</div>\n  </div>\n</div>\n<h3>España</h3>\n<div lang=\"es-es\">rojo\n  <div>amarillo\n    <div>y rojo</div>\n  </div>\n</div>",
        "css":
          "body {     background-color: #ccc;\n  }\n  h3 {     margin: .25em 0;\n  }\n  div {     line-height: 1.5em\n  }\n  .usa {     background-color: #f00;\n    color: #fff;\n  }\n  .usa .usa {     background-color: #fff;\n    color: #000;\n  }\n  .usa .usa .usa {     background-color: #00f;\n    color: #fff;\n  }\n  .spain {     background-color: #f00;\n    color: #ff0;\n  }\n  .spain .spain {     background-color: #ff0;\n    color: #f00;\n    line-height: 3em;\n  }\n  .spain .spain .spain {     background-color: #f00;\n    color: #ff0;\n    line-height: 1.5em;\n  }"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "last-child",
      "return": "",
      "title": ":last-child Selector",
      "sample": ":last-child",
      "signature": {
        "added": "1.1.4"
      },
      "desc": "Selects all elements that are the last child of their parent.",
      "longdesc": {
        "p": {
          "a": {
            "href": "/last-selector/",
            "$t": ":last"
          },
          "code": ":last-child"
        }
      },
      "example": {
        "desc":
          "Find the last span in each matched div and add some css plus a hover state.",
        "code":
          "$( \"div span:last-child\" )\n  .css({ color:\"red\", fontSize:\"80%\" })\n  .hover(function() {     $( this ).addClass( \"solast\" );\n  }, function() {     $( this ).removeClass( \"solast\" );\n  });",
        "css": "span.solast {     text-decoration: line-through;\n  }",
        "html":
          "<div>\n  <span>John,</span>\n  <span>Karl,</span>\n  <span>Brandon,</span>\n  <span>Sam</span>\n</div>\n<div>\n  <span>Glen,</span>\n  <span>Tane,</span>\n  <span>Ralph,</span>\n  <span>David</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "last-of-type",
      "return": "",
      "title": ":last-of-type Selector",
      "sample": ":last-of-type",
      "signature": {
        "added": "1.9"
      },
      "desc":
        "Selects all elements that are the last among siblings of the same element name.",
      "longdesc": {
        "p": {
          "code": ":last-of-type"
        }
      },
      "example": {
        "desc":
          "Find the last span in each matched div and add some css plus a hover state.",
        "code":
          "$( \"span:last-of-type\" )\n  .css({ color:\"red\", fontSize:\"80%\" })\n  .hover(function() {     $( this ).addClass( \"solast\" );\n  }, function() {     $( this ).removeClass( \"solast\" );\n  });",
        "css": "span.solast {     text-decoration: line-through;\n  }",
        "html":
          "<div>\n  <span>Corey,</span>\n  <span>Yehuda,</span>\n  <span>Adam,</span>\n  <span>Todd</span>\n</div>\n<div>\n  <span>Jörn,</span>\n  <span>Scott,</span>\n  <span>Timo,</span>\n  <b>Nobody</b>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "last",
      "return": "",
      "title": ":last Selector",
      "sample": ":last",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects the last matched element.",
      "longdesc": {
        "p": {
          "code": ":last"
        }
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":last"
      },
      "example": {
        "desc": "Finds the last table row.",
        "code":
          "$( \"tr:last\" ).css({ backgroundColor: \"yellow\", fontWeight: \"bolder\" });",
        "html":
          "<table>\n  <tr><td>First Row</td></tr>\n  <tr><td>Middle Row</td></tr>\n  <tr><td>Last Row</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "last",
      "return": "jQuery",
      "title": ".last()",
      "signature": {
        "added": "1.4"
      },
      "desc": "Reduce the set of matched elements to the final one in the set.",
      "longdesc": {
        "p": [
          {
            "code": ".last()"
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          "The result of this call is a red background for the final item."
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code": "$( \"li\" ).last().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": "Highlight the last span in a paragraph.",
        "css": ".highlight {     background-color: yellow;\n  }",
        "code": "$( \"p span\" ).last().addClass( \"highlight\" );",
        "html":
          "<p><span>Look:</span> <span>This is some text in a paragraph.</span> <span>This is a note about it.</span></p>"
      },
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "length",
      "return": "Integer",
      "title": ".length",
      "signature": {
        "added": "1.0"
      },
      "desc": "The number of elements in the jQuery object.",
      "longdesc": {
        "p": {
          "a": {
            "href": "/size/",
            "$t": "size()"
          }
        }
      },
      "example": {
        "desc": "Count the divs.  Click to add more.",
        "code":
          "$( document.body )\n  .click(function() {     $( document.body ).append( $( \"<div>\" ) );\n    var n = $( \"div\" ).length;\n    $( \"span\" ).text( \"There are \" + n + \" divs.\" +\n      \"Click to add more.\");\n  })\n  // Trigger the click to start\n  .trigger( \"click\" );",
        "css":
          "body {     cursor: pointer;\n  }\n  div {     width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  span {     color: red;\n  }",
        "html": "<span></span>\n  <div></div>"
      },
      "category": [
        {
          "slug": "properties/jquery-object-instance-properties"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "live",
      "return": "jQuery",
      "deprecated": "1.7",
      "removed": "1.9",
      "title": ".live()",
      "desc":
        "Attach an event handler for all elements which match the current selector, now and in the future.",
      "signature": [
        {
          "added": "1.3",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names."
            },
            {
              "name": "data",
              "type": "PlainObject",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": {
            "name": "events",
            "type": "PlainObject",
            "desc":
              "A plain object of one or more JavaScript event types and functions to execute for them."
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "strong": "As of jQuery 1.7",
            "code": [".live()", ".live()"],
            "a": [
              {
                "href": "/on/",
                "code": ".on()"
              },
              {
                "href": "/delegate/",
                "code": ".delegate()"
              }
            ]
          },
          {
            "code": "document",
            "a": {
              "href": "/on/",
              "code": ".on()"
            }
          },
          {
            "code": ".live()"
          },
          {
            "code": ["events", "data"]
          },
          {
            "code": [".live()", ".live()"]
          },
          {
            "code": ".live()"
          }
        ],
        "pre": [
          {
            "code":
              "$( selector ).live( events, data, handler );                // jQuery 1.3+\n$( document ).delegate( selector, events, data, handler );  // jQuery 1.4.3+\n$( document ).on( events, selector, data, handler );        // jQuery 1.7+"
          },
          {
            "code":
              "$( \"a.offsite\" ).live( \"click\", function() {   alert( \"Goodbye!\" ); // jQuery 1.3+\n});\n$( document ).delegate( \"a.offsite\", \"click\", function() {   alert( \"Goodbye!\" ); // jQuery 1.4.3+\n});\n$( document ).on( \"click\", \"a.offsite\", function() {   alert( \"Goodbye!\" );  // jQuery 1.7+\n});"
          }
        ],
        "ul": [
          {
            "li": [
              {
                "code": ".live()"
              },
              {
                "code":
                  "$( \"a\" ).find( \".offsite, .external\" ).live( ... );",
                "em": "not"
              },
              {
                "code": [".live()", "document"]
              },
              {
                "code": ["click", ".live()"],
                "ol": {
                  "li": [
                    {
                      "code": ["a", "button", "document"]
                    },
                    {
                      "code": [".on()", ".delegate()", "document.body"]
                    },
                    {
                      "code": ["cursor:pointer", "document.documentElement"]
                    }
                  ]
                }
              },
              {
                "a": {
                  "href": "/event.stopPropagation/",
                  "code": "event.stopPropagation()"
                },
                "code": "document"
              },
              {
                "code": [".live()", "$( document ).off( \"click\" )", ".live()"]
              }
            ]
          },
          {
            "li": [
              {
                "code": [".live()", "false", ".stopPropagation()"]
              },
              {
                "b": "jQuery 1.4",
                "code": [".live()", "change", "submit", "focus", "blur"],
                "em": "all JavaScript events that bubble"
              },
              {
                "b": "jQuery 1.3.x",
                "code": [
                  "click",
                  "dblclick",
                  "keydown",
                  "keypress",
                  "keyup",
                  "mousedown",
                  "mousemove",
                  "mouseout",
                  "mouseover",
                  "mouseup"
                ]
              }
            ]
          }
        ]
      },
      "example": [
        {
          "desc":
            "Cancel a default action and prevent it from bubbling up by returning false.",
          "code":
            "$( \"a\" ).live( \"click\", function() {   return false;\n});"
        },
        {
          "desc":
            "Cancel only the default action by using the preventDefault method.",
          "code":
            "$( \"a\" ).live( \"click\", function( event ) {   event.preventDefault();\n});"
        },
        {
          "desc": "Bind custom events with .live().",
          "code":
            "$( \"p\" ).live( \"myCustomEvent\", function( event, myName, myValue ) {   $( this ).text( \"Hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n  });\n$( \"button\" ).click(function() {   $( \"p\" ).trigger( \"myCustomEvent\" );\n});"
        },
        {
          "desc":
            "Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.",
          "code":
            "$( \"p\" ).live({   click: function() {     $( this ).after( \"<p>Another paragraph!</p>\" );\n  },\n  mouseover: function() {     $( this ).addClass( \"over\" );\n  },\n  mouseout: function() {     $( this ).removeClass( \"over\" );\n  }\n});"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "load",
      "return": "jQuery",
      "deprecated": "1.8",
      "removed": "3.0",
      "title": ".load()",
      "desc": "Bind an event handler to the \"load\" JavaScript event.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute when the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".on( \"load\", handler )"
          },
          {
            "code": ["load", "window"]
          },
          "For example, consider a page with a simple image:",
          "The event handler can be bound to the image:",
          "As soon as the image has been loaded, the handler is called.",
          {
            "code": ".ready()"
          }
        ],
        "pre": [
          {
            "code": "<img src=\"book.png\" alt=\"Book\" id=\"book\">"
          },
          {
            "code":
              "$( \"#book\" ).load(function() {   // Handler for .load() called.\n});"
          }
        ],
        "div": [
          {
            "class": "warning",
            "p": {
              "code": {
                "a": {
                  "href": "/load/",
                  "$t": ".load()"
                }
              }
            }
          },
          {
            "class": "warning",
            "p": {
              "b": {
                "code": "load"
              },
              "p": {
                "code": ".load()"
              },
              "ul": {
                "li": [
                  "It doesn't work consistently nor reliably cross-browser",
                  "It doesn't fire correctly in WebKit if the image src is set to the same src as before",
                  "It doesn't correctly bubble up the DOM tree",
                  "Can cease to fire for images that already live in the browser's cache"
                ]
              }
            }
          },
          {
            "class": "warning",
            "p": {
              "strong": "Note:",
              "code": [".live()", ".delegate()", "load"]
            }
          }
        ]
      },
      "example": [
        {
          "desc":
            "Run a function when the page is fully loaded including graphics.",
          "code": "$( window ).load(function() {   // Run code\n});"
        },
        {
          "desc":
            "Add the class bigImg to all images with height greater than 100 upon each image load.",
          "code":
            "$( \"img.userIcon\" ).load(function() {   if ( $( this ).height() > 100) {     $( this ).addClass( \"bigImg\" );\n  }\n});"
        }
      ],
      "category": [
        {
          "slug": "events/document-loading"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "load",
      "return": "jQuery",
      "title": ".load()",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "url",
            "type": "String",
            "desc": "A string containing the URL to which the request is sent."
          },
          {
            "name": "data",
            "optional": "true",
            "type": [
              {
                "name": "PlainObject"
              },
              {
                "name": "String"
              }
            ],
            "desc":
              "A plain object or string that is sent to the server with the request."
          },
          {
            "name": "complete",
            "type": "Function",
            "optional": "true",
            "argument": [
              {
                "name": "responseText",
                "type": "String"
              },
              {
                "name": "textStatus",
                "type": "String"
              },
              {
                "name": "jqXHR",
                "type": "jqXHR"
              }
            ],
            "desc":
              "A callback function that is executed when the request completes."
          }
        ]
      },
      "desc":
        "Load data from the server and place the returned HTML into the matched element.",
      "longdesc": {
        "div": {
          "class": "warning",
          "p": {
            "code": {
              "a": {
                "href": "/load-event/",
                "$t": ".load()"
              }
            }
          }
        },
        "p": [
          {
            "code": ["$.get(url, data, success)", "textStatus", ".load()"]
          },
          {
            "em": "not"
          },
          {
            "code": "this"
          },
          {
            "code": ".load()"
          },
          "The POST method is used if data is provided as an object; otherwise, GET is assumed.",
          {
            "code": [
              ".load()",
              {
                "a": {
                  "href": "/jQuery.get/",
                  "$t": "$.get()"
                }
              },
              "url"
            ]
          },
          "We could modify the example above to use only part of the document that is fetched:",
          {
            "code": ["ajax/test.html", "container", "result"]
          },
          {
            "code": [".innerHTML", "<html>", "<title>", "<head>", ".load()"]
          },
          {
            "code": [".load()", ".html()", ".load()"],
            "em": "not"
          },
          {
            "code": "#a"
          },
          {
            "code": "#b"
          }
        ],
        "pre": [
          {
            "code": "$( \"#result\" ).load( \"ajax/test.html\" );"
          },
          {
            "code":
              "$( \"#result\" ).load( \"ajax/test.html\", function() {   alert( \"Load was performed.\" );\n});"
          },
          {
            "code": "$( \"#result\" ).load( \"ajax/test.html #container\" );"
          },
          {
            "code": "$( \"#a\" ).load( \"article.html\" );"
          },
          {
            "code": "$( \"#b\" ).load( \"article.html #target\" );"
          }
        ],
        "h4": [
          {
            "id": "callback-function",
            "$t": "Callback Function"
          },
          {
            "id": "request-method",
            "$t": "Request Method"
          },
          {
            "id": "loading-page-fragments",
            "$t": "Loading Page Fragments"
          },
          {
            "id": "script-execution",
            "$t": "Script Execution"
          }
        ]
      },
      "note": {
        "id": "same-origin-policy",
        "type": "additional"
      },
      "example": [
        {
          "desc": "Load another page's list items into an ordered list.",
          "code":
            "$( \"#new-projects\" ).load( \"/resources/load.html #projects li\" );",
          "css": "body {     font-size: 12px;\n    font-family: Arial;\n  }",
          "html": "<b>Projects:</b>\n<ol id=\"new-projects\"></ol>"
        },
        {
          "desc": "Display a notice if the Ajax request encounters an error.",
          "code":
            "$( \"#success\" ).load( \"/not-here.php\", function( response, status, xhr ) {   if ( status == \"error\" ) {     var msg = \"Sorry but there was an error: \";\n    $( \"#error\" ).html( msg + xhr.status + \" \" + xhr.statusText );\n  }\n});",
          "css": "body {     font-size: 12px;\n    font-family: Arial;\n  }",
          "html":
            "<b>Successful Response (should be blank):</b>\n<div id=\"success\"></div>\n<b>Error Response:</b>\n<div id=\"error\"></div>"
        },
        {
          "desc": "Load the feeds.html file into the div with the ID of feeds.",
          "code": "$( \"#feeds\" ).load( \"feeds.html\" );",
          "results": "<div id=\"feeds\"><b>45</b> feeds found.</div>"
        },
        {
          "desc": "pass arrays of data to the server.",
          "code":
            "$( \"#objectID\" ).load( \"test.php\", { \"choices[]\": [ \"Jon\", \"Susan\" ] } );"
        },
        {
          "desc":
            "Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.",
          "code":
            "$( \"#feeds\" ).load( \"feeds.php\", { limit: 25 }, function() {   alert( \"The last 25 entries in the feed have been loaded\" );\n});"
        }
      ],
      "category": [
        {
          "slug": "ajax/shorthand-methods"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "lt",
      "return": "",
      "title": ":lt() Selector",
      "signature": [
        {
          "sample": ":lt(index)",
          "added": "1.0",
          "argument": {
            "name": "index",
            "type": "Number",
            "desc": "Zero-based index."
          }
        },
        {
          "sample": ":lt(-index)",
          "added": "1.8",
          "argument": {
            "name": "indexFromEnd",
            "type": "Integer",
            "desc":
              "Zero-based index, counting backwards from the last element."
          }
        }
      ],
      "desc": {
        "code": "index"
      },
      "longdesc": {
        "p": [
          {
            "strong": "index-related selectors"
          },
          {
            "code": ".myclass"
          },
          {
            "em": ["0-based indexing", "1-based indexing"],
            "code": ["$( \".myclass:lt(1)\" )", "myclass", ":nth-child(n)"]
          },
          {
            "code": [":lt(index)", "index"],
            "em": "not"
          }
        ]
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":lt()",
        "data-alt": "$(\"your-pure-css-selector\").slice(0, index)"
      },
      "example": {
        "desc":
          "Give TDs less than the one with the 4th index (TD#4) a yellow background and TDs less than the one with -2nd index a red text color.",
        "code":
          "$( \"td:lt(4)\" ).css( \"backgroundColor\", \"yellow\" );\n$( \"td:lt(-2)\" ).css( \"color\", \"red\" );",
        "html":
          "<table border=\"1\">\n  <tr><td>TD #0</td><td>TD #1</td><td>TD #2</td></tr>\n  <tr><td>TD #3</td><td>TD #4</td><td>TD #5</td></tr>\n  <tr><td>TD #6</td><td>TD #7</td><td>TD #8</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "map",
      "return": "jQuery",
      "title": ".map()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "callback",
          "type": "Function",
          "argument": [
            {
              "name": "index",
              "type": "Integer"
            },
            {
              "name": "domElement",
              "type": "Element"
            }
          ],
          "return": {
            "type": "Object"
          },
          "desc":
            "A function object that will be invoked for each element in the current set."
        }
      },
      "desc":
        "Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.",
      "longdesc": {
        "p": [
          {
            "a": {
              "href": "/jQuery.map/",
              "$t": "jQuery.map()"
            }
          },
          {
            "code": ".get()"
          },
          {
            "code": ".map()"
          },
          {
            "code": "ID"
          },
          {
            "code": "\"two,four,six,eight\""
          },
          {
            "code": ["this", "null", "undefined"]
          }
        ],
        "pre": [
          {
            "code":
              "<form method=\"post\" action=\"\">\n  <fieldset>\n    <div>\n      <label for=\"two\">2</label>\n      <input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\">\n    </div>\n    <div>\n      <label for=\"four\">4</label>\n      <input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\">\n    </div>\n    <div>\n      <label for=\"six\">6</label>\n      <input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\">\n    </div>\n    <div>\n      <label for=\"eight\">8</label>\n      <input type=\"checkbox\" value=\"8\" id=\"eight\" name=\"number[]\">\n    </div>\n  </fieldset>\n</form>"
          },
          {
            "code":
              "$( \":checkbox\" )\n  .map(function() {     return this.id;\n  })\n  .get()\n  .join();"
          }
        ]
      },
      "example": [
        {
          "desc": "Build a list of all the values within a form.",
          "code":
            "$( \"p\" )\n  .append( $( \"input\" ).map(function() {     return $( this ).val();\n  })\n  .get()\n  .join( \", \" ) );",
          "css": "p {     color: red;\n  }",
          "html":
            "<p><b>Values: </b></p>\n<form>\n  <input type=\"text\" name=\"name\" value=\"John\">\n  <input type=\"text\" name=\"password\" value=\"password\">\n  <input type=\"text\" name=\"url\" value=\"http://ejohn.org/\">\n</form>"
        },
        {
          "desc": "A contrived example to show some functionality.",
          "code":
            "var mappedItems = $( \"li\" ).map(function( index ) {   var replacement = $( \"<li>\" ).text( $( this ).text() ).get( 0 );\n  if ( index === 0 ) { \n    // Make the first item all caps\n    $( replacement ).text( $( replacement ).text().toUpperCase() );\n  } else if ( index === 1 || index === 3 ) { \n    // Delete the second and fourth items\n    replacement = null;\n  } else if ( index === 2 ) { \n    // Make two of the third item and add some text\n    replacement = [ replacement, $( \"<li>\" ).get( 0 ) ];\n    $( replacement[ 0 ] ).append( \"<b> - A</b>\" );\n    $( replacement[ 1 ] ).append( \"Extra <b> - B</b>\" );\n  }\n\n  // Replacement will be a dom element, null,\n  // or an array of dom elements\n  return replacement;\n});\n$( \"#results\" ).append( mappedItems );",
          "css":
            "body {     font-size: 16px;\n  }\n  ul {     float: left;\n    margin: 0 30px;\n    color: blue;\n  }\n  #results {     color: red;\n  }",
          "html":
            "<ul>\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n  <li>Fourth</li>\n  <li>Fifth</li>\n</ul>\n<ul id=\"results\">\n</ul>"
        },
        {
          "desc": "Equalize the heights of the divs.",
          "code":
            "$.fn.equalizeHeights = function() {   var maxHeight = this.map(function( i, e ) {     return $( e ).height();\n  }).get();\n  return this.height( Math.max.apply( this, maxHeight ) );\n};\n\n$( \"input\" ).click(function() {   $( \"div\" ).equalizeHeights();\n});",
          "css":
            "div {     width: 40px;\n    float: left;\n  }\n  input {     clear: left;\n  }",
          "html":
            "<input type=\"button\" value=\"equalize div heights\">\n<div style=\"background: red; height: 40px; \"></div>\n<div style=\"background: green; height: 70px;\"></div>\n<div style=\"background: blue; height: 50px; \"></div>"
        }
      ],
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mousedown",
      "return": "jQuery",
      "title": ".mousedown()",
      "desc":
        "Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"mousedown\", handler)",
              ".trigger( \"mousedown\" )"
            ]
          },
          {
            "code": "mousedown"
          },
          "For example, consider the HTML:",
          {
            "code": "<div>"
          },
          "Now if we click on this element, the alert is displayed:",
          {
            "samp": "Handler for .mousedown() called."
          },
          "We can also trigger the event when a different element is clicked:",
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["mousedown", "which", "which"]
          },
          "This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.",
          {
            "code": ["mousedown", "click", "mousedown"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\">\n  Click here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).mousedown(function() {   alert( \"Handler for .mousedown() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).mousedown();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_01.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mousedown"
      },
      "example": {
        "desc": "Show texts when mouseup and mousedown event triggering.",
        "code":
          "$( \"p\" )\n  .mouseup(function() {     $( this ).append( \"<span style='color:#f00;'>Mouse up.</span>\" );\n  })\n  .mousedown(function() {     $( this ).append( \"<span style='color:#00f;'>Mouse down.</span>\" );\n  });",
        "html": "<p>Press mouse and release here.</p>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mouseenter",
      "return": "jQuery",
      "title": ".mouseenter()",
      "desc":
        "Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"mouseenter\", handler )",
              ".trigger( \"mouseenter\" )"
            ]
          },
          {
            "code": "mouseenter"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to any element:",
          {
            "samp": "Outer",
            "code": ["<div>", "<div id=\"log\">"]
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["mouseenter", "mouseover", "mouseover", "mouseenter"],
            "samp": ["Inner", "Outer", "Inner"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"outer\">\n  Outer\n  <div id=\"inner\">\n    Inner\n  </div>\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#outer\" ).mouseenter(function() {   $( \"#log\" ).append( \"<div>Handler for .mouseenter() called.</div>\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#outer\" ).mouseenter();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_08.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mouseenter"
      },
      "example": {
        "desc": {
          "code": ["mouseover", "mouseenter"]
        },
        "css":
          "div.out {     width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {     width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {     line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }",
        "code":
          "var i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {     $( \"p:first\", this ).text( \"mouse over\" );\n    $( \"p:last\", this ).text( ++i );\n  })\n  .mouseout(function() {     $( \"p:first\", this ).text( \"mouse out\" );\n  });\n\nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {     $( \"p:first\", this ).text( \"mouse enter\" );\n    $( \"p:last\", this ).text( ++n );\n  })\n  .mouseleave(function() {     $( \"p:first\", this ).text( \"mouse leave\" );\n  });",
        "html":
          "<div class=\"out overout\">\n  <p>move your mouse</p>\n  <div class=\"in overout\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n\n<div class=\"out enterleave\">\n  <p>move your mouse</p>\n  <div class=\"in enterleave\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mouseleave",
      "return": "jQuery",
      "title": ".mouseleave()",
      "desc":
        "Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on('mouseleave', handler)", ".trigger('mouseleave')"]
          },
          {
            "code": "mouseleave"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to any element:",
          {
            "samp": "Outer",
            "code": ["<div>", "<div id=\"log\">"]
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["mouseleave", "mouseout", "mouseout", "mouseleave"],
            "samp": ["Inner", "Outer", "Inner"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"outer\">\n  Outer\n  <div id=\"inner\">\n    Inner\n  </div>\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#outer\" ).mouseleave(function() {   $( \"#log\" ).append( \"<div>Handler for .mouseleave() called.</div>\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#outer\" ).mouseleave();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_09.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mouseleave"
      },
      "example": {
        "desc": {
          "code": ["mouseout", "mouseleave"]
        },
        "css":
          "div.out {     width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {     width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {     line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }",
        "code":
          "var i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {     $( \"p:first\", this ).text( \"mouse over\" );\n  })\n  .mouseout(function() {     $( \"p:first\", this ).text( \"mouse out\" );\n    $( \"p:last\", this ).text( ++i );\n  });\n\nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {     $( \"p:first\", this ).text( \"mouse enter\" );\n  })\n  .mouseleave(function() {     $( \"p:first\", this ).text( \"mouse leave\" );\n    $( \"p:last\", this ).text( ++n );\n  });",
        "html":
          "<div class=\"out overout\">\n  <p>move your mouse</p>\n  <div class=\"in overout\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n<div class=\"out enterleave\">\n  <p>move your mouse</p>\n  <div class=\"in enterleave\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mousemove",
      "return": "jQuery",
      "title": ".mousemove()",
      "desc":
        "Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"mousemove\", handler )",
              ".trigger( \"mousemove\" )"
            ]
          },
          {
            "code": "mousemove"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the target:",
          "Now when the mouse pointer moves within the target button, the messages are appended to <div id=\"log\">:",
          {
            "samp": [
              "Handler for .mousemove() called at (399, 48)",
              "Handler for .mousemove() called at (398, 46)",
              "Handler for .mousemove() called at (397, 44)",
              "Handler for .mousemove() called at (396, 42)"
            ],
            "br": [{}, {}, {}, {}]
          },
          {
            "code": ".mousemove()"
          },
          "After this code executes, clicks on the Trigger button will also append the message:",
          {
            "samp": "Handler for .mousemove() called at (undefined, undefined)"
          },
          {
            "code": [".clientX", ".offsetX", ".pageX", ".pageX", ".pageY"]
          },
          {
            "code": ["mousemove", "mousemove"]
          },
          {
            "code": [
              "mousemove",
              "mousedown",
              "mouseup",
              "mouseup",
              "mousemove",
              "mouseup",
              "<body>"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\">\n  Move here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#target\" ).mousemove(function( event ) {   var msg = \"Handler for .mousemove() called at \";\n  msg += event.pageX + \", \" + event.pageY;\n  $( \"#log\" ).append( \"<div>\" + msg + \"</div>\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).mousemove();\n});"
          }
        ]
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mousemove"
      },
      "example": {
        "desc":
          "Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.",
        "code":
          "$( \"div\" ).mousemove(function( event ) {   var pageCoords = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n  var clientCoords = \"( \" + event.clientX + \", \" + event.clientY + \" )\";\n  $( \"span:first\" ).text( \"( event.pageX, event.pageY ) : \" + pageCoords );\n  $( \"span:last\" ).text( \"( event.clientX, event.clientY ) : \" + clientCoords );\n});",
        "height": "300",
        "css":
          "div {     width: 220px;\n    height: 170px;\n    margin: 10px 50px 10px 10px;\n    background: yellow;\n    border: 2px groove;\n    float: right;\n  }\n  p {     margin: 0;\n    margin-left: 10px;\n    color: red;\n    width: 220px;\n    height: 120px;\n    padding-top: 70px;\n    float: left;\n    font-size: 14px;\n  }\n  span {     display: block;\n  }",
        "html":
          "<p>\n  <span>Move the mouse over the div.</span>\n  <span>&nbsp;</span>\n</p>\n<div></div>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mouseout",
      "return": "jQuery",
      "title": ".mouseout()",
      "desc":
        "Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"mouseout\", handler )", ".trigger( \"mouseout\" )"]
          },
          {
            "code": "mouseout"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to any element:",
          {
            "samp": "Outer",
            "code": ["<div>", "<div id=\"log\">", ".mouseout()"]
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "samp": ["Inner", "Outer"],
            "code": [
              "mouseout",
              "mouseout",
              {
                "a": {
                  "href": "/mouseleave/",
                  "$t": "mouseleave"
                }
              }
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"outer\">\n  Outer\n  <div id=\"inner\">\n    Inner\n  </div>\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#outer\" ).mouseout(function() {   $( \"#log\" ).append( \"Handler for .mouseout() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#outer\" ).mouseout();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_07.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mouseout"
      },
      "example": {
        "desc": {
          "code": ["mouseout", "mouseleave"]
        },
        "css":
          "div.out {     width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {     width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {     line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }",
        "code":
          "var i = 0;\n$( \"div.overout\" )\n  .mouseout(function() {     $( \"p:first\", this ).text( \"mouse out\" );\n    $( \"p:last\", this ).text( ++i );\n  })\n  .mouseover(function() {     $( \"p:first\", this ).text( \"mouse over\" );\n  });\n\nvar n = 0;\n$( \"div.enterleave\" )\n  .on( \"mouseenter\", function() {     $( \"p:first\", this ).text( \"mouse enter\" );\n  })\n  .on( \"mouseleave\", function() {     $( \"p:first\", this ).text( \"mouse leave\" );\n    $( \"p:last\", this ).text( ++n );\n  });",
        "html":
          "<div class=\"out overout\">\n  <p>move your mouse</p>\n  <div class=\"in overout\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>\n\n<div class=\"out enterleave\">\n  <p>move your mouse</p>\n  <div class=\"in enterleave\"><p>move your mouse</p><p>0</p></div>\n  <p>0</p>\n</div>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mouseover",
      "return": "jQuery",
      "title": ".mouseover()",
      "desc":
        "Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".on( \"mouseover\", handler )",
              ".trigger( \"mouseover\" )"
            ]
          },
          {
            "code": "mouseover"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to any element:",
          {
            "samp": "Outer",
            "code": ["<div>", "<div id=\"log\">"]
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "samp": ["Inner", "Outer"],
            "code": ["mouseover", "mouseover", ".mouseenter()"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"outer\">\n  Outer\n  <div id=\"inner\">\n    Inner\n  </div>\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#outer\" ).mouseover(function() {   $( \"#log\" ).append( \"<div>Handler for .mouseover() called.</div>\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#outer\" ).mouseover();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_06.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mouseover"
      },
      "example": {
        "desc": {
          "code": ["mouseover", "mouseenter"]
        },
        "css":
          "div.out {     width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {     width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {     line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }",
        "code":
          "var i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {     i += 1;\n    $( this ).find( \"span\" ).text( \"mouse over x \" + i );\n  })\n  .mouseout(function() {     $( this ).find( \"span\" ).text( \"mouse out \" );\n  });\n\nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {     n += 1;\n    $( this ).find( \"span\" ).text( \"mouse enter x \" + n );\n  })\n  .mouseleave(function() {     $( this ).find( \"span\" ).text( \"mouse leave\" );\n  });",
        "html":
          "<div class=\"out overout\">\n  <span>move your mouse</span>\n  <div class=\"in\">\n  </div>\n</div>\n\n<div class=\"out enterleave\">\n  <span>move your mouse</span>\n  <div class=\"in\">\n  </div>\n</div>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "mouseup",
      "return": "jQuery",
      "title": ".mouseup()",
      "desc":
        "Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on('mouseup', handler)", ".trigger('mouseup')"]
          },
          {
            "code": "mouseup"
          },
          "For example, consider the HTML:",
          {
            "code": "<div>"
          },
          "Now if we click on this element, the alert is displayed:",
          {
            "samp": "Handler for .mouseup() called."
          },
          "We can also trigger the event when a different element is clicked:",
          {
            "samp": "Trigger the handler"
          },
          {
            "code": ["mouseup", "click", "mouseup"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\">\n  Click here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).mouseup(function() {   alert( \"Handler for .mouseup() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).mouseup();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_02.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "mouseup"
      },
      "example": {
        "desc": "Show texts when mouseup and mousedown event triggering.",
        "code":
          "$( \"p\" )\n  .mouseup(function() {     $( this ).append( \"<span style='color:#f00;'>Mouse up.</span>\" );\n  })\n  .mousedown(function() {     $( this ).append( \"<span style='color:#00f;'>Mouse down.</span>\" );\n  });",
        "html": "<p>Press mouse and release here.</p>"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "attributeMultiple",
      "return": "",
      "title": "Multiple Attribute Selector [name=\"value\"][name2=\"value2\"]",
      "sample": "[attributeFilter1][attributeFilter2][attributeFilterN]",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "attributeFilter1",
            "type": "Selector",
            "desc": "An attribute filter."
          },
          {
            "name": "attributeFilter2",
            "type": "Selector",
            "desc": "Another attribute filter, reducing the selection even more"
          },
          {
            "name": "attributeFilterN",
            "optional": "true",
            "type": "Selector",
            "desc": "As many more attribute filters as necessary"
          }
        ]
      },
      "desc":
        "Matches elements that match all of the specified attribute filters.",
      "longdesc": {},
      "example": {
        "desc":
          "Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.",
        "code": "$( \"input[id][name$='man']\" ).val( \"only this one\" );",
        "html":
          "<input id=\"man-news\" name=\"man-news\">\n<input name=\"milkman\">\n<input id=\"letterman\" name=\"new-letterman\">\n<input name=\"newmilk\">"
      },
      "category": [
        {
          "slug": "selectors/attribute-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "multiple",
      "return": "",
      "title": "Multiple Selector (\"selector1, selector2, selectorN\")",
      "sample": "selector1, selector2, selectorN",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "selector1",
            "type": "Selector",
            "desc": "Any valid selector."
          },
          {
            "name": "selector2",
            "type": "Selector",
            "desc": "Another valid selector."
          },
          {
            "name": "selectorN",
            "optional": "true",
            "type": "Selector",
            "desc": "As many more valid selectors as you like."
          }
        ]
      },
      "desc": "Selects the combined results of all the specified selectors.",
      "longdesc": {
        "p": {
          "a": {
            "href": "/add/",
            "$t": "add()"
          }
        }
      },
      "example": [
        {
          "desc": "Finds the elements that match any of these three selectors.",
          "code":
            "$( \"div, span, p.myClass\" ).css( \"border\", \"3px solid red\" );",
          "html":
            "<div>div</div>\n<p class=\"myClass\">p class=\"myClass\"</p>\n<p class=\"notMyClass\">p class=\"notMyClass\"</p>\n<span>span</span>",
          "css":
            "div, span, p {     width: 126px;\n    height: 60px;\n    float: left;\n    padding: 3px;\n    margin: 2px;\n    background-color: #eee;\n    font-size: 14px;\n  }"
        },
        {
          "desc": "Show the order in the jQuery object.",
          "code":
            "var list = $( \"div, p, span\" )\n  .map( function() {     return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n$( \"b\" ).append( document.createTextNode( list ) );",
          "css":
            "b {     color: red;\n    font-size: 16px;\n    display: block;\n    clear:left;\n  }\n  div, span, p {     width: 40px;\n    height: 40px;\n    float: left;\n    margin: 10px;\n    background-color: blue;\n    padding: 3px;\n    color: white;\n  }",
          "html":
            "<span>span</span>\n<p>p</p>\n<p>p</p>\n<div>div</div>\n<span>span</span>\n<p>p</p>\n<div>div</div>\n<b></b>"
        }
      ],
      "category": [
        {
          "slug": "selectors/basic-css-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "next adjacent",
      "return": "",
      "title": "Next Adjacent Selector (\"prev + next\")",
      "sample": "prev + next",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "prev",
            "type": "Selector",
            "desc": "Any valid selector."
          },
          {
            "name": "next",
            "type": "Selector",
            "desc":
              "A selector to match the element that is next to the first selector."
          }
        ]
      },
      "desc":
        "Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".",
      "longdesc": {
        "p": {
          "code": ["prev + next", "prev ~ siblings"]
        }
      },
      "example": {
        "desc": "Finds all inputs that are next to a label.",
        "code":
          "$( \"label + input\" ).css( \"color\", \"blue\" ).val( \"Labeled!\" );",
        "html":
          "<form>\n  <label for=\"name\">Name:</label>\n  <input name=\"name\" id=\"name\">\n  <fieldset>\n    <label for=\"newsletter\">Newsletter:</label>\n    <input name=\"newsletter\" id=\"newsletter\">\n  </fieldset>\n</form>\n<input name=\"none\">"
      },
      "category": [
        {
          "slug": "selectors/hierarchy-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "next siblings",
      "return": "",
      "title": "Next Siblings Selector (\"prev ~ siblings\")",
      "sample": "prev ~ siblings",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "prev",
            "type": "Selector",
            "desc": "Any valid selector."
          },
          {
            "name": "siblings",
            "type": "Selector",
            "desc":
              "A selector to filter elements that are the following siblings of the first selector."
          }
        ]
      },
      "desc":
        "Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.",
      "longdesc": {
        "p": {
          "code": ["prev + next", "prev ~ siblings"]
        }
      },
      "example": {
        "desc":
          "Finds all divs that are siblings after the element with #prev as its id.  Notice the span isn't selected since it is not a div and the \"niece\" isn't selected since it is a child of a sibling, not an actual sibling.",
        "code": "$( \"#prev ~ div\" ).css( \"border\", \"3px groove blue\" );",
        "css":
          "div, span {     display: block;\n    width: 80px;\n    height: 80px;\n    margin: 5px;\n    background: #bfa;\n    float: left;\n    font-size: 14px;\n  }\n  div#small {     width: 60px;\n    height: 25px;\n    font-size: 12px;\n    background: #fab;\n  }",
        "html":
          "<div>div (doesn't match since before #prev)</div>\n<span id=\"prev\">span#prev</span>\n<div>div sibling</div>\n<div>div sibling <div id=\"small\">div niece</div></div>\n<span>span sibling (not div)</span>\n<div>div sibling</div>"
      },
      "category": [
        {
          "slug": "selectors/hierarchy-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "next",
      "return": "jQuery",
      "title": ".next()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.",
      "longdesc": {
        "p": [
          {
            "code": ".next()"
          },
          {
            "code": "$()"
          },
          "Consider a page with a simple list on it:",
          "If we begin at the third item, we can find the element which comes just after it:",
          "The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included."
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).next().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Find the very next sibling of each disabled button and change its text \"this button is disabled\".",
          "code":
            "$( \"button[disabled]\" ).next().text( \"this button is disabled\" );",
          "css":
            "span {     color: blue;\n    font-weight: bold;\n  }\n  button {     width: 100px;\n  }",
          "html":
            "<div><button disabled=\"disabled\">First</button> - <span></span></div>\n<div><button>Second</button> - <span></span></div>\n<div><button disabled=\"disabled\">Third</button> - <span></span></div>"
        },
        {
          "desc":
            "Find the very next sibling of each paragraph. Keep only the ones with a class \"selected\".",
          "code":
            "$( \"p\" ).next( \".selected\" ).css( \"background\", \"yellow\" );",
          "html":
            "<p>Hello</p>\n<p class=\"selected\">Hello Again</p>\n<div><span>And Again</span></div>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "nextAll",
      "return": "jQuery",
      "title": ".nextAll()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "String",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": ".nextAll()"
          },
          {
            "code": "$()"
          },
          "Consider a page with a simple list on it:",
          "If we begin at the third item, we can find the elements which come after it:",
          "The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included."
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).nextAll().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc": "Locate all the divs after the first and give them a class.",
          "code": "$( \"div:first\" ).nextAll().addClass( \"after\" );",
          "css":
            "div {     width: 80px;\n    height: 80px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.after {     border-color: red;\n  }",
          "height": "150",
          "html":
            "<div>first</div>\n<div>sibling<div>child</div></div>\n<div>sibling</div>\n<div>sibling</div>"
        },
        {
          "desc":
            "Locate all the paragraphs after the second child in the body and give them a class.",
          "code":
            "$( \":nth-child(1)\" ).nextAll( \"p\" ).addClass( \"after\" );",
          "css":
            "div, p {     width: 60px;\n    height: 60px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  .after {     border-color: red;\n  }",
          "height": "200",
          "html":
            "<p>p</p>\n<div>div</div>\n<p>p</p>\n<p>p</p>\n<div>div</div>\n<p>p</p>\n<div>div</div>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "nextUntil",
      "return": "jQuery",
      "title": ".nextUntil()",
      "signature": [
        {
          "added": "1.4",
          "argument": [
            {
              "name": "selector",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to indicate where to stop matching following sibling elements."
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "element",
              "optional": "true",
              "desc":
                "A DOM node or jQuery object indicating where to stop matching following sibling elements.",
              "type": [
                {
                  "name": "Element"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        }
      ],
      "desc":
        "Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.",
      "longdesc": {
        "p": [
          {
            "code": [".nextUntil()", ".nextUntil()"]
          },
          {
            "code": ".nextAll()"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": ".nextUntil()"
          },
          "The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it."
        ]
      },
      "example": {
        "height": "250px",
        "desc":
          "Find the siblings that follow <dt id=\"term-2\"> up to the next <dt> and give them a red background color. Also, find <dd> siblings that follow <dt id=\"term-1\"> up to <dt id=\"term-3\"> and give them a green text color.",
        "code":
          "$( \"#term-2\" )\n  .nextUntil( \"dt\" )\n    .css( \"background-color\", \"red\" );\nvar term3 = document.getElementById( \"term-3\" );\n$( \"#term-1\" )\n  .nextUntil( term3, \"dd\" )\n    .css( \"color\", \"green\" );",
        "html":
          "<dl>\n  <dt id=\"term-1\">term 1</dt>\n  <dd>definition 1-a</dd>\n  <dd>definition 1-b</dd>\n  <dd>definition 1-c</dd>\n  <dd>definition 1-d</dd>\n  <dt id=\"term-2\">term 2</dt>\n  <dd>definition 2-a</dd>\n  <dd>definition 2-b</dd>\n  <dd>definition 2-c</dd>\n  <dt id=\"term-3\">term 3</dt>\n  <dd>definition 3-a</dd>\n  <dd>definition 3-b</dd>\n</dl>"
      },
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "not",
      "return": "",
      "title": ":not() Selector",
      "sample": ":not(selector)",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "type": "Selector",
          "desc": "A selector with which to filter by."
        }
      },
      "desc": "Selects all elements that do not match the given selector.",
      "longdesc": {
        "p": [
          {
            "code": [":not()", ":not(div a)", ":not(div,a)"]
          },
          {
            "code": [
              {
                "a": {
                  "href": "/not/",
                  "$t": ".not()"
                }
              },
              ":not()"
            ]
          }
        ],
        "h3": "Additional Notes"
      },
      "example": {
        "desc":
          "Finds all inputs that are not checked and highlights the next sibling span.  Notice there is no change when clicking the checkboxes since no click events have been linked.",
        "code":
          "$( \"input:not(:checked) + span\" ).css( \"background-color\", \"yellow\" );\n$( \"input\").attr( \"disabled\", \"disabled\" );",
        "html":
          "<div>\n  <input type=\"checkbox\" name=\"a\">\n  <span>Mary</span>\n</div>\n<div>\n  <input type=\"checkbox\" name=\"b\">\n  <span>lcm</span>\n</div>\n<div>\n  <input type=\"checkbox\" name=\"c\" checked=\"checked\">\n  <span>Peter</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "not",
      "return": "jQuery",
      "title": ".not()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "selector",
            "desc":
              "A string containing a selector expression, a DOM element, or an array of elements to match against the set.",
            "type": [
              {
                "name": "Selector"
              },
              {
                "name": "Element"
              },
              {
                "name": "Array"
              }
            ]
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": ["index", "element", "this"]
            },
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "element",
                "type": "Element"
              }
            ],
            "return": {
              "type": "Boolean"
            }
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "selection",
            "type": "jQuery",
            "desc":
              "An existing jQuery object to match the current set of elements against."
          }
        }
      ],
      "desc": "Remove elements from the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": ".not()"
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          "The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).",
          {
            "code": ".not()"
          },
          {
            "code": "getElementById()"
          },
          "This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.",
          {
            "code": [".not()", ".filter()", "true"]
          },
          {
            "strong": "Note:",
            "code": ".not()"
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).not( \":even\" ).css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li id=\"notli\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).not( document.getElementById( \"notli\" ) )\n  .css( \"background-color\", \"red\" );"
          }
        ],
        "h4": "Removing Specific Elements"
      },
      "example": [
        {
          "desc": "Adds a border to divs that are not green or blue.",
          "code":
            "$( \"div\" ).not( \".green, #blueone\" )\n  .css( \"border-color\", \"red\" );",
          "css":
            "div {     width: 50px;\n    height: 50px;\n    margin: 10px;\n    float: left;\n    background: yellow;\n    border: 2px solid white;\n  }\n  .green {     background: #8f8;\n  }\n  .gray {     background: #ccc;\n  }\n  #blueone {     background: #99f;\n  }",
          "html":
            "<div></div>\n<div id=\"blueone\"></div>\n<div></div>\n<div class=\"green\"></div>\n<div class=\"green\"></div>\n<div class=\"gray\"></div>\n<div></div>"
        },
        {
          "desc":
            "Removes the element with the ID \"selected\" from the set of all paragraphs.",
          "code": "$( \"p\" ).not( $( \"#selected\" )[ 0 ] );"
        },
        {
          "desc":
            "Removes the element with the ID \"selected\" from the set of all paragraphs.",
          "code": "$( \"p\" ).not( \"#selected\" );"
        },
        {
          "desc":
            "Removes all elements that match \"div p.selected\" from the total set of all paragraphs.",
          "code": "$( \"p\" ).not( $( \"div p.selected\" ) );"
        }
      ],
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "traversing/miscellaneous-traversal"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "nth-child",
      "return": "",
      "title": ":nth-child() Selector",
      "sample": ":nth-child(index/even/odd/equation)",
      "signature": {
        "added": "1.1.4",
        "argument": {
          "name": "index",
          "type": "Number/String",
          "desc": {
            "code": ["1", "even", "odd", ":nth-child(even)", ":nth-child(4n)"]
          }
        }
      },
      "desc": "Selects all elements that are the nth-child of their parent.",
      "longdesc": {
        "p": [
          {
            "code": [
              ":nth-",
              "n",
              ":eq()",
              ":even",
              "<ul>",
              "<li>",
              "$( \"li:nth-child(1)\" )",
              "<li>",
              "$( \"li:eq(1)\" )"
            ]
          },
          {
            "code": [":nth-child(n)", ":eq(n)", ":nth-child(n)", ":eq(n)"]
          },
          {
            "a": {
              "href": "http://www.w3.org/TR/css3-selectors/#nth-child-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Find the second li in each matched ul and note it.",
          "code":
            "$( \"ul li:nth-child(2)\" ).append( \"<span> - 2nd!</span>\" );",
          "css": "div {     float: left;\n  }\n  span {     color: blue;\n  }",
          "html":
            "<div>\n  <ul>\n    <li>John</li>\n    <li>Karl</li>\n    <li>Brandon</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Sam</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Glen</li>\n    <li>Tane</li>\n    <li>Ralph</li>\n    <li>David</li>\n  </ul>\n</div>"
        },
        {
          "desc":
            "This is a playground to see how the selector works with different strings.  Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one.  The :nth-child, however, counts the index of the child to its particular parent.  In any case, it's easier to see than explain so...",
          "code":
            "$( \"button\" ).click(function() {   var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text( str );\n});",
          "css":
            "button {     display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {     float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {     color: blue;\n    font-size: 18px;\n  }\n  #inner {     color: red;\n  }\n  td {     width: 50px;\n    text-align: center;\n  }",
          "html":
            "<div>\n  <button>:nth-child(even)</button>\n  <button>:nth-child(odd)</button>\n  <button>:nth-child(3n)</button>\n  <button>:nth-child(2)</button>\n</div>\n<div>\n  <button>:nth-child(3n+1)</button>\n  <button>:nth-child(3n+2)</button>\n  <button>:even</button>\n  <button>:odd</button>\n</div>\n\n<div>\n  <table>\n    <tr><td>John</td></tr>\n    <tr><td>Karl</td></tr>\n    <tr><td>Brandon</td></tr>\n    <tr><td>Benjamin</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Sam</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Glen</td></tr>\n    <tr><td>Tane</td></tr>\n    <tr><td>Ralph</td></tr>\n    <tr><td>David</td></tr>\n    <tr><td>Mike</td></tr>\n    <tr><td>Dan</td></tr>\n  </table>\n</div>\n\n<span>tr<span id=\"inner\"></span></span>"
        }
      ],
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "nth-last-child",
      "return": "",
      "title": ":nth-last-child() Selector",
      "sample": ":nth-last-child(index/even/odd/equation)",
      "signature": {
        "added": "1.9",
        "argument": {
          "name": "index",
          "type": "Number/String",
          "desc": {
            "code": [
              "1",
              "even",
              "odd",
              ":nth-last-child(even)",
              ":nth-last-child(4n)"
            ]
          }
        }
      },
      "desc":
        "Selects all elements that are the nth-child of their parent, counting from the last element to the first.",
      "longdesc": {
        "p": [
          {
            "code": [
              ":nth-",
              "n",
              ":eq()",
              ":even",
              "<ul>",
              "<li>",
              "$( \"li:nth-last-child(1)\" )",
              "<li>"
            ]
          },
          {
            "a": {
              "href":
                "http://www.w3.org/TR/css3-selectors/#nth-last-child-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Find the second to last li in each matched ul and note it.",
          "code":
            "$( \"ul li:nth-last-child(2)\" ).append( \"<span> - 2nd to last!</span>\" );",
          "css": "div {     float: left;\n  }\n  span {     color: blue;\n  }",
          "html":
            "<div>\n  <ul>\n    <li>John</li>\n    <li>Karl</li>\n    <li>Adam</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Dan</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Dave</li>\n    <li>Rick</li>\n    <li>Timmy</li>\n    <li>Gibson</li>\n  </ul>\n</div>"
        },
        {
          "desc":
            "This is a playground to see how the selector works with different strings.",
          "code":
            "$( \"button\" ).click(function() {   var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text(str);\n});",
          "css":
            "button {     display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {     float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {     color: blue;\n    font-size:18px;\n  }\n  #inner {     color: red;\n  }\n  td {     width: 50px;\n    text-align: center;\n  }",
          "html":
            "<div>\n  <button>:nth-last-child(even)</button>\n  <button>:nth-last-child(odd)</button>\n  <button>:nth-last-child(3n)</button>\n  <button>:nth-last-child(2)</button>\n</div>\n<div>\n  <button>:nth-last-child(3n+1)</button>\n  <button>:nth-last-child(3n+2)</button>\n</div>\n<div>\n  <table>\n    <tr><td>John</td></tr>\n    <tr><td>Karl</td></tr>\n    <tr><td>Brandon</td></tr>\n    <tr><td>Benjamin</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Sam</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Glen</td></tr>\n    <tr><td>Tane</td></tr>\n    <tr><td>Ralph</td></tr>\n    <tr><td>David</td></tr>\n    <tr><td>Mike</td></tr>\n    <tr><td>Dan</td></tr>\n  </table>\n</div>\n<span>tr<span id=\"inner\"></span></span>"
        }
      ],
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "nth-last-of-type",
      "return": "",
      "title": ":nth-last-of-type() Selector",
      "sample": ":nth-last-of-type(index/even/odd/equation)",
      "signature": {
        "added": "1.9",
        "argument": {
          "name": "index",
          "type": "Number/String",
          "desc": {
            "code": [
              "1",
              "even",
              "odd",
              ":nth-last-of-type(even)",
              ":nth-last-of-type(4n)"
            ]
          }
        }
      },
      "desc":
        "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.",
      "longdesc": {
        "p": [
          {
            "code": [
              ":nth-",
              "n",
              ":eq()",
              ":even",
              "<ul>",
              "<li>",
              "$('li:nth-last-of-type(1)')",
              "<li>"
            ]
          },
          {
            "a": {
              "href":
                "http://www.w3.org/TR/css3-selectors/#nth-last-of-type-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Find the second to last li in each matched ul and note it.",
          "code":
            "$( \"ul li:nth-last-of-type(2)\" ).append( \"<span> - 2nd to last!</span>\" );",
          "css": "div {     float: left;\n  }\n  span {     color: blue;\n  }",
          "html":
            "<div>\n  <ul>\n    <li>John</li>\n    <li>Karl</li>\n    <li>Adam</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Dan</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Dave</li>\n    <li>Rick</li>\n    <li>Timmy</li>\n    <li>Gibson</li>\n  </ul>\n</div>"
        },
        {
          "desc":
            "This is a playground to see how the selector works with different strings.",
          "code":
            "$( \"button\" ).click(function() {   var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text( str );\n});",
          "css":
            "button {     display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {     float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {     color: blue;\n    font-size: 18px;\n  }\n  #inner {     color: red;\n  }\n  td {     width: 50px;\n    text-align: center;\n  }",
          "html":
            "<div>\n  <button>:nth-last-of-type(even)</button>\n  <button>:nth-last-of-type(odd)</button>\n  <button>:nth-last-of-type(3n)</button>\n  <button>:nth-last-of-type(2)</button>\n</div>\n<div>\n  <button>:nth-last-of-type(3n+1)</button>\n  <button>:nth-last-of-type(3n+2)</button>\n</div>\n\n<div>\n  <table>\n    <tr><td>John</td></tr>\n    <tr><td>Karl</td></tr>\n    <tr><td>Brandon</td></tr>\n    <tr><td>Benjamin</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Sam</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Glen</td></tr>\n    <tr><td>Tane</td></tr>\n    <tr><td>Ralph</td></tr>\n    <tr><td>David</td></tr>\n    <tr><td>Mike</td></tr>\n    <tr><td>Dan</td></tr>\n  </table>\n</div>\n\n<span>tr<span id=\"inner\"></span></span>"
        }
      ],
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "nth-of-type",
      "return": "",
      "title": ":nth-of-type() Selector",
      "sample": ":nth-of-type(index/even/odd/equation)",
      "signature": {
        "added": "1.9",
        "argument": {
          "name": "index",
          "type": "Number/String",
          "desc": {
            "code": [
              "1",
              "even",
              "odd",
              ":nth-of-type(even)",
              ":nth-of-type(4n)"
            ]
          }
        }
      },
      "desc":
        "Selects all elements that are the nth child of their parent in relation to siblings with the same element name.",
      "longdesc": {
        "p": [
          {
            "code": [":nth-", "n", ":eq()", ":even"]
          },
          {
            "a": {
              "href": "http://www.w3.org/TR/css3-selectors/#nth-of-type-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "example": {
        "desc":
          "Find each span that is second in relation to its sibling spans.",
        "code":
          "$( \"span:nth-of-type(2)\" )\n  .append( \"<span> is 2nd sibling span</span>\" )\n  .addClass( \"nth\" );",
        "css": ".nth {     color: red;\n  }",
        "html":
          "<div>\n  <span>John</span>,\n  <b>Kim</b>,\n  <span>Adam</span>,\n  <b>Rafael</b>,\n  <span>Oleg</span>\n</div>\n<div>\n  <b>Dave</b>,\n  <span>Ann</span>\n</div>\n<div>\n  <i><span>Maurice</span></i>,\n  <span>Richard</span>,\n  <span>Ralph</span>,\n  <span>Jason</span>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "odd",
      "return": "",
      "title": ":odd Selector",
      "sample": ":odd",
      "signature": {
        "added": "1.0"
      },
      "desc": {
        "a": {
          "href": "/even-selector/",
          "$t": "even"
        }
      },
      "longdesc": {
        "p": {
          "em": "0-based indexing",
          "code": ":odd"
        }
      },
      "note": [
        {
          "id": "jquery-selector-extension",
          "type": "additional",
          "data-selector": ":odd"
        },
        {
          "id": "document-order",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Finds odd table rows, matching the second, fourth and so on (index 1, 3, 5 etc.).",
        "code": "$( \"tr:odd\" ).css( \"background-color\", \"#bbbbff\" );",
        "css": "table {     background: #f3f7f5;\n  }",
        "html":
          "<table border=\"1\">\n  <tr><td>Row with Index #0</td></tr>\n  <tr><td>Row with Index #1</td></tr>\n  <tr><td>Row with Index #2</td></tr>\n  <tr><td>Row with Index #3</td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "off",
      "return": "jQuery",
      "title": ".off()",
      "desc": "Remove an event handler.",
      "signature": [
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\"."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc": {
                "code": ".on()"
              }
            },
            {
              "name": "handler",
              "type": "Function",
              "optional": "true",
              "$t": "",
              "desc": {
                "code": "false"
              },
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "PlainObject",
              "desc":
                "An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s)."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc": {
                "code": ".on()"
              }
            }
          ]
        },
        {
          "added": "1.7",
          "argument": {
            "name": "event",
            "type": "Event",
            "desc": {
              "a": {
                "href": "/category/events/event-object/",
                "code": "jQuery.Event"
              }
            }
          }
        },
        {
          "added": "1.7"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".off()", ".off()"],
            "a": {
              "href": "/on/",
              "code": ".on()"
            },
            "strong":
              "When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed."
          },
          {
            "code": ["\"click\"", "\".myPlugin\""],
            "em": "all"
          },
          {
            "code": ["selector", ".on()", "\"**\""]
          },
          {
            "code": ["handler", ".off"],
            "a": {
              "href": "/jQuery.proxy/",
              "code": "jQuery.proxy()"
            }
          },
          {
            "code": [".on()", "events", "events", "handler", "events", "false"]
          }
        ]
      },
      "example": [
        {
          "desc": "Add and remove event handlers on the colored button.",
          "code":
            "function flash() {   $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {   $( \"body\" )\n    .on( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {   $( \"body\" )\n    .off( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Does nothing...\" );\n});",
          "css":
            "button {     margin: 5px;\n  }\n  button#theone {     color: red;\n    background: yellow;\n  }",
          "html":
            "<button id=\"theone\">Does nothing...</button>\n<button id=\"bind\">Add Click</button>\n<button id=\"unbind\">Remove Click</button>\n<div style=\"display:none;\">Click!</div>"
        },
        {
          "desc": "Remove all event handlers from all paragraphs:",
          "code": "$( \"p\" ).off();"
        },
        {
          "desc": "Remove all delegated click handlers from all paragraphs:",
          "code": "$( \"p\" ).off( \"click\", \"**\" );"
        },
        {
          "desc":
            "Remove just one previously bound handler by passing it as the third argument:",
          "code":
            "var foo = function() {   // Code to handle some kind of event\n};\n\n// ... Now foo will be called when paragraphs are clicked ...\n$( \"body\" ).on( \"click\", \"p\", foo );\n\n// ... Foo will no longer be called.\n$( \"body\" ).off( \"click\", \"p\", foo );"
        },
        {
          "desc": "Unbind all delegated event handlers by their namespace:",
          "code":
            "var validate = function() {   // Code to validate form entries\n};\n\n// Delegate events under the \".validator\" namespace\n$( \"form\" ).on( \"click.validator\", \"button\", validate );\n\n$( \"form\" ).on( \"keypress.validator\", \"input[type='text']\", validate );\n\n// Remove event handlers in the \".validator\" namespace\n$( \"form\" ).off( \".validator\" );"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document.",
      "entry": [
        {
          "type": "method",
          "name": "offset",
          "return": "Object",
          "title": ".offset()",
          "signature": {
            "added": "1.2"
          },
          "desc":
            "Get the current coordinates of the first element in the set of matched elements, relative to the document.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".offset()",
                  {
                    "a": {
                      "href": "/position/",
                      "$t": ".position()"
                    }
                  },
                  ".offset()"
                ],
                "em": [
                  "relative to the document",
                  "relative to the offset parent"
                ]
              },
              {
                "code": [".offset()", "top", "left"]
              }
            ],
            "div": {
              "class": "warning",
              "p": [
                {
                  "strong": "Note:",
                  "code": "<html>"
                },
                {
                  "code": ["visibility:hidden", "display:none"]
                }
              ]
            }
          },
          "note": {
            "id": "dimensions-number",
            "type": "additional",
            "data-title": ".offset()"
          },
          "example": [
            {
              "desc": "Access the offset of the second paragraph:",
              "code":
                "var p = $( \"p:last\" );\nvar offset = p.offset();\np.html( \"left: \" + offset.left + \", top: \" + offset.top );",
              "css": "p {     margin-left: 10px;\n  }",
              "html": "<p>Hello</p><p>2nd Paragraph</p>"
            },
            {
              "desc": "Click to see the offset.",
              "code":
                "$( \"*\", document.body ).click(function( event ) {   var offset = $( this ).offset();\n  event.stopPropagation();\n  $( \"#result\" ).text( this.tagName +\n    \" coords ( \" + offset.left + \", \" + offset.top + \" )\" );\n});",
              "css":
                "p {     margin-left: 10px;\n    color: blue;\n    width: 200px;\n    cursor: pointer;\n  }\n  span {     color: red;\n    cursor: pointer;\n  }\n  div.abs {     width: 50px;\n    height: 50px;\n    position: absolute;\n    left: 220px;\n    top: 35px;\n    background-color: green;\n    cursor: pointer;\n  }",
              "html":
                "<div id=\"result\">Click an element.</div>\n<p>\n  This is the best way to <span>find</span> an offset.\n</p>\n<div class=\"abs\">\n</div>"
            }
          ],
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "offset",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.4",
              "argument": {
                "name": "coordinates",
                "type": "PlainObject",
                "desc": {
                  "code": ["top", "left"]
                }
              }
            },
            {
              "added": "1.4",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "coords",
                    "type": "PlainObject"
                  }
                ],
                "return": {
                  "type": "PlainObject"
                },
                "desc": {
                  "code": ["top", "left"]
                }
              }
            }
          ],
          "desc":
            "Set the current coordinates of every element in the set of matched elements, relative to the document.",
          "longdesc": {
            "p": {
              "code": [".offset()", "position", "static", "relative"],
              "em": "relative to the document"
            }
          },
          "example": {
            "desc": "Set the offset of the second paragraph:",
            "code": "$( \"p:last\" ).offset({ top: 10, left: 30 });",
            "css": "p {     margin-left: 10px;\n  }",
            "html": "<p>Hello</p><p>2nd Paragraph</p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "offsetParent",
      "return": "jQuery",
      "title": ".offsetParent()",
      "signature": {
        "added": "1.2.6"
      },
      "desc": "Get the closest ancestor element that is positioned.",
      "longdesc": {
        "p": [
          {
            "code": [".offsetParent()", "relative", "absolute", "fixed"]
          },
          "Consider a page with a basic nested list on it, with a positioned element:",
          "If we begin at item A, we can find its positioned ancestor:",
          "This will change the color of list item II, which is positioned."
        ],
        "pre": [
          {
            "code":
              "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\" style=\"position: relative;\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.item-a\" ).offsetParent().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc": "Find the offsetParent of item \"A.\"",
        "height": "250",
        "code":
          "$( \"li.item-a\" ).offsetParent().css( \"background-color\", \"red\" );",
        "html":
          "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\" style=\"position: relative;\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
      },
      "category": [
        {
          "slug": "offset"
        },
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.2.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "on",
      "return": "jQuery",
      "title": ".on()",
      "desc":
        "Attach an event handler function for one or more events to the selected elements.",
      "signature": [
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\"."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc": {
                "code": "null"
              }
            },
            {
              "name": "data",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "a": {
                  "href": "/event.data/",
                  "code": "event.data"
                }
              }
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": {
                "code": ["false", "return false"]
              },
              "argument": [
                {
                  "name": "eventObject",
                  "type": "Event"
                },
                {
                  "name": "extraParameter",
                  "type": "Anything",
                  "optional": "true",
                  "rest": "true"
                }
              ]
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "PlainObject",
              "desc":
                "An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s)."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc":
                "A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element."
            },
            {
              "name": "data",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "a": {
                  "href": "/event.data/",
                  "code": "event.data"
                }
              }
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on()", ".on()", ".on()"],
            "a": [
              {
                "href": "/bind/",
                "code": ".bind()"
              },
              {
                "href": "/delegate/",
                "code": ".delegate()"
              },
              {
                "href": "/live/",
                "code": ".live()"
              },
              {
                "href": "/off/",
                "code": ".off()"
              },
              {
                "href": "/one/",
                "code": ".one()"
              }
            ]
          },
          {
            "code": ["events", "handler", "click"],
            "a": {
              "href": "/trigger/",
              "code": ".trigger()"
            }
          },
          {
            "em": "event namespaces",
            "code": [
              "\"click.myPlugin.simple\"",
              ".off(\"click.myPlugin\")",
              ".off(\"click.simple\")"
            ]
          },
          {
            "code": [".on()", "events", "events", "false", "handler"]
          },
          {
            "em": ["bubble", "propagate"],
            "strong": "event target",
            "code": ["document", "change", "submit"]
          },
          {
            "code": "selector",
            "em": ["direct", "directly-bound"]
          },
          {
            "code": "selector",
            "em": "delegated"
          },
          {
            "strong": {
              "code": ".on()"
            }
          },
          {
            "strong": "Delegated events",
            "em": "descendant elements",
            "code": ["document", "document", "head"]
          },
          {
            "code": "tbody"
          },
          {
            "code": ["tr", "tbody"]
          },
          {
            "strong": "Note:"
          },
          {
            "code": ["handler", "false", "events", ".on()"]
          },
          {
            "code": [".trigger()", "event.originalEvent"],
            "a": [
              {
                "href": "/category/events/event-object/",
                "code": "Event"
              },
              {
                "href": "/event.type/",
                "code": "event.type"
              },
              {
                "href": "/event.target/",
                "code": "event.target"
              }
            ],
            "em": "normalized subset"
          },
          {
            "code": [
              "document",
              "event.stopPropagation()",
              "event.stopImmediatePropagation()"
            ],
            "em": "will"
          },
          {
            "code": ["event.preventDefault()", "click"],
            "a": {
              "href":
                "http://www.w3.org/TR/DOM-Level-3-Events/#event-types-list",
              "$t": "W3C Events Specification"
            }
          },
          {
            "code": [
              "false",
              "event.stopPropagation()",
              "event.preventDefault()",
              "false",
              "handler",
              "function(){ return false; }",
              "$( \"a.disabled\" ).on( \"click\", false );"
            ]
          },
          {
            "code": ["this", "selector", "this", "event.target", "$( this )"]
          },
          {
            "code": [
              "data",
              ".on()",
              "null",
              "undefined",
              "data",
              "selector",
              "null"
            ],
            "a": {
              "href": "/event.data/",
              "code": "event.data"
            }
          },
          {
            "code": "event.data"
          },
          "The above code will generate two different alerts when the button is clicked.",
          {
            "code": [
              "data",
              ".on()",
              "Event",
              ".trigger()",
              ".triggerHandler()"
            ],
            "a": [
              {
                "href": "/trigger/",
                "code": ".trigger()"
              },
              {
                "href": "/triggerHandler/",
                "code": ".triggerHandler()"
              }
            ]
          },
          {
            "code": ["click", "mousemove", "scroll", "setTimeout"]
          },
          {
            "code": ["document", "document.body"]
          },
          {
            "code": [
              "tag#id.class",
              "\"#myForm\"",
              "\"a.external\"",
              "\"button\"",
              "$( \"body\" ).on( \"click\", \"#commentForm .addNew\", addComment )",
              "$( \"#commentForm\" ).on( \"click\", \".addNew\", addComment )"
            ]
          },
          {
            "a": [
              {
                "href": "/click/",
                "code": ".click()"
              },
              {
                "href": "/category/events/",
                "$t": "events category"
              }
            ]
          },
          {
            "em": [
              "Deprecated in jQuery 1.8, removed in 1.9:",
              "single event handler",
              "one or two"
            ],
            "code": [
              "\"hover\"",
              "\"mouseenter mouseleave\"",
              "event.type",
              "mouseenter",
              "mouseleave"
            ],
            "a": {
              "href": "/hover/",
              "code": ".hover()"
            }
          },
          {
            "code": ["object", "embed", "applet"]
          },
          {
            "code": [
              "focus",
              "blur",
              "focusin",
              "focusout",
              "focus",
              "blur",
              "focusin",
              "focusout"
            ]
          },
          {
            "code": ["load", "scroll", "error", "<img>", "paste", "reset"],
            "em": "can"
          },
          {
            "code": ["error", "window", "window.onerror"]
          },
          {
            "code": "event.stopImmediatePropagation()",
            "a": {
              "href":
                "http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener",
              "$t": "W3C events specification"
            }
          },
          {
            "code": ["handler2", "click"],
            "a": {
              "href": "/off/",
              "code": ".off()"
            }
          }
        ],
        "h2": [
          {
            "id": "event-names",
            "$t": "Event names and namespaces"
          },
          {
            "id": "direct-and-delegated-events",
            "$t": "Direct and delegated events"
          },
          {
            "id": "event-handler",
            "$t": "The event handler and its environment"
          },
          {
            "id": "passing-data",
            "$t": "Passing data to the handler"
          },
          {
            "id": "event-performance",
            "$t": "Event performance"
          },
          {
            "id": "additional-notes",
            "$t": "Additional notes"
          }
        ],
        "pre": [
          {
            "code":
              "$( \"#dataTable tbody tr\" ).on( \"click\", function() {   console.log( $( this ).text() );\n});"
          },
          {
            "code":
              "$( \"#dataTable tbody\" ).on( \"click\", \"tr\", function() {   console.log( $( this ).text() );\n});"
          },
          {
            "code":
              "function notify() {   alert( \"clicked\" );\n}\n$( \"button\" ).on( \"click\", notify );"
          },
          {
            "code":
              "function greet( event ) {   alert( \"Hello \" + event.data.name );\n}\n$( \"button\" ).on( \"click\", {   name: \"Karl\"\n}, greet );\n$( \"button\" ).on( \"click\", {   name: \"Addy\"\n}, greet );"
          },
          {
            "code":
              "var $test = $( \"#test\" );\n\nfunction handler1() {   console.log( \"handler1\" );\n  $test.off( \"click\", handler2 );\n}\n\nfunction handler2() {   console.log( \"handler2\" );\n}\n\n$test.on( \"click\", handler1 );\n$test.on( \"click\", handler2 );"
          }
        ]
      },
      "example": [
        {
          "desc": "Display a paragraph's text in an alert when it is clicked:",
          "code":
            "$( \"p\" ).on( \"click\", function() {   alert( $( this ).text() );\n});"
        },
        {
          "desc":
            "Pass data to the event handler, which is specified here by name:",
          "code":
            "function myHandler( event ) {   alert( event.data.foo );\n}\n$( \"p\" ).on( \"click\", { foo: \"bar\" }, myHandler );"
        },
        {
          "desc": {
            "code": "false"
          },
          "code": "$( \"form\" ).on( \"submit\", false );"
        },
        {
          "desc": {
            "code": ".preventDefault()"
          },
          "code":
            "$( \"form\" ).on( \"submit\", function( event ) {   event.preventDefault();\n});"
        },
        {
          "desc": {
            "code": ".stopPropagation()"
          },
          "code":
            "$( \"form\" ).on( \"submit\", function( event ) {   event.stopPropagation();\n});"
        },
        {
          "desc": {
            "code": ".trigger()"
          },
          "code":
            "$( \"div\" ).on( \"click\", function( event, person ) {   alert( \"Hello, \" + person.name );\n});\n$( \"div\" ).trigger( \"click\", { name: \"Jim\" } );"
        },
        {
          "desc": {
            "code": ".trigger()"
          },
          "code":
            "$( \"div\" ).on( \"click\", function( event, salutation, name ) {   alert( salutation + \", \" + name );\n});\n$( \"div\" ).trigger( \"click\", [ \"Goodbye\", \"Jim\" ] );"
        },
        {
          "desc": "Attach and trigger custom (non-browser) events.",
          "code":
            "$( \"p\" ).on( \"myCustomEvent\", function( event, myName ) {   $( this ).text( myName + \", hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( \"button\" ).click(function () {   $( \"p\" ).trigger( \"myCustomEvent\", [ \"John\" ] );\n});",
          "css": "p {     color: red;\n  }\n  span {     color: blue;\n  }",
          "html":
            "<p>Has an attached custom event.</p>\n<button>Trigger custom event</button>\n<span style=\"display:none;\"></span>"
        },
        {
          "desc":
            "Attach multiple event handlers simultaneously using a plain object.",
          "html": "<div class=\"test\">test div</div>",
          "css":
            ".test {     color: #000;\n    padding: .5em;\n    border: 1px solid #444;\n  }\n  .active {     color: #900;\n  }\n  .inside {     background-color: aqua;\n  }",
          "code":
            "$( \"div.test\" ).on({   click: function() {     $( this ).toggleClass( \"active\" );\n  }, mouseenter: function() {     $( this ).addClass( \"inside\" );\n  }, mouseleave: function() {     $( this ).removeClass( \"inside\" );\n  }\n});"
        },
        {
          "desc": {
            "code": ".on()"
          },
          "code":
            "var count = 0;\n$( \"body\" ).on( \"click\", \"p\", function() {   $( this ).after( \"<p>Another paragraph! \" + (++count) + \"</p>\" );\n});",
          "css":
            "p {     background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {     background: #ccc;\n  }\n  span {     color: red;\n  }",
          "html": "<p>Click me!</p>\n<span></span>"
        },
        {
          "desc":
            "Display each paragraph's text in an alert box whenever it is clicked:",
          "code":
            "$( \"body\" ).on( \"click\", \"p\", function() {   alert( $( this ).text() );\n});"
        },
        {
          "desc": {
            "code": ".preventDefault()"
          },
          "code":
            "$( \"body\" ).on( \"click\", \"a\", function( event ) {   event.preventDefault();\n});"
        },
        {
          "desc": {
            "code": ["mouseenter", "mouseleave"]
          },
          "code":
            "$( \"#cart\" ).on( \"mouseenter mouseleave\", function( event ) {   $( this ).toggleClass( \"active\" );\n});"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "one",
      "return": "jQuery",
      "title": ".one()",
      "desc":
        "Attach a handler to an event for the elements. The handler is executed at most once per element per event type.",
      "signature": [
        {
          "added": "1.1",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names."
            },
            {
              "name": "data",
              "type": "PlainObject",
              "optional": "true",
              "desc": {
                "a": {
                  "href": "/event.data/",
                  "code": "event.data"
                }
              }
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "String",
              "desc":
                "One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\"."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc": {
                "code": "null"
              }
            },
            {
              "name": "data",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "a": {
                  "href": "/event.data/",
                  "code": "event.data"
                }
              }
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": {
                "code": ["false", "return false"]
              },
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "events",
              "type": "PlainObject",
              "desc":
                "An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s)."
            },
            {
              "name": "selector",
              "type": "String",
              "optional": "true",
              "desc":
                "A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element."
            },
            {
              "name": "data",
              "type": "Anything",
              "optional": "true",
              "desc": {
                "a": {
                  "href": "/event.data/",
                  "code": "event.data"
                }
              }
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".one()", ".on()"]
          },
          {
            "code": "foo"
          },
          {
            "code": ".off()"
          },
          {
            "em": "once for each event type"
          },
          {
            "em": "two",
            "code": ["click", "mouseover"]
          }
        ],
        "pre": [
          {
            "code":
              "$( \"#foo\" ).one( \"click\", function() {   alert( \"This will be displayed only once.\" );\n});"
          },
          {
            "code":
              "$( \"#foo\" ).on( \"click\", function( event ) {   alert( \"This will be displayed only once.\" );\n  $( this ).off( event );\n});"
          },
          {
            "code":
              "$( \"#foo\" ).one( \"click mouseover\", function( event ) {   alert( \"The \" + event.type + \" event happened!\" );\n});"
          }
        ]
      },
      "example": [
        {
          "desc": "Tie a one-time click to each div.",
          "code":
            "var n = 0;\n$( \"div\" ).one( \"click\", function() {   var index = $( \"div\" ).index( this );\n  $( this ).css({     borderStyle: \"inset\",\n    cursor: \"auto\"\n  });\n  $( \"p\" ).text( \"Div at index #\" + index + \" clicked.\" +\n    \" That's \" + (++n) + \" total clicks.\" );\n});",
          "css":
            "div {     width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    background: green;\n    border: 10px outset;\n    cursor:pointer;\n  }\n  p {     color: red;\n    margin: 0;\n    clear: left;\n  }",
          "html":
            "<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<p>Click a green square...</p>"
        },
        {
          "desc":
            "To display the text of all paragraphs in an alert box the first time each of them is clicked:",
          "code":
            "$( \"p\" ).one( \"click\", function() {   alert( $( this ).text() );\n});"
        },
        {
          "desc": "Event handlers will trigger once per element per event type",
          "code":
            "var n = 0;\n$(\".target\").one(\"click mouseenter\", function() {   $(\".count\").html(++n);\n});",
          "html":
            "<div class=\"count\">0</div>\n<div class=\"target\">Hover/click me</div>"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.1"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "only-child",
      "return": "",
      "title": ":only-child Selector",
      "sample": ":only-child",
      "signature": {
        "added": "1.1.4"
      },
      "desc": "Selects all elements that are the only child of their parent.",
      "longdesc": {
        "p": "If the parent has other child elements, nothing is matched."
      },
      "example": {
        "desc":
          "Change the text and add a border for each button that is the only child of its parent.",
        "code":
          "$( \"div button:only-child\" ).text( \"Alone\" ).css( \"border\", \"2px blue solid\" );",
        "css":
          "div {     width: 100px;\n    height: 80px;\n    margin: 5px;\n    float: left;\n    background: #b9e;\n  }",
        "html":
          "<div>\n  <button>Sibling!</button>\n  <button>Sibling!</button>\n</div>\n\n<div>\n  <button>Sibling!</button>\n</div>\n\n<div>\n  None\n</div>\n\n<div>\n  <button>Sibling!</button>\n  <button>Sibling!</button>\n  <button>Sibling!</button>\n</div>\n\n<div>\n  <button>Sibling!</button>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "only-of-type",
      "return": "",
      "title": ":only-of-type Selector",
      "sample": ":only-of-type",
      "signature": {
        "added": "1.9"
      },
      "desc":
        "Selects all elements that have no siblings with the same element name.",
      "longdesc": {
        "p":
          "If the parent has other child elements with the same element name, nothing is matched."
      },
      "example": {
        "desc":
          "Change the text and add a border for each button that is the only child button of its parent.",
        "code":
          "$( \"button:only-of-type\" ).text( \"Alone\" ).css( \"border\", \"2px blue solid\" );",
        "css":
          "div {     width: 100px;\n    height: 80px;\n    margin: 5px;\n    float: left;\n    background: #b9e;\n  }\n  span {     padding: 2px;\n    margin: 3px;\n    line-height: 1.4;\n    border: 1px solid #000;\n  }",
        "html":
          "<div>\n  <button>Sibling!</button>\n  <button>Sibling!</button>\n</div>\n\n<div>\n  <button>Sibling!</button>\n</div>\n<div>\n  None\n</div>\n\n<div>\n  <button>Sibling!</button>\n  <span>Sibling!</span>\n  <span>Sibling!</span>\n</div>\n\n<div>\n  <button>Sibling!</button>\n</div>"
      },
      "category": [
        {
          "slug": "selectors/child-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "outerHeight",
          "return": "Number",
          "title": ".outerHeight()",
          "signature": {
            "added": "1.2.6",
            "argument": {
              "name": "includeMargin",
              "optional": "true",
              "type": "Boolean",
              "default": "false",
              "desc":
                "A Boolean indicating whether to include the element's margin in the calculation."
            }
          },
          "desc":
            "Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": ["undefined", "null"]
              },
              {
                "code": [
                  "window",
                  "document",
                  {
                    "a": {
                      "href": "/height/",
                      "$t": ".height()"
                    }
                  },
                  ".outerHeight()",
                  "border-collapse: collapse"
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_03.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured height"
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".outerHeight()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".outerHeight()"
            }
          ],
          "example": {
            "desc": "Get the outerHeight of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text(\n  \"outerHeight:\" + p.outerHeight() +\n  \" , outerHeight( true ):\" + p.outerHeight( true ) );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p><p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "outerHeight",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.8.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ],
                "desc":
                  "A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string)."
              }
            },
            {
              "added": "1.8.0",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "height",
                    "type": "Number"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the CSS outer height of each element in the set of matched elements.",
          "longdesc": {
            "p": {
              "code": [".outerHeight(value)", "100px", "50%", "auto"]
            }
          },
          "example": {
            "desc":
              "Change the outer height of each div the first time it is clicked (and change its color).",
            "code":
              "var modHeight = 60;\n$( \"div\" ).one( \"click\", function() {   $( this ).outerHeight( modHeight ).addClass( \"mod\" );\n  modHeight -= 8;\n});",
            "css":
              "div {     width: 50px;\n    padding: 10px;\n    height: 60px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {     background: blue;\n    cursor: default;\n  }",
            "html":
              "<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.8"
            }
          ]
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "outerWidth",
          "return": "Number",
          "title": ".outerWidth()",
          "signature": {
            "added": "1.2.6",
            "argument": {
              "name": "includeMargin",
              "optional": "true",
              "type": "Boolean",
              "default": "false",
              "desc":
                "A Boolean indicating whether to include the element's margin in the calculation."
            }
          },
          "desc":
            "Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": ["undefined", "null"]
              },
              {
                "code": [
                  "window",
                  "document",
                  {
                    "a": {
                      "href": "/width/",
                      "$t": ".width()"
                    }
                  },
                  ".outerWidth()",
                  "border-collapse: collapse"
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_06.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured width"
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".outerWidth()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".outerWidth()"
            }
          ],
          "example": {
            "desc": "Get the outerWidth of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text(\n  \"outerWidth:\" + p.outerWidth() +\n  \" , outerWidth( true ):\" + p.outerWidth( true ) );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p><p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "outerWidth",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.8.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ],
                "desc":
                  "A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string)."
              }
            },
            {
              "added": "1.8.0",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "width",
                    "type": "Number"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the CSS outer width of each element in the set of matched elements.",
          "longdesc": {
            "p": {
              "code": [".outerWidth(value)", "100px", "50%", "auto"]
            }
          },
          "example": {
            "desc":
              "Change the outer width of each div the first time it is clicked (and change its color).",
            "code":
              "var modWidth = 60;\n$( \"div\" ).one( \"click\", function() {   $( this ).outerWidth( modWidth ).addClass( \"mod\" );\n  modWidth -= 8;\n});",
            "css":
              "div {     width: 60px;\n    padding: 10px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {     background: blue;\n    cursor: default;\n  }",
            "html":
              "<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.8"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "parent",
      "return": "",
      "title": ":parent Selector",
      "sample": ":parent",
      "signature": {
        "added": "1.0"
      },
      "desc":
        "Select all elements that have at least one child node (either an element or text).",
      "longdesc": {
        "p": [
          {
            "code": ":empty"
          },
          {
            "code": [":parent", ":empty"]
          },
          {
            "code": ["<p>", "<input>", "<img>", "<br>", "<hr>"],
            "a": {
              "href": "http://www.w3.org/TR/html401/struct/text.html#edef-P",
              "$t": "http://www.w3.org/TR/html401/struct/text.html#edef-P"
            }
          },
          {
            "code": [
              {
                "a": {
                  "href": "/parent/",
                  "$t": ".parent()"
                }
              },
              {
                "a": {
                  "href": "/parents/",
                  "$t": ".parents()"
                }
              }
            ]
          }
        ]
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":parent"
      },
      "example": {
        "desc": "Finds all tds with children, including text.",
        "code": "$( \"td:parent\" ).fadeTo( 1500, 0.3 );",
        "css": "td {     width: 40px;\n    background: green;\n  }",
        "html":
          "<table border=\"1\">\n  <tr><td>Value 1</td><td></td></tr>\n  <tr><td>Value 2</td><td></td></tr>\n</table>"
      },
      "category": [
        {
          "slug": "selectors/content-filter-selector"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "parent",
      "return": "jQuery",
      "title": ".parent()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the parent of each element in the current set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": "parent()"
          },
          {
            "a": {
              "href": "/parents/",
              "code": ".parents()"
            },
            "code": [
              ".parent()",
              "$( \"html\" ).parent()",
              "document",
              "$( \"html\" ).parents()"
            ]
          },
          {
            "code": "$()"
          },
          "Consider a page with a basic nested list on it:",
          "If we begin at item A, we can find its parents:",
          "The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included."
        ],
        "pre": [
          {
            "code":
              "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.item-a\" ).parent().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Shows the parent of each element as (parent > child).  Check the View Source to see the raw html.",
          "code":
            "$( \"*\", document.body ).each(function() {   var parentTag = $( this ).parent().get( 0 ).tagName;\n  $( this ).prepend( document.createTextNode( parentTag + \" > \" ) );\n});",
          "css": "div, p {     margin: 10px;\n  }",
          "html":
            "<div>div,\n  <span>span, </span>\n  <b>b </b>\n</div>\n\n<p>p,\n  <span>span,\n    <em>em </em>\n  </span>\n</p>\n\n<div>div,\n  <strong>strong,\n    <span>span, </span>\n    <em>em,\n      <b>b, </b>\n    </em>\n  </strong>\n  <b>b </b>\n</div>"
        },
        {
          "desc":
            "Find the parent element of each paragraph with a class \"selected\".",
          "code":
            "$( \"p\" ).parent( \".selected\" ).css( \"background\", \"yellow\" );",
          "html":
            "<div><p>Hello</p></div>\n<div class=\"selected\"><p>Hello Again</p></div>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "parents",
      "return": "jQuery",
      "title": ".parents()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": ".parents()",
            "em": "reverse"
          },
          {
            "code": [
              ".parents()",
              {
                "a": {
                  "href": "/parent/",
                  "$t": ".parent()"
                }
              },
              "$( \"html\" ).parent()",
              "document",
              "$( \"html\" ).parents()"
            ]
          },
          {
            "code": "$()"
          },
          "Consider a page with a basic nested list on it:",
          "If we begin at item A, we can find its ancestors:",
          {
            "code": "<html>"
          }
        ],
        "pre": [
          {
            "code":
              "<ul class=\"level-1\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\">II\n    <ul class=\"level-2\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.item-a\" ).parents().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc": "Find all parent elements of each b.",
          "code":
            "var parentEls = $( \"b\" ).parents()\n  .map(function() {     return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n$( \"b\" ).append( \"<strong>\" + parentEls + \"</strong>\" );",
          "css":
            "b, span, p, html body {     padding: .5em;\n    border: 1px solid;\n  }\n  b {     color: blue;\n  }\n  strong {     color: red;\n  }",
          "html":
            "<div>\n  <p>\n    <span>\n      <b>My parents are: </b>\n    </span>\n  </p>\n</div>"
        },
        {
          "desc": "Click to find all unique div parent elements of each span.",
          "code":
            "function showParents() {   $( \"div\" ).css( \"border-color\", \"white\" );\n  var len = $( \"span.selected\" )\n    .parents( \"div\" )\n      .css( \"border\", \"2px red solid\" )\n      .length;\n  $( \"b\" ).text( \"Unique div parents: \" + len );\n}\n$( \"span\" ).click(function() {   $( this ).toggleClass( \"selected\" );\n  showParents();\n});",
          "css":
            "p, div, span {     margin: 2px;\n    padding: 1px;\n  }\n  div {     border: 2px white solid;\n  }\n  span {     cursor: pointer;\n    font-size: 12px;\n  }\n  .selected {     color: blue;\n  }\n  b {     color: red;\n    display: block;\n    font-size: 14px;\n  }",
          "html":
            "<p>\n  <div>\n    <div><span>Hello</span></div>\n      <span>Hello Again</span>\n    </div>\n    <div>\n      <span>And Hello Again</span>\n    </div>\n  </p>\n  <b>Click Hellos to toggle their parents.</b>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "parentsUntil",
      "return": "jQuery",
      "title": ".parentsUntil()",
      "signature": [
        {
          "added": "1.4",
          "argument": [
            {
              "name": "selector",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to indicate where to stop matching ancestor elements."
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "element",
              "optional": "true",
              "type": [
                {
                  "name": "Element"
                },
                {
                  "name": "jQuery"
                }
              ],
              "desc":
                "A DOM node or jQuery object indicating where to stop matching ancestor elements."
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        }
      ],
      "desc":
        "Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.",
      "longdesc": {
        "p": [
          {
            "code": [".parentsUntil()", ".parentsUntil()"]
          },
          {
            "code": ".parents()"
          },
          {
            "strong": ["As of jQuery 1.6", ".parentsUntil()"]
          },
          "The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it."
        ]
      },
      "example": {
        "height": "220px",
        "desc":
          "Find the ancestors of <li class=\"item-a\"> up to <ul class=\"level-1\"> and give them a red background color. Also, find ancestors of <li class=\"item-2\"> that have a class of \"yes\" up to <ul class=\"level-1\"> and give them a green border.",
        "code":
          "$( \"li.item-a\" )\n  .parentsUntil( \".level-1\" )\n    .css( \"background-color\", \"red\" );\n\n$( \"li.item-2\" )\n  .parentsUntil( $( \"ul.level-1\" ), \".yes\" )\n    .css( \"border\", \"3px solid green\" );",
        "html":
          "<ul class=\"level-1 yes\">\n  <li class=\"item-i\">I</li>\n  <li class=\"item-ii\">II\n    <ul class=\"level-2 yes\">\n      <li class=\"item-a\">A</li>\n      <li class=\"item-b\">B\n        <ul class=\"level-3\">\n          <li class=\"item-1\">1</li>\n          <li class=\"item-2\">2</li>\n          <li class=\"item-3\">3</li>\n        </ul>\n      </li>\n      <li class=\"item-c\">C</li>\n    </ul>\n  </li>\n  <li class=\"item-iii\">III</li>\n</ul>"
      },
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "password",
      "return": "",
      "title": ":password Selector",
      "sample": ":password",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type password.",
      "longdesc": {
        "p": {
          "code": [
            "$( \":password\" )",
            "$( \"[type=password]\" )",
            "$( \":password\" )",
            "$( \"*:password\" )",
            "$( \"input:password\" )"
          ]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":password",
        "data-alt": "[type=\"password\"]"
      },
      "example": {
        "desc": "Finds all password inputs.",
        "code":
          "var input = $( \"input:password\" ).css({   background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n\n// Prevent form submission\n$( \"form\" ).submit(function() {   return false;\n});",
        "css": "textarea {     height: 45px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "position",
      "return": "Object",
      "title": ".position()",
      "signature": {
        "added": "1.2"
      },
      "desc":
        "Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".position()",
              {
                "a": {
                  "href": "/offset/",
                  "$t": ".offset()"
                }
              },
              ".position()"
            ],
            "em": ["relative to the offset parent", "relative to the document"]
          },
          {
            "code": ["top", "left"]
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "code": "<html>"
          }
        }
      },
      "note": {
        "id": "dimensions-number",
        "type": "additional",
        "data-title": ".position()"
      },
      "example": {
        "desc": "Access the position of the second paragraph:",
        "code":
          "var p = $( \"p:first\" );\nvar position = p.position();\n$( \"p:last\" ).text( \"left: \" + position.left + \", top: \" + position.top );",
        "css":
          "div {     padding: 15px;\n  }\n  p {     margin-left: 10px;\n  }",
        "html": "<div>\n  <p>Hello</p>\n</div>\n<p></p>"
      },
      "category": [
        {
          "slug": "css"
        },
        {
          "slug": "offset"
        },
        {
          "slug": "manipulation/style-properties"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "prepend",
      "return": "jQuery",
      "title": ".prepend()",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "content",
              "desc":
                "DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            {
              "name": "content",
              "optional": "true",
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "Array"
                },
                {
                  "name": "jQuery"
                }
              ],
              "desc":
                "One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements."
            }
          ]
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "argument": [
              {
                "name": "elementOfArray",
                "type": "Integer"
              },
              {
                "name": "html",
                "type": "String"
              }
            ],
            "return": {
              "type": [
                {
                  "name": "htmlString"
                },
                {
                  "name": "Element"
                },
                {
                  "name": "Text"
                },
                {
                  "name": "jQuery"
                }
              ]
            },
            "desc": {
              "code": "this"
            }
          }
        }
      ],
      "desc":
        "Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": ".prepend()",
            "em": "last",
            "a": {
              "href": "/append/",
              "code": ".append()"
            }
          },
          {
            "code": [
              ".prepend()",
              {
                "a": {
                  "href": "/prependTo/",
                  "$t": ".prependTo()"
                }
              },
              ".prepend()",
              ".prependTo()"
            ]
          },
          "Consider the following HTML:",
          "You can create content and insert it into several elements at once:",
          {
            "code": "<div class=\"inner\">"
          },
          "You can also select an element on the page and insert it into another:",
          {
            "em": ["a single element", "not cloned"]
          },
          {
            "strong": "Important"
          },
          {
            "code": [
              {
                "a": {
                  "href": "/append/",
                  "$t": ".append()"
                }
              },
              {
                "a": {
                  "href": "/before/",
                  "$t": ".before()"
                }
              },
              ".prepend()"
            ]
          },
          {
            "code": ["<div>", "<div>"]
          },
          {
            "code": [
              ".prepend()",
              "<div>",
              "$( \"body\" ).prepend( $newdiv1, newdiv2, existingdiv1 )"
            ]
          }
        ],
        "pre": [
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).prepend( \"<p>Test</p>\" );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">\n    <p>Test</p>\n    Hello\n  </div>\n  <div class=\"inner\">\n    <p>Test</p>\n    Goodbye\n  </div>\n</div>"
          },
          {
            "code": "$( \".container\" ).prepend( $( \"h2\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n    <h2>Greetings</h2>\n    <div class=\"inner\">Hello</div>\n    <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code":
              "var $newdiv1 = $( \"<div id='object1'></div>\"),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n\n$( \"body\" ).prepend( $newdiv1, [ newdiv2, existingdiv1 ] );"
          }
        ],
        "h4": {
          "id": "additional-arguments",
          "$t": "Additional Arguments"
        }
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc": "Prepends some HTML to all paragraphs.",
          "code": "$( \"p\" ).prepend( \"<b>Hello </b>\" );",
          "css": "p {     background: yellow;\n  }",
          "html": "<p>there, friend!</p>\n<p>amigo!</p>"
        },
        {
          "desc": "Prepends a DOM Element to all paragraphs.",
          "code":
            "$( \"p\" ).prepend( document.createTextNode( \"Hello \" ) );",
          "css": "p {     background: yellow;\n  }",
          "html": "<p>is what I'd say</p>\n<p>is what I said</p>"
        },
        {
          "desc":
            "Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.",
          "code": "$( \"p\" ).prepend( $( \"b\" ) );",
          "css": "p {     background: yellow;\n  }",
          "html": "<p> is what was said.</p><b>Hello</b>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-inside"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "prependTo",
      "return": "jQuery",
      "title": ".prependTo()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "target",
          "type": [
            {
              "name": "Selector"
            },
            {
              "name": "htmlString"
            },
            {
              "name": "Element"
            },
            {
              "name": "Array"
            },
            {
              "name": "jQuery"
            }
          ],
          "desc":
            "A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter."
        }
      },
      "desc":
        "Insert every element in the set of matched elements to the beginning of the target.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/prepend/",
                  "$t": ".prepend()"
                }
              },
              ".prependTo()",
              ".prepend()",
              ".prependTo()"
            ]
          },
          "Consider the following HTML:",
          "We can create content and insert it into several elements at once:",
          {
            "code": "<div>"
          },
          "We can also select an element on the page and insert it into another:",
          "If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):",
          "If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last."
        ],
        "pre": [
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"<p>Test</p>\" ).prependTo( \".inner\" );"
          },
          {
            "code":
              "<h2>Greetings</h2>\n<div class=\"container\">\n  <div class=\"inner\">\n    <p>Test</p>\n    Hello\n  </div>\n  <div class=\"inner\">\n    <p>Test</p>\n    Goodbye\n  </div>\n</div>"
          },
          {
            "code": "$( \"h2\" ).prependTo( $( \".container\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>Greetings</h2>\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          }
        ]
      },
      "note": [
        {
          "id": "html-code-execution",
          "type": "additional"
        },
        {
          "id": "svg-support",
          "type": "additional"
        }
      ],
      "example": {
        "desc":
          "Prepend all spans to the element with the ID \"foo\" (Check .prepend() documentation for more examples)",
        "css": "div {     background: yellow;\n  }",
        "code": "$( \"span\" ).prependTo( \"#foo\" );",
        "html":
          "<div id=\"foo\">FOO!</div>\n<span>I have something to say... </span>"
      },
      "category": [
        {
          "slug": "manipulation/dom-insertion-inside"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "prev",
      "return": "jQuery",
      "title": ".prev()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.",
      "longdesc": {
        "p": [
          {
            "code": ".prev()"
          },
          {
            "code": "$()"
          },
          "Consider a page with a simple list on it:",
          "To select the element that comes immediately before item three:",
          "The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.",
          "If no previous sibling exists, or if the previous sibling element does not match a supplied selector, an empty jQuery object is returned.",
          {
            "em": ["all", "adjacent"],
            "a": {
              "href": "/prevAll/",
              "$t": ".prevAll()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).prev().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc": "Find the very previous sibling of each div.",
          "code":
            "var $curr = $( \"#start\" );\n$curr.css( \"background\", \"#f99\" );\n$( \"button\" ).click(function() {   $curr = $curr.prev();\n  $( \"div\" ).css( \"background\", \"\" );\n  $curr.css( \"background\", \"#f99\" );\n});",
          "css":
            "div {     width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px blue solid;\n    padding: 2px;\n  }\n  span {     font-size: 14px;\n  }\n  p {     clear: left;\n    margin: 10px;\n  }",
          "html":
            "<div></div>\n<div></div>\n<div><span>has child</span></div>\n<div></div>\n<div></div>\n<div></div>\n<div id=\"start\"></div>\n<div></div>\n<p><button>Go to Prev</button></p>"
        },
        {
          "desc":
            "For each paragraph, find the very previous sibling that has a class \"selected\".",
          "code":
            "$( \"p\" ).prev( \".selected\" ).css( \"background\", \"yellow\" );",
          "html":
            "<div><span>Hello</span></div>\n<p class=\"selected\">Hello Again</p>\n<p>And Again</p>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "prevAll",
      "return": "jQuery",
      "title": ".prevAll()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": ".prevAll()"
          },
          {
            "code": "$()"
          },
          "Consider a page with a simple list on it:",
          "If we begin at the third item, we can find the elements which come before it:",
          "The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included."
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).prevAll().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": {
        "desc":
          "Locate all the divs preceding the last div and give them a class.",
        "code": "$( \"div:last\" ).prevAll().addClass( \"before\" );",
        "css":
          "div {     width: 70px;\n    height: 70px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.before {     border-color: red;\n  }",
        "html": "<div></div>\n<div></div>\n<div></div>\n<div></div>"
      },
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "prevUntil",
      "return": "jQuery",
      "title": ".prevUntil()",
      "signature": [
        {
          "added": "1.4",
          "argument": [
            {
              "name": "selector",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to indicate where to stop matching preceding sibling elements."
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        },
        {
          "added": "1.6",
          "argument": [
            {
              "name": "element",
              "optional": "true",
              "type": [
                {
                  "name": "Element"
                },
                {
                  "name": "jQuery"
                }
              ],
              "desc":
                "A DOM node or jQuery object indicating where to stop matching preceding sibling elements."
            },
            {
              "name": "filter",
              "optional": "true",
              "type": "Selector",
              "desc":
                "A string containing a selector expression to match elements against."
            }
          ]
        }
      ],
      "desc":
        "Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.",
      "longdesc": {
        "p": [
          {
            "code": [".prevUntil()", ".prevUntil()"]
          },
          {
            "code": {
              "a": {
                "href": "/prevAll/",
                "$t": ".prevAll()"
              }
            }
          },
          {
            "strong": ["As of jQuery 1.6", ".prevUntil()"]
          },
          "The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it."
        ]
      },
      "example": {
        "height": "250px",
        "desc":
          "Find the siblings that precede <dt id=\"term-2\"> up to the preceding <dt> and give them a red background color. Also, find previous <dd> siblings of <dt id=\"term-3\"> up to <dt id=\"term-1\"> and give them a green text color.",
        "code":
          "$( \"#term-2\" ).prevUntil( \"dt\" )\n  .css( \"background-color\", \"red\" );\n\nvar term1 = document.getElementById( \"term-1\" );\n$( \"#term-3\" ).prevUntil( term1, \"dd\" )\n  .css( \"color\", \"green\" );",
        "html":
          "<dl>\n  <dt id=\"term-1\">term 1</dt>\n  <dd>definition 1-a</dd>\n  <dd>definition 1-b</dd>\n  <dd>definition 1-c</dd>\n  <dd>definition 1-d</dd>\n\n  <dt id=\"term-2\">term 2</dt>\n  <dd>definition 2-a</dd>\n  <dd>definition 2-b</dd>\n  <dd>definition 2-c</dd>\n\n  <dt id=\"term-3\">term 3</dt>\n  <dd>definition 3-a</dd>\n  <dd>definition 3-b</dd>\n</dl>"
      },
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "name": "promise",
      "type": "method",
      "return": "Promise",
      "title": ".promise()",
      "signature": {
        "added": "1.6",
        "argument": [
          {
            "name": "type",
            "type": "String",
            "optional": "true",
            "default": "fx",
            "desc": "The type of queue that needs to be observed."
          },
          {
            "name": "target",
            "type": "PlainObject",
            "optional": "true",
            "desc": "Object onto which the promise methods have to be attached"
          }
        ]
      },
      "desc":
        "Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.",
      "longdesc": {
        "p": [
          {
            "code": ".promise()"
          },
          {
            "code": ["type", "\"fx\""]
          },
          {
            "code": ".promise()"
          },
          {
            "code": ["target", ".promise()"]
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "code": [".data()", ".remove()", ".detach()", ".removeData()"]
          }
        }
      },
      "example": [
        {
          "desc": {
            "code": ".promise()"
          },
          "code":
            "var div = $( \"<div>\" );\n\ndiv.promise().done(function( arg1 ) {   // Will fire right away and alert \"true\"\n  alert( this === div && arg1 === div );\n});"
        },
        {
          "desc":
            "Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):",
          "css":
            "div {     height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }",
          "html":
            "<button>Go</button>\n<p>Ready...</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>",
          "code":
            "$( \"button\" ).on( \"click\", function() {   $( \"p\" ).append( \"Started...\" );\n\n  $( \"div\" ).each(function( i ) {     $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );\n  });\n\n  $( \"div\" ).promise().done(function() {     $( \"p\" ).append( \" Finished! \" );\n  });\n});"
        },
        {
          "desc": {
            "code": ["$.when()", ".promise()"]
          },
          "css":
            "div {     height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }",
          "html":
            "<button>Go</button>\n<p>Ready...</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>",
          "code":
            "var effect = function() {   return $( \"div\" ).fadeIn( 800 ).delay( 1200 ).fadeOut();\n};\n\n$( \"button\" ).on( \"click\", function() {   $( \"p\" ).append( \" Started... \" );\n\n  $.when( effect() ).done(function() {     $( \"p\" ).append( \" Finished! \" );\n  });\n});"
        }
      ],
      "category": [
        {
          "slug": "deferred-object"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "prop",
          "return": {
            "type": "Anything"
          },
          "title": ".prop()",
          "signature": {
            "added": "1.6",
            "argument": {
              "name": "propertyName",
              "type": "String",
              "desc": "The name of the property to get."
            }
          },
          "desc":
            "Get the value of a property for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [".prop()", "undefined", ".each()", ".map()"],
                "em": "first"
              },
              {
                "em": ["attributes", "properties"],
                "strong": ["Before jQuery 1.6", "As of jQuery 1.6"],
                "code": [
                  {
                    "a": {
                      "href": "/attr/",
                      "$t": ".attr()"
                    }
                  },
                  ".prop()",
                  ".attr()"
                ]
              },
              {
                "code": [
                  "selectedIndex",
                  "tagName",
                  "nodeName",
                  "nodeType",
                  "ownerDocument",
                  "defaultChecked",
                  "defaultSelected",
                  ".prop()",
                  ".attr()",
                  "attr"
                ]
              },
              {
                "code": [
                  "<input type=\"checkbox\" checked=\"checked\" />",
                  "elem"
                ]
              },
              {
                "a": {
                  "href":
                    "http://www.w3.org/TR/html401/interact/forms.html#h-17.4",
                  "$t": "W3C forms specification"
                },
                "code": "checked",
                "em": {
                  "a": {
                    "href":
                      "http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2",
                    "$t": "boolean attribute"
                  }
                },
                "strong": "true"
              },
              {
                "code": [
                  "checked",
                  "checked",
                  "defaultChecked",
                  "checked",
                  "checked"
                ],
                "em": "initial"
              },
              {
                "code": ["selected", "value"]
              }
            ],
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": ["type", "input"]
              }
            },
            "h4": "Attributes vs. Properties",
            "table": {
              "tr": [
                {
                  "th": {
                    "code": "elem.checked"
                  },
                  "td": {
                    "code": "true"
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).prop( \"checked\" )"
                  },
                  "td": {
                    "code": "true"
                  }
                },
                {
                  "th": {
                    "code": "elem.getAttribute( \"checked\" )"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(1.6)"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(1.6.1+)"
                  },
                  "td": {
                    "code": "\"checked\""
                  }
                },
                {
                  "th": {
                    "code": "$( elem ).attr( \"checked\" )",
                    "em": "(pre-1.6)"
                  },
                  "td": {
                    "code": "true"
                  }
                }
              ]
            },
            "br": {},
            "ul": {
              "li": [
                {
                  "code": "if ( elem.checked )"
                },
                {
                  "code": "if ( $( elem ).prop( \"checked\" ) )"
                },
                {
                  "code": "if ( $( elem ).is( \":checked\" ) )"
                }
              ]
            }
          },
          "note": {
            "id": "prop-memory-leaks",
            "type": "additional"
          },
          "example": {
            "desc":
              "Display the checked property and attribute of a checkbox as it changes.",
            "code":
              "$( \"input\" ).change(function() {   var $input = $( this );\n  $( \"p\" ).html(\n    \".attr( \\\"checked\\\" ): <b>\" + $input.attr( \"checked\" ) + \"</b><br>\" +\n    \".prop( \\\"checked\\\" ): <b>\" + $input.prop( \"checked\" ) + \"</b><br>\" +\n    \".is( \\\":checked\\\" ): <b>\" + $input.is( \":checked\" ) + \"</b>\" );\n}).change();",
            "css":
              "p {     margin: 20px 0 0;\n  }\n  b {     color: blue;\n  }",
            "html":
              "<input id=\"check1\" type=\"checkbox\" checked=\"checked\">\n<label for=\"check1\">Check me</label>\n<p></p>"
          },
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "prop",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.6",
              "argument": [
                {
                  "name": "propertyName",
                  "type": "String",
                  "desc": "The name of the property to set."
                },
                {
                  "name": "value",
                  "type": "Anything",
                  "desc": "A value to set for the property."
                }
              ]
            },
            {
              "added": "1.6",
              "argument": {
                "name": "properties",
                "type": "PlainObject",
                "desc": "An object of property-value pairs to set."
              }
            },
            {
              "added": "1.6",
              "argument": [
                {
                  "name": "propertyName",
                  "type": "String",
                  "desc": "The name of the property to set."
                },
                {
                  "name": "function",
                  "type": "Function",
                  "argument": [
                    {
                      "name": "index",
                      "type": "Integer"
                    },
                    {
                      "name": "oldPropertyValue",
                      "type": "Anything"
                    }
                  ],
                  "return": {
                    "type": "Anything"
                  },
                  "desc": {
                    "code": "this"
                  }
                }
              ]
            }
          ],
          "desc": "Set one or more properties for the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".prop()",
                  "selectedIndex",
                  "tagName",
                  "nodeName",
                  "nodeType",
                  "ownerDocument",
                  "defaultChecked",
                  "defaultSelected",
                  ".attr()"
                ]
              },
              {
                "code": [
                  "value",
                  "disabled",
                  "checked",
                  ".prop()",
                  {
                    "a": {
                      "href": "/attr/",
                      "$t": ".attr()"
                    }
                  },
                  {
                    "a": {
                      "href": "/val/",
                      "$t": ".val()"
                    }
                  }
                ]
              },
              {
                "strong": "Important:",
                "code": [
                  {
                    "a": {
                      "href": "/removeProp/",
                      "$t": ".removeProp()"
                    }
                  },
                  {
                    "a": {
                      "href": "/removeProp/",
                      "$t": ".removeProp()"
                    }
                  }
                ]
              },
              "By using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:",
              {
                "strong": "Note:",
                "code": ["function( index, prop ){ })", "undefined"]
              }
            ],
            "pre": [
              {
                "code":
                  "$( \"input\" ).prop( \"disabled\", false );\n$( \"input\" ).prop( \"checked\", true );\n$( \"input\" ).val( \"someValue\" );"
              },
              {
                "code":
                  "$( \"input[type='checkbox']\" ).prop( \"checked\", function( i, val ) {   return !val;\n});"
              }
            ],
            "h4": {
              "id": "computed-prop-values",
              "$t": "Computed property values"
            }
          },
          "note": {
            "id": "prop-memory-leaks",
            "type": "additional"
          },
          "example": {
            "desc": "Disable all checkboxes on the page.",
            "code":
              "$( \"input[type='checkbox']\" ).prop({   disabled: true\n});",
            "css":
              "img {     padding: 10px;\n  }\n  div {     color: red;\n    font-size: 24px;\n  }",
            "html":
              "<input type=\"checkbox\" checked=\"checked\">\n  <input type=\"checkbox\">\n  <input type=\"checkbox\">\n  <input type=\"checkbox\" checked=\"checked\">"
          },
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.6"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "pushStack",
      "return": "jQuery",
      "title": ".pushStack()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "elements",
            "type": "Array",
            "desc":
              "An array of elements to push onto the stack and make into a new jQuery object."
          }
        },
        {
          "added": "1.3",
          "argument": [
            {
              "name": "elements",
              "type": "Array",
              "desc":
                "An array of elements to push onto the stack and make into a new jQuery object."
            },
            {
              "name": "name",
              "type": "String",
              "desc":
                "The name of a jQuery method that generated the array of elements."
            },
            {
              "name": "arguments",
              "type": "Array",
              "desc":
                "The arguments that were passed in to the jQuery method (for serialization)."
            }
          ]
        }
      ],
      "desc": "Add a collection of DOM elements onto the jQuery stack.",
      "longdesc": {},
      "example": {
        "desc":
          "Add some elements onto the jQuery stack, then pop back off again.",
        "code":
          "jQuery([])\n  .pushStack( document.getElementsByTagName( \"div\" ) )\n  .remove()\n  .end();"
      },
      "category": [
        {
          "slug": "internals"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Show or manipulate the queue of functions to be executed on the matched elements.",
      "entry": [
        {
          "type": "method",
          "name": "queue",
          "return": "Array",
          "title": ".queue()",
          "signature": {
            "added": "1.2",
            "argument": {
              "name": "queueName",
              "optional": "true",
              "type": "String",
              "desc": {
                "code": "fx"
              }
            }
          },
          "desc":
            "Show the queue of functions to be executed on the matched elements.",
          "longdesc": {},
          "example": {
            "desc": "Show the length of the queue.",
            "code":
              "var div = $( \"div\" );\n\nfunction runIt() {   div\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( \"fast\" )\n    .animate({ left: \"-=200\" }, 1500 )\n    .hide( \"slow\" )\n    .show( 1200 )\n    .slideUp( \"normal\", runIt );\n}\n\nfunction showIt() {   var n = div.queue( \"fx\" );\n  $( \"span\" ).text( n.length );\n  setTimeout( showIt, 100 );\n}\n\nrunIt();\nshowIt();",
            "css":
              "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 60px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }\n  p {     color: red;\n  }",
            "html": "<p>The queue length is: <span></span></p>\n<div></div>"
          },
          "category": [
            {
              "slug": "effects/custom-effects"
            },
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.2"
            }
          ]
        },
        {
          "type": "method",
          "name": "queue",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.2",
              "argument": [
                {
                  "name": "queueName",
                  "optional": "true",
                  "type": "String",
                  "desc": {
                    "code": "fx"
                  }
                },
                {
                  "name": "newQueue",
                  "type": "Array",
                  "desc":
                    "An array of functions to replace the current queue contents."
                }
              ]
            },
            {
              "added": "1.2",
              "argument": [
                {
                  "name": "queueName",
                  "optional": "true",
                  "type": "String",
                  "desc": {
                    "code": "fx"
                  }
                },
                {
                  "name": "callback",
                  "type": "Function",
                  "argument": {
                    "name": "next",
                    "type": "Function"
                  },
                  "desc":
                    "The new function to add to the queue, with a function to call that will dequeue the next item."
                }
              ]
            }
          ],
          "desc":
            "Manipulate the queue of functions to be executed, once for each matched element.",
          "longdesc": {
            "p": [
              {
                "code": "fx"
              },
              {
                "code": "fx"
              },
              {
                "code": [".queue()", ".queue()"]
              },
              "This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.",
              "This is equivalent to:",
              {
                "code": [".queue()", ".dequeue()"]
              },
              {
                "strong": "As of jQuery 1.4"
              }
            ],
            "pre": [
              {
                "code": "$( \"#foo\" ).slideUp().fadeIn();"
              },
              {
                "code":
                  "$( \"#foo\" ).slideUp();\n$( \"#foo\" ).queue(function() {   alert( \"Animation complete.\" );\n  $( this ).dequeue();\n});"
              },
              {
                "code":
                  "$( \"#foo\" ).slideUp(function() {   alert( \"Animation complete.\" );\n});"
              },
              {
                "code":
                  "$( \"#test\" ).queue(function( next ) {     // Do some stuff...\n    next();\n});"
              }
            ]
          },
          "example": [
            {
              "desc": "Queue a custom function.",
              "code":
                "$( document.body ).click(function() {   $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 )\n    .queue(function() {       $( this ).addClass( \"newcolor\" ).dequeue();\n    })\n    .animate({ left: \"-=200\" }, 500 )\n    .queue(function() {       $( this ).removeClass( \"newcolor\" ).dequeue();\n    })\n    .slideUp();\n});",
              "css":
                "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }",
              "html": "Click here...\n<div></div>"
            },
            {
              "desc": "Set a queue array to delete the queue.",
              "code":
                "$( \"#start\" ).click(function() {   $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 5000 )\n    .queue(function() {       $( this ).addClass( \"newcolor\" ).dequeue();\n    })\n    .animate({ left: '-=200' }, 1500 )\n    .queue(function() {       $( this ).removeClass( \"newcolor\" ).dequeue();\n    })\n    .slideUp();\n});\n$( \"#stop\" ).click(function() {   $( \"div\" )\n    .queue( \"fx\", [] )\n    .stop();\n});",
              "css":
                "div {     margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {     background: blue;\n  }",
              "html":
                "<button id=\"start\">Start</button>\n<button id=\"stop\">Stop</button>\n<div></div>"
            }
          ],
          "category": [
            {
              "slug": "effects/custom-effects"
            },
            {
              "slug": "data"
            },
            {
              "slug": "utilities"
            },
            {
              "slug": "version/1.2"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "radio",
      "return": "",
      "title": ":radio Selector",
      "sample": ":radio",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all  elements of type radio.",
      "longdesc": {
        "p": [
          {
            "code": [
              "$( \":radio\" )",
              "$( \"[type=radio]\" )",
              "$( \":radio\" )",
              "$( \"*:radio\" )",
              "$( \"input:radio\" )"
            ]
          },
          {
            "code": "$( \"input[name=gender]:radio\" )"
          }
        ]
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":radio",
        "data-alt": "[type=\"radio\"]"
      },
      "example": {
        "desc": "Finds all radio inputs.",
        "code":
          "var input = $( \"form input:radio\" )\n  .wrap( \"<span></span>\" )\n  .parent()\n    .css({       background: \"yellow\",\n      border: \"3px red solid\"\n    });\n\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n\n// Prevent form submission\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 25px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\" name=\"asdf\">\n  <input type=\"radio\" name=\"asdf\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "ready",
      "return": "jQuery",
      "title": ".ready()",
      "desc": "Specify a function to execute when the DOM is fully loaded.",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "handler",
          "type": "Function",
          "desc": "A function to execute after the DOM is ready."
        }
      },
      "longdesc": {
        "p": [
          {
            "code": ".ready()"
          },
          {
            "a": {
              "href": "http://caniuse.com/#search=DOMContentLoaded",
              "$t": "provide similar functionality"
            },
            "code": [
              "DOMContentLoaded",
              ".ready()",
              "DOMContentLoaded",
              ".ready( handler )",
              "handler",
              "DOMContentLoaded"
            ]
          },
          {
            "code": [
              "load",
              "window",
              "$( window ).on( \"load\", handler )",
              "load"
            ]
          },
          {
            "em": "usually not safe",
            "code": [
              "load",
              ".ready()",
              "$.getScript()",
              ".ready()",
              "window",
              "load"
            ]
          },
          "jQuery offers several ways to attach a function that will run when the DOM is ready. All of the following syntaxes are equivalent:",
          {
            "code": [".ready()", "\"document\""]
          },
          {
            "code": "$(document).on( \"ready\", handler )",
            "em": [
              "deprecated as of jQuery 1.8 and removed in jQuery 3.0",
              "will not be executed"
            ]
          },
          {
            "code": ".ready()"
          },
          "Which is equivalent to the recommended way of calling:",
          {
            "code": [
              {
                "a": {
                  "href": "/jQuery.noConflict/",
                  "$t": "$.noConflict()"
                }
              },
              "$",
              ".ready()",
              "jQuery",
              "$"
            ]
          }
        ],
        "ul": {
          "li": [
            {
              "code": "$( handler )"
            },
            {
              "code": "$( document ).ready( handler )"
            },
            {
              "code": "$( \"document\" ).ready( handler )"
            },
            {
              "code": "$( \"img\" ).ready( handler )"
            },
            {
              "code": "$().ready( handler )"
            }
          ]
        },
        "pre": [
          {
            "code":
              "$( document ).ready(function() {   // Handler for .ready() called.\n});"
          },
          {
            "code": "$(function() {   // Handler for .ready() called.\n});"
          },
          {
            "code":
              "jq2 = jQuery.noConflict();\njq2(function( $ ) {   // Code using $ as usual goes here; the actual jQuery object is jq2\n});"
          }
        ],
        "h4": "Aliasing the jQuery Object"
      },
      "example": {
        "desc": "Display a message when the DOM is loaded.",
        "code": {
          "location": "head",
          "$t":
            "$(function() {     $( \"p\" ).text( \"The DOM is now loaded and can be manipulated.\" );\n  });"
        },
        "css": "p {     color: red;\n  }",
        "html": "<p>Not loaded yet.</p>"
      },
      "category": [
        {
          "slug": "events/document-loading"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "remove",
      "return": "jQuery",
      "title": ".remove()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "String",
          "desc":
            "A selector expression that filters the set of matched elements to be removed."
        }
      },
      "desc": "Remove the set of matched elements from the DOM.",
      "longdesc": {
        "p": [
          {
            "code": [
              {
                "a": {
                  "href": "/empty/",
                  "$t": ".empty()"
                }
              },
              ".remove()",
              ".remove()",
              {
                "a": {
                  "href": "/detach/",
                  "$t": ".detach()"
                }
              }
            ]
          },
          "Consider the following HTML:",
          "We can target any element for removal:",
          {
            "code": "<div>"
          },
          {
            "code": "<div class=\"hello\">"
          },
          "We can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:",
          "This would result in the same DOM structure:"
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"hello\">Hello</div>\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".hello\" ).remove();"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"div\" ).remove( \".hello\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"goodbye\">Goodbye</div>\n</div>"
          }
        ]
      },
      "example": [
        {
          "desc": "Removes all paragraphs from the DOM",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).remove();\n});",
          "css": "p {     background: yellow;\n    margin: 6px 0;\n  }",
          "html":
            "<p>Hello</p>\nhow are\n<p>you?</p>\n<button>Call remove() on paragraphs</button>"
        },
        {
          "desc": {
            "code": "$(\"p\").filter(\":contains('Hello')\").remove()"
          },
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).remove( \":contains('Hello')\" );\n});",
          "css": "p {     background: yellow;\n    margin: 6px 0;\n  }",
          "html":
            "<p class=\"hello\">Hello</p>\nhow are\n<p>you?</p>\n<button>Call remove( \":contains('Hello')\" ) on paragraphs</button>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-removal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "removeAttr",
      "return": "jQuery",
      "title": ".removeAttr()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "attributeName",
          "type": "String",
          "desc":
            "An attribute to remove; as of version 1.7, it can be a space-separated list of attributes."
        }
      },
      "desc":
        "Remove an attribute from each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [".removeAttr()", "removeAttribute()"]
          },
          {
            "strong": "Note:",
            "code": ["onclick", ".removeAttr()", ".prop()"]
          }
        ],
        "pre": {
          "code":
            "$element.prop( \"onclick\", null );\nconsole.log( \"onclick property: \", $element[ 0 ].onclick );"
        },
        "note": {
          "id": "svg-support",
          "type": "additional"
        }
      },
      "example": {
        "desc":
          "Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.",
        "code":
          "(function() {   var inputTitle = $( \"input\" ).attr( \"title\" );\n  $( \"button\" ).click(function() {     var input = $( this ).next();\n\n    if ( input.attr( \"title\" ) === inputTitle ) {       input.removeAttr( \"title\" )\n    } else {       input.attr( \"title\", inputTitle );\n    }\n\n    $( \"#log\" ).html( \"input title is now \" + input.attr( \"title\" ) );\n  });\n})();",
        "html":
          "<button>Change title</button>\n<input type=\"text\" title=\"hello there\">\n<div id=\"log\"></div>"
      },
      "category": [
        {
          "slug": "attributes"
        },
        {
          "slug": "manipulation/general-attributes"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "removeClass",
      "return": "jQuery",
      "title": ".removeClass()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "className",
            "optional": "true",
            "type": "String",
            "desc":
              "One or more space-separated classes to be removed from the class attribute of each matched element."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "argument": [
              {
                "name": "index",
                "type": "Integer"
              },
              {
                "name": "className",
                "type": "String"
              }
            ],
            "return": {
              "type": "String"
            },
            "desc":
              "A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments."
          }
        }
      ],
      "desc":
        "Remove a single class, multiple classes, or all classes from each element in the set of matched elements.",
      "longdesc": {
        "p": [
          "If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.",
          {
            "code": [".removeClass()", "className", "class", "class"],
            "em": ["property", "attribute"]
          },
          {
            "code": ["class", ".removeClass()"],
            "em": "attribute"
          },
          "More than one class may be removed at a time, separated by a space, from the set of matched elements, like so:",
          {
            "code": ".addClass()"
          },
          {
            "code": ["myClass", "noClass", "yourClass"]
          },
          {
            "code": ".attr( \"class\", \"newClass\" )"
          },
          {
            "code": ".removeClass()"
          },
          {
            "code": ["<li>", "<li>"]
          }
        ],
        "pre": [
          {
            "code": "$( \"p\" ).removeClass( \"myClass yourClass\" )"
          },
          {
            "code":
              "$( \"p\" ).removeClass( \"myClass noClass\" ).addClass( \"yourClass\" );"
          },
          {
            "code":
              "$( \"li:last\" ).removeClass(function() {   return $( this ).prev().attr( \"class\" );\n});"
          }
        ]
      },
      "example": [
        {
          "desc": "Remove the class 'blue' from the matched elements.",
          "code": "$( \"p:even\" ).removeClass( \"blue\" );",
          "css":
            "p {     margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {     color: blue;\n  }\n  .under {     text-decoration: underline;\n  }\n  .highlight {     background: yellow;\n  }",
          "html":
            "<p class=\"blue under\">Hello</p>\n<p class=\"blue under highlight\">and</p>\n<p class=\"blue under\">then</p>\n<p class=\"blue under\">Goodbye</p>"
        },
        {
          "desc":
            "Remove the class 'blue' and 'under' from the matched elements.",
          "code": "$( \"p:odd\" ).removeClass( \"blue under\" );",
          "css":
            "p {     margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {     color: blue;\n  }\n  .under {     text-decoration: underline;\n  }\n  .highlight {     background: yellow;\n  }",
          "html":
            "<p class=\"blue under\">Hello</p>\n<p class=\"blue under highlight\">and</p>\n<p class=\"blue under\">then</p>\n<p class=\"blue under\">Goodbye</p>"
        },
        {
          "desc": "Remove all the classes from the matched elements.",
          "code": "$( \"p:eq(1)\" ).removeClass();",
          "css":
            "p {     margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {     color: blue;\n  }\n  .under {     text-decoration: underline;\n  }\n  .highlight {     background: yellow;\n  }",
          "html":
            "<p class=\"blue under\">Hello</p>\n<p class=\"blue under highlight\">and</p>\n<p class=\"blue under\">then</p>\n<p class=\"blue under\">Goodbye</p>"
        }
      ],
      "category": [
        {
          "slug": "attributes"
        },
        {
          "slug": "manipulation/class-attribute"
        },
        {
          "slug": "css"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "removeData",
      "return": "jQuery",
      "title": ".removeData()",
      "signature": [
        {
          "added": "1.2.3",
          "argument": {
            "name": "name",
            "type": "String",
            "optional": "true",
            "desc": "A string naming the piece of data to delete."
          }
        },
        {
          "added": "1.7",
          "argument": {
            "name": "list",
            "optional": "true",
            "desc":
              "An array or space-separated string naming the pieces of data to delete.",
            "type": [
              {
                "name": "Array"
              },
              {
                "name": "String"
              }
            ]
          }
        }
      ],
      "desc": "Remove a previously-stored piece of data.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".removeData()",
              ".data()",
              ".removeData()",
              ".removeData()"
            ]
          },
          {
            "code": [
              ".removeData()",
              ".data()",
              "data-",
              "data()",
              "data-",
              ".removeAttr()",
              ".removeData()",
              "data-",
              "data()",
              "data-"
            ]
          },
          {
            "strong": "As of jQuery 1.7",
            "code": ".removeData()"
          }
        ]
      },
      "example": {
        "desc": "Set a data store for 2 names then remove one of them.",
        "code":
          "$( \"span:eq(0)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\n$( \"div\" ).data( \"test1\", \"VALUE-1\" );\n$( \"div\" ).data( \"test2\", \"VALUE-2\" );\n$( \"span:eq(1)\" ).text( \"\" + $( \"div\").data( \"test1\" ) );\n$( \"div\" ).removeData( \"test1\" );\n$( \"span:eq(2)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\n$( \"span:eq(3)\" ).text( \"\" + $( \"div\" ).data( \"test2\" ) );",
        "css":
          "div {     margin: 2px;\n    color: blue;\n  }\n  span {     color: red;\n  }",
        "html":
          "<div>value1 before creation: <span></span></div>\n<div>value1 after creation: <span></span></div>\n<div>value1 after removal: <span></span></div>\n<div>value2 after removal: <span></span></div>"
      },
      "category": [
        {
          "slug": "data"
        },
        {
          "slug": "miscellaneous/data-storage"
        },
        {
          "slug": "version/1.2.3"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "removeProp",
      "return": "jQuery",
      "title": ".removeProp()",
      "signature": {
        "added": "1.6",
        "argument": {
          "name": "propertyName",
          "type": "String",
          "desc": "The name of the property to remove."
        }
      },
      "desc": "Remove a property for the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".removeProp()",
              {
                "a": {
                  "href": "/prop/",
                  "$t": ".prop()"
                }
              }
            ]
          },
          {
            "code": ["window", "undefined"]
          },
          {
            "strong": "Note:",
            "code": [
              {
                "a": {
                  "href": "/prop/",
                  "$t": ".prop()"
                }
              },
              "false"
            ]
          }
        ]
      },
      "note": {
        "id": "prop-memory-leaks",
        "type": "additional"
      },
      "example": {
        "desc": "Set a numeric property on a paragraph and then remove it.",
        "code":
          "para = $( \"p\" );\npara\n  .prop( \"luggageCode\", 1234 )\n  .append( \"The secret luggage code is: \", String( para.prop( \"luggageCode\" ) ), \". \" )\n  .removeProp( \"luggageCode\" )\n  .append( \"Now the secret luggage code is: \", String( para.prop( \"luggageCode\" ) ), \". \" );",
        "css":
          "img {     padding: 10px;\n  }\n  div {     color: red;\n    font-size: 24px;\n  }",
        "html": "<p></p>"
      },
      "category": [
        {
          "slug": "attributes"
        },
        {
          "slug": "manipulation/general-attributes"
        },
        {
          "slug": "version/1.6"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "replaceAll",
      "return": "jQuery",
      "title": ".replaceAll()",
      "signature": {
        "added": "1.2",
        "argument": {
          "name": "target",
          "desc":
            "A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.",
          "type": [
            {
              "name": "Selector"
            },
            {
              "name": "jQuery"
            },
            {
              "name": "Array"
            },
            {
              "name": "Element"
            }
          ]
        }
      },
      "desc": "Replace each target element with the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".replaceAll()",
              {
                "a": {
                  "href": "/replaceWith/",
                  "$t": ".replaceWith()"
                }
              }
            ]
          },
          "We can create an element, then replace other elements with it:",
          "This causes all of them to be replaced:",
          "Or, we could select an element to use as the replacement:",
          "This results in the DOM structure:",
          "From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned."
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner first\">Hello</div>\n  <div class=\"inner second\">And</div>\n  <div class=\"inner third\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \"<h2>New heading</h2>\" ).replaceAll( \".inner\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>New heading</h2>\n  <h2>New heading</h2>\n  <h2>New heading</h2>\n</div>"
          },
          {
            "code": "$( \".first\" ).replaceAll( \".third\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner second\">And</div>\n  <div class=\"inner first\">Hello</div>\n</div>"
          }
        ]
      },
      "note": {
        "id": "removes-data",
        "type": "additional",
        "data-title": ".replaceAll()"
      },
      "example": {
        "desc": "Replace all the paragraphs with bold words.",
        "code": "$( \"<b>Paragraph. </b>\" ).replaceAll( \"p\" );",
        "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
      },
      "category": [
        {
          "slug": "manipulation/dom-replacement"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "replaceWith",
      "return": "jQuery",
      "title": ".replaceWith()",
      "signature": [
        {
          "added": "1.2",
          "argument": {
            "name": "newContent",
            "desc":
              "The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.",
            "type": [
              {
                "name": "htmlString"
              },
              {
                "name": "Element"
              },
              {
                "name": "Array"
              },
              {
                "name": "jQuery"
              }
            ]
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc":
              "A function that returns content with which to replace the set of matched elements."
          }
        }
      ],
      "desc":
        "Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.",
      "longdesc": {
        "p": [
          {
            "code": ".replaceWith()"
          },
          {
            "code": "<div>"
          },
          "This results in the structure:",
          {
            "em": "All",
            "code": "<div>"
          },
          "This causes all of them to be replaced:",
          "An element could also be selected as the replacement:",
          "This results in the DOM structure:",
          "This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.",
          {
            "code": ".replaceWith()",
            "em": "original"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner first\">Hello</div>\n  <div class=\"inner second\">And</div>\n  <div class=\"inner third\">Goodbye</div>\n</div>"
          },
          {
            "code":
              "$( \"div.second\" ).replaceWith( \"<h2>New heading</h2>\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner first\">Hello</div>\n  <h2>New heading</h2>\n  <div class=\"inner third\">Goodbye</div>\n</div>"
          },
          {
            "code":
              "$( \"div.inner\" ).replaceWith( \"<h2>New heading</h2>\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <h2>New heading</h2>\n  <h2>New heading</h2>\n  <h2>New heading</h2>\n</div>"
          },
          {
            "code": "$( \"div.third\" ).replaceWith( $( \".first\" ) );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner second\">And</div>\n  <div class=\"inner first\">Hello</div>\n</div>"
          }
        ]
      },
      "note": [
        {
          "id": "removes-data",
          "type": "additional",
          "data-title": ".replaceWith()"
        },
        {
          "id": "disconnected-manipulation",
          "type": "additional",
          "data-title": ".replaceWith()"
        }
      ],
      "example": [
        {
          "desc":
            "On click, replace the button with a div containing the same word.",
          "code":
            "$( \"button\" ).click(function() {   $( this ).replaceWith( \"<div>\" + $( this ).text() + \"</div>\" );\n});",
          "css":
            "button {     display: block;\n    margin: 3px;\n    color: red;\n    width: 200px;\n  }\n  div {     color: red;\n    border: 2px solid blue;\n    width: 200px;\n    margin: 3px;\n    text-align: center;\n  }",
          "html":
            "<button>First</button>\n<button>Second</button>\n<button>Third</button>"
        },
        {
          "desc": "Replace all paragraphs with bold words.",
          "code": "$( \"p\" ).replaceWith( \"<b>Paragraph. </b>\" );",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc": {
            "code": "$()"
          },
          "code":
            "$( \"p\" ).click(function() {   $( this ).replaceWith( $( \"div\" ) );\n});",
          "css":
            "div {     border: 2px solid blue;\n    color: red;\n    margin: 3px;\n  }\n  p {     border: 2px solid red;\n    color: blue;\n    margin: 3px;\n    cursor: pointer;\n  }",
          "html":
            "<p>Hello</p>\n  <p>cruel</p>\n  <p>World</p>\n  <div>Replaced!</div>"
        },
        {
          "desc":
            "On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.",
          "code":
            "$( \"button\" ).on( \"click\", function() {   var $container = $( \"div.container\" ).replaceWith(function() {     return $( this ).contents();\n  });\n\n  $( \"p\" ).append( $container.attr( \"class\" ) );\n});",
          "css":
            ".container {     background-color: #991;\n  }\n  .inner {     color: #911;\n  }",
          "html":
            "<p>\n  <button>Replace!</button>\n</p>\n<div class=\"container\">\n  <div class=\"inner\">Scooby</div>\n  <div class=\"inner\">Dooby</div>\n  <div class=\"inner\">Doo</div>\n</div>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-replacement"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "reset",
      "return": "",
      "title": ":reset Selector",
      "sample": ":reset",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type reset.",
      "longdesc": {
        "p": {
          "code": [":reset", "[type=\"reset\"]"]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":reset",
        "data-alt": "[type=\"reset\"]"
      },
      "example": {
        "desc": "Finds all reset inputs.",
        "code":
          "var input = $( \"input:reset\" ).css({   background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n\n// Prevent form submission\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 45px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "resize",
      "return": "jQuery",
      "title": ".resize()",
      "desc":
        "Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on('resize', handler)", ".trigger( \"resize\" )"]
          },
          {
            "code": ["resize", "window"]
          },
          "Now whenever the browser window's size is changed, the message is appended to <div id=\"log\"> one or more times, depending on the browser.",
          {
            "code": ["resize", "resize"]
          }
        ],
        "pre": {
          "code":
            "$( window ).resize(function() {   $( \"#log\" ).append( \"<div>Handler for .resize() called.</div>\" );\n});"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "resize"
      },
      "example": {
        "desc": "To see the window width while (or after) it is resized, try:",
        "code":
          "$( window ).resize(function() {   $( \"body\" ).prepend( \"<div>\" + $( window ).width() + \"</div>\" );\n});"
      },
      "category": [
        {
          "slug": "events/browser-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "root",
      "return": "",
      "title": ":root Selector",
      "sample": ":root",
      "signature": {
        "added": "1.9"
      },
      "desc": "Selects the element that is the root of the document.",
      "longdesc": {
        "p": {
          "code": ["$(\":root\")", "<html>"]
        }
      },
      "example": {
        "desc": "Display the tag name of the root element.",
        "code":
          "$( \"<b></b>\" ).html( $( \":root\" )[ 0 ].nodeName ).appendTo( \"#log\" );",
        "css":
          "span.fot {     color: red;\n    font-size: 120%;\n    font-style: italic;\n  }",
        "html": "<div id=\"log\">The root of this document is: </div>"
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "scroll",
      "return": "jQuery",
      "title": ".scroll()",
      "desc":
        "Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"scroll\", handler )", ".trigger( \"scroll\" )"]
          },
          {
            "code": ["scroll", "window", "overflow", "scroll", "auto"]
          },
          "For example, consider the HTML:",
          "The style definition is present to make the target element small enough to be scrollable:",
          {
            "code": "scroll"
          },
          {
            "code": "<div id=\"log\"></div>"
          },
          {
            "samp": "Handler for .scroll() called."
          },
          {
            "code": ".scroll()"
          },
          {
            "samp": "Trigger the handler"
          },
          {
            "code": "scroll"
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"target\" style=\"overflow: scroll; width: 200px; height: 100px;\">\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n  ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  Duis aute irure dolor in reprehenderit in voluptate velit\n  esse cillum dolore eu fugiat nulla pariatur. Excepteur\n  sint occaecat cupidatat non proident, sunt in culpa qui\n  officia deserunt mollit anim id est laborum.\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n<div id=\"log\"></div>"
          },
          {
            "code":
              "$( \"#target\" ).scroll(function() {   $( \"#log\" ).append( \"<div>Handler for .scroll() called.</div>\" );\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).scroll();\n});"
          }
        ],
        "figure": {
          "img": {
            "src": "/resources/0042_05_11.png",
            "alt": ""
          },
          "figcaption": "Figure 1 - Illustration of the rendered HTML"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "scroll"
      },
      "example": {
        "desc": "To do something when your page is scrolled:",
        "code":
          "$( \"p\" ).clone().appendTo( document.body );\n$( \"p\" ).clone().appendTo( document.body );\n$( \"p\" ).clone().appendTo( document.body );\n$( window ).scroll(function() {   $( \"span\" ).css( \"display\", \"inline\" ).fadeOut( \"slow\" );\n});",
        "css":
          "div {     color: blue;\n  }\n  p {     color: green;\n  }\n  span {     color: red;\n    display: none;\n  }",
        "html":
          "<div>Try scrolling the iframe.</div>\n<p>Paragraph - <span>Scroll happened!</span></p>"
      },
      "category": [
        {
          "slug": "events/browser-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "scrollLeft",
          "return": "Integer",
          "title": ".scrollLeft()",
          "signature": {
            "added": "1.2.6"
          },
          "desc":
            "Get the current horizontal position of the scroll bar for the first element in the set of matched elements.",
          "longdesc": {
            "p": {
              "code": "0"
            },
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": [".scrollLeft()", ".animate()"]
              }
            }
          },
          "example": {
            "desc": "Get the scrollLeft of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text( \"scrollLeft:\" + p.scrollLeft() );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p><p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "scrollLeft",
          "return": "jQuery",
          "signature": {
            "added": "1.2.6",
            "argument": {
              "name": "value",
              "type": "Number",
              "desc":
                "An integer indicating the new position to set the scroll bar to."
            }
          },
          "desc":
            "Set the current horizontal position of the scroll bar for each of the set of matched elements.",
          "longdesc": {
            "p": {
              "code": "scrollLeft"
            }
          },
          "example": {
            "desc": "Set the scrollLeft of a div.",
            "code": "$( \"div.demo\" ).scrollLeft( 300 );",
            "css":
              "div.demo {     background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }",
            "html": "<div class=\"demo\"><h1>lalala</h1><p>Hello</p></div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        }
      ]
    }
  },
  {
    "entries": {
      "entry": [
        {
          "type": "method",
          "name": "scrollTop",
          "return": "Number",
          "title": ".scrollTop()",
          "signature": {
            "added": "1.2.6"
          },
          "desc":
            "Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.",
          "longdesc": {
            "p": {
              "code": "0"
            }
          },
          "example": {
            "desc": "Get the scrollTop of a paragraph.",
            "code":
              "var p = $( \"p:first\" );\n$( \"p:last\" ).text( \"scrollTop:\" + p.scrollTop() );",
            "css":
              "p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }",
            "html": "<p>Hello</p><p></p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        },
        {
          "type": "method",
          "name": "scrollTop",
          "return": "jQuery",
          "signature": {
            "added": "1.2.6",
            "argument": {
              "name": "value",
              "type": "Number",
              "desc":
                "A number indicating the new position to set the scroll bar to."
            }
          },
          "desc":
            "Set the current vertical position of the scroll bar for each of the set of matched elements.",
          "longdesc": {
            "p": {
              "code": "scrollTop"
            }
          },
          "example": {
            "desc": "Set the scrollTop of a div.",
            "code": "$( \"div.demo\" ).scrollTop( 300 );",
            "css":
              "div.demo {     background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {     margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }",
            "html": "<div class=\"demo\"><h1>lalala</h1><p>Hello</p></div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "offset"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.2.6"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "select",
      "return": "jQuery",
      "title": ".select()",
      "desc":
        "Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"select\", handler )", ".trigger( \"select\" )"]
          },
          {
            "code": ["select", "<input type=\"text\">", "<textarea>"]
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the text input:",
          {
            "code": ".select()"
          },
          "After this code executes, clicks on the Trigger button will also alert the message:",
          {
            "samp": "Handler for .select() called."
          },
          {
            "code": "select"
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <input id=\"target\" type=\"text\" value=\"Hello there\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).select(function() {   alert( \"Handler for .select() called.\" );\n});"
          },
          {
            "code":
              "$( \"#other\").click(function() {   $( \"#target\" ).select();\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p":
            "The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions."
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "select"
      },
      "example": [
        {
          "desc": "To do something when text in input boxes is selected:",
          "code":
            "$( \":input\" ).select(function() {   $( \"div\" ).text( \"Something was selected\" ).show().fadeOut( 1000 );\n});",
          "css": "p {     color: blue;\n  }\n  div {     color: red;\n  }",
          "html":
            "<p>Click and drag the mouse to select text in the inputs.</p>\n  <input type=\"text\" value=\"Some text\">\n  <input type=\"text\" value=\"to test on\">\n  <div></div>"
        },
        {
          "desc": "To trigger the select event on all input elements, try:",
          "code": "$( \"input\" ).select();"
        }
      ],
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "selected",
      "return": "",
      "title": ":selected Selector",
      "sample": ":selected",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements that are selected.",
      "longdesc": {
        "p": {
          "code": [":selected", "<option>", ":checked"]
        }
      },
      "note": {
        "id": "jquery-selector-extension",
        "type": "additional",
        "data-selector": ":selected"
      },
      "example": {
        "desc":
          "Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.",
        "code":
          "$( \"select\" )\n  .change(function() {     var str = \"\";\n    $( \"select option:selected\" ).each(function() {       str += $( this ).text() + \" \";\n    });\n    $( \"div\" ).text( str );\n  })\n  .trigger( \"change\" );",
        "css": "div {     color: red;\n  }",
        "html":
          "<select name=\"garden\" multiple=\"multiple\">\n  <option>Flowers</option>\n  <option selected=\"selected\">Shrubs</option>\n  <option>Trees</option>\n  <option selected=\"selected\">Bushes</option>\n  <option>Grass</option>\n  <option>Dirt</option>\n</select>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "property",
      "name": "selector",
      "return": "String",
      "deprecated": "1.7",
      "removed": "3.0",
      "title": ".selector",
      "signature": {
        "added": "1.3"
      },
      "desc":
        "A selector representing selector passed to jQuery(), if any, when creating the original set.",
      "longdesc": {
        "p": {
          "code": [
            ".selector",
            ".live()",
            "$.fn.foo = function( selector, options ) { /* plugin code goes here */ };",
            "$( \"div.bar\" ).foo( \"div.bar\", { dog: \"bark\"} );",
            "\"div.bar\"",
            ".foo()"
          ]
        }
      },
      "category": [
        {
          "slug": "internals"
        },
        {
          "slug": "properties/jquery-object-instance-properties"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "deprecated/deprecated-1.7"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "serialize",
      "return": "String",
      "title": ".serialize()",
      "signature": {
        "added": "1.0"
      },
      "desc": "Encode a set of form elements as a string for submission.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".serialize()",
              "<input>",
              "<textarea>",
              "<select>",
              "$( \"input, textarea, select\" ).serialize();"
            ]
          },
          {
            "code": "<form>"
          },
          {
            "code": ["form", ".serialize()"]
          },
          {
            "a": {
              "href":
                "http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2",
              "$t": "\"successful controls\""
            },
            "code": ["name", "input"]
          }
        ],
        "pre": {
          "code":
            "$( \"form\" ).on( \"submit\", function( event ) {   event.preventDefault();\n  console.log( $( this ).serialize() );\n});"
        }
      },
      "example": {
        "desc":
          "Serialize a form to a query string that could be sent to a server in an Ajax request.",
        "code":
          "function showValues() {     var str = $( \"form\" ).serialize();\n    $( \"#results\" ).text( str );\n  }\n  $( \"input[type='checkbox'], input[type='radio']\" ).on( \"click\", showValues );\n  $( \"select\" ).on( \"change\", showValues );\n  showValues();",
        "css":
          "body, select {     font-size: 12px;\n  }\n  form {     margin: 5px;\n  }\n  p {     color: red;\n    margin: 5px;\n    font-size: 14px;\n  }\n  b {     color: blue;\n  }",
        "height": "200",
        "html":
          "<form>\n  <select name=\"single\">\n    <option>Single</option>\n    <option>Single2</option>\n  </select>\n\n  <br>\n  <select name=\"multiple\" multiple=\"multiple\">\n    <option selected=\"selected\">Multiple</option>\n    <option>Multiple2</option>\n    <option selected=\"selected\">Multiple3</option>\n  </select>\n\n  <br>\n  <input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\">\n  <label for=\"ch1\">check1</label>\n  <input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\">\n  <label for=\"ch2\">check2</label>\n\n  <br>\n  <input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\">\n  <label for=\"r1\">radio1</label>\n  <input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\">\n  <label for=\"r2\">radio2</label>\n</form>\n\n<p><tt id=\"results\"></tt></p>"
      },
      "category": [
        {
          "slug": "forms"
        },
        {
          "slug": "ajax/helper-functions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "serializeArray",
      "return": "Array",
      "title": ".serializeArray()",
      "signature": {
        "added": "1.2"
      },
      "desc": "Encode a set of form elements as an array of names and values.",
      "longdesc": {
        "p": [
          {
            "code": [".serializeArray()", "form"]
          },
          {
            "code": [".serializeArray()", "name", "value"],
            "a": {
              "href":
                "http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2",
              "$t": "successful controls"
            }
          },
          {
            "code": ["<input>", "<textarea>", "<select>", "<form>"]
          },
          {
            "code": "console.log"
          }
        ],
        "pre": [
          {
            "code":
              "<form>\n  <div><input type=\"text\" name=\"a\" value=\"1\" id=\"a\"></div>\n  <div><input type=\"text\" name=\"b\" value=\"2\" id=\"b\"></div>\n  <div><input type=\"hidden\" name=\"c\" value=\"3\" id=\"c\"></div>\n  <div>\n    <textarea name=\"d\" rows=\"8\" cols=\"40\">4</textarea>\n  </div>\n  <div><select name=\"e\">\n    <option value=\"5\" selected=\"selected\">5</option>\n    <option value=\"6\">6</option>\n    <option value=\"7\">7</option>\n  </select></div>\n  <div>\n    <input type=\"checkbox\" name=\"f\" value=\"8\" id=\"f\">\n  </div>\n  <div>\n    <input type=\"submit\" name=\"g\" value=\"Submit\" id=\"g\">\n  </div>\n</form>"
          },
          {
            "code":
              "$( \"form\" ).submit(function( event ) {   console.log( $( this ).serializeArray() );\n  event.preventDefault();\n});"
          },
          {
            "code":
              "[\n  {     name: \"a\",\n    value: \"1\"\n  },\n  {     name: \"b\",\n    value: \"2\"\n  },\n  {     name: \"c\",\n    value: \"3\"\n  },\n  {     name: \"d\",\n    value: \"4\"\n  },\n  {     name: \"e\",\n    value: \"5\"\n  }\n]"
          }
        ]
      },
      "example": {
        "desc":
          "Get the values from a form, iterate through them, and append them to a results display.",
        "code":
          "function showValues() {     var fields = $( \":input\" ).serializeArray();\n    $( \"#results\" ).empty();\n    jQuery.each( fields, function( i, field ) {       $( \"#results\" ).append( field.value + \" \" );\n    });\n  }\n\n  $( \":checkbox, :radio\" ).click( showValues );\n  $( \"select\" ).change( showValues );\n  showValues();",
        "css":
          "body, select {     font-size: 14px;\n  }\n  form {     margin: 5px;\n  }\n  p {     color: red;\n    margin: 5px;\n  }\n  b {     color: blue;\n  }",
        "html":
          "<p><b>Results:</b> <span id=\"results\"></span></p>\n<form>\n  <select name=\"single\">\n    <option>Single</option>\n    <option>Single2</option>\n  </select>\n  <select name=\"multiple\" multiple=\"multiple\">\n    <option selected=\"selected\">Multiple</option>\n    <option>Multiple2</option>\n    <option selected=\"selected\">Multiple3</option>\n  </select>\n  <br>\n  <input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\">\n  <label for=\"ch1\">check1</label>\n  <input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\">\n  <label for=\"ch2\">check2</label>\n  <input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\">\n  <label for=\"r1\">radio1</label>\n  <input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\">\n  <label for=\"r2\">radio2</label>\n</form>"
      },
      "category": [
        {
          "slug": "forms"
        },
        {
          "slug": "ajax/helper-functions"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "show",
      "return": "jQuery",
      "title": ".show()",
      "desc": "Display the matched elements.",
      "signature": [
        {
          "added": "1.0"
        },
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "argument": {
            "name": "duration",
            "default": "400",
            "desc":
              "A string or number determining how long the animation will run.",
            "type": [
              {
                "name": "Number"
              },
              {
                "name": "String"
              }
            ]
          },
          "xi:include": [
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".show()"
          },
          {
            "code": [
              ".css( \"display\", \"block\" )",
              "display",
              "display",
              "inline",
              "inline"
            ]
          },
          {
            "strong": "Note:",
            "code": [
              "display: none !important",
              ".show()",
              "!important",
              ".addClass()",
              ".removeClass()",
              ".toggleClass()",
              ".attr( \"style\", \"display: block !important;\" )"
            ]
          },
          {
            "code": [".show()", ".show()"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600"]
          },
          {
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          "We can animate any element, such as a simple image:"
        ],
        "pre": [
          {
            "code": "$( \".target\" ).show();"
          },
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">\nWith the element initially hidden, we can show it slowly:\n$( \"#clickme\" ).click(function() {   $( \"#book\" ).show( \"slow\", function() {     // Animation complete.\n  });\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:"
          }
        },
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_01.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_02.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_03.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_04.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "show()"
          }
        }
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".show()"
      },
      "example": [
        {
          "desc":
            "Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).show( \"slow\" );\n});",
          "css": "p {     background: yellow;\n  }",
          "html":
            "<button>Show it</button>\n<p style=\"display: none\">Hello  2</p>"
        },
        {
          "desc":
            "Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.",
          "code":
            "$( \"#showr\" ).click(function() {   $( \"div\" ).first().show( \"fast\", function showNext() {     $( this ).next( \"div\" ).show( \"fast\", showNext );\n  });\n});\n\n$( \"#hidr\" ).click(function() {   $( \"div\" ).hide( 1000 );\n});",
          "css":
            "div {     background: #def3ca;\n    margin: 3px;\n    width: 80px;\n    display: none;\n    float: left;\n    text-align: center;\n  }",
          "html":
            "<button id=\"showr\">Show</button>\n<button id=\"hidr\">Hide</button>\n<div>Hello 3,</div>\n<div>how</div>\n<div>are</div>\n<div>you?</div>"
        },
        {
          "desc":
            "Show all span and input elements with an animation. Change the text once the animation is done.",
          "code":
            "function doIt() {   $( \"span,div\" ).show( \"slow\" );\n}\n// Can pass in function name\n$( \"button\" ).click( doIt );\n\n$( \"form\" ).submit(function( event ) {   if ( $( \"input\" ).val() === \"yes\" ) {     $( \"p\" ).show( 4000, function() {       $( this ).text( \"Ok, DONE! (now showing)\" );\n    });\n  }\n  $( \"span,div\" ).hide( \"fast\" );\n\n  // Prevent form submission\n  event.preventDefault();\n});",
          "css":
            "span {     display: none;\n  }\n  div {     display: none;\n  }\n  p {     font-weight: bold;\n    background-color: #fcd;\n  }",
          "html":
            "<button>Do it!</button>\n<span>Are you sure? (type 'yes' if you are) </span>\n<div>\n  <form>\n    <input type=\"text\"  value=\"as;ldkfjalsdf\">\n  </form>\n</div>\n<p style=\"display:none;\">I'm hidden...</p>"
        }
      ],
      "category": [
        {
          "slug": "effects/basics"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "siblings",
      "return": "jQuery",
      "title": ".siblings()",
      "signature": {
        "added": "1.0",
        "argument": {
          "name": "selector",
          "optional": "true",
          "type": "Selector",
          "desc":
            "A string containing a selector expression to match elements against."
        }
      },
      "desc":
        "Get the siblings of each element in the set of matched elements, optionally filtered by a selector.",
      "longdesc": {
        "p": [
          {
            "code": ".siblings()"
          },
          {
            "code": "$()"
          },
          "Consider a page with a simple list on it:",
          "If we begin at the third item, we can find its siblings:",
          "The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.",
          {
            "code": "$collection.siblings().not($collection)"
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li class=\"third-item\">list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li.third-item\" ).siblings().css( \"background-color\", \"red\" );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).",
          "code":
            "var len = $( \".hilite\" ).siblings()\n  .css( \"color\", \"red\" )\n  .length;\n$( \"b\" ).text( len );",
          "css":
            "ul {     float: left;\n    margin: 5px;\n    font-size: 16px;\n    font-weight: bold;\n  }\n  p {     color: blue;\n    margin: 10px 20px;\n    font-size: 16px;\n    padding: 5px;\n    font-weight: bolder;\n  }\n  .hilite {     background: yellow;\n  }",
          "html":
            "<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li class=\"hilite\">Three</li>\n  <li>Four</li>\n</ul>\n\n<ul>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n</ul>\n\n<ul>\n  <li>Eight</li>\n  <li class=\"hilite\">Nine</li>\n  <li>Ten</li>\n  <li class=\"hilite\">Eleven</li>\n</ul>\n\n<p>Unique siblings: <b></b></p>"
        },
        {
          "desc": "Find all siblings with a class \"selected\" of each div.",
          "code":
            "$( \"p\" ).siblings( \".selected\" ).css( \"background\", \"yellow\" );",
          "html":
            "<div><span>Hello</span></div>\n<p class=\"selected\">Hello Again</p>\n<p>And Again</p>"
        }
      ],
      "category": [
        {
          "slug": "traversing/tree-traversal"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "size",
      "return": "Integer",
      "deprecated": "1.8",
      "removed": "3.0",
      "title": ".size()",
      "signature": {
        "added": "1.0"
      },
      "desc": "Return the number of elements in the jQuery object.",
      "longdesc": {
        "p": [
          {
            "code": [
              ".size()",
              {
                "a": {
                  "href": "/length/",
                  "$t": ".length"
                }
              }
            ]
          },
          {
            "code": [
              ".size()",
              {
                "a": {
                  "href": "/length/",
                  "$t": ".length"
                }
              }
            ],
            "strong": {
              "code": ".length"
            }
          },
          "Given a simple unordered list on the page:",
          {
            "code": [".size()", ".length"]
          },
          "This results in two alerts:",
          {
            "samp": "Size: 2"
          },
          {
            "samp": "Size: 2"
          }
        ],
        "pre": [
          {
            "code": "<ul>\n  <li>foo</li>\n  <li>bar</li>\n</ul>"
          },
          {
            "code":
              "alert( \"Size: \" + $( \"li\" ).size() );\nalert( \"Size: \" + $( \"li\" ).length );"
          }
        ]
      },
      "example": {
        "desc": "Count the divs. Click to add more.",
        "code":
          "$( document.body )\n  .click(function() {     $( this ).append( $( \"<div>\" ) );\n    var n = $( \"div\" ).size();\n    $( \"span\" ).text( \"There are \" + n + \" divs. Click to add more.\" );\n  })\n\n  // Trigger the click to start\n  .click();",
        "css":
          "body {     cursor: pointer;\n    min-height: 100px;\n  }\n  div {     width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: blue;\n  }\n  span {     color: red;\n  }",
        "html": "<span></span>\n<div></div>"
      },
      "category": [
        {
          "slug": "miscellaneous/dom-element-methods"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "slice",
      "return": "jQuery",
      "title": ".slice()",
      "signature": {
        "added": "1.1.4",
        "argument": [
          {
            "name": "start",
            "type": "Integer",
            "desc":
              "An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set."
          },
          {
            "name": "end",
            "optional": "true",
            "type": "Integer",
            "desc":
              "An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set."
          }
        ]
      },
      "desc":
        "Reduce the set of matched elements to a subset specified by a range of indices.",
      "longdesc": {
        "p": [
          {
            "code": [".slice()", "start", "end", "start", "end"]
          },
          "Consider a page with a simple list on it:",
          "We can apply this method to the set of list items:",
          "The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.",
          "The end parameter allows us to limit the selected range even further. For example:",
          "Now only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.",
          {
            "code": [".slice()", "start", "end"]
          },
          {
            "code": ["-2", "-1"]
          }
        ],
        "pre": [
          {
            "code":
              "<ul>\n  <li>list item 1</li>\n  <li>list item 2</li>\n  <li>list item 3</li>\n  <li>list item 4</li>\n  <li>list item 5</li>\n</ul>"
          },
          {
            "code":
              "$( \"li\" ).slice( 2 ).css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "$( \"li\" ).slice( 2, 4 ).css( \"background-color\", \"red\" );"
          },
          {
            "code":
              "$( \"li\" ).slice( -2, -1 ).css( \"background-color\", \"red\" );"
          }
        ],
        "h4": "Negative Indices"
      },
      "example": [
        {
          "desc": "Turns divs yellow based on a random slice.",
          "code":
            "function colorEm() {   var $div = $( \"div\" );\n  var start = Math.floor( Math.random() * $div.length );\n  var end = Math.floor( Math.random() * ( $div.length - start ) ) +\n    start + 1;\n  if ( end === $div.length ) {     end = undefined;\n  }\n  $div.css( \"background\", \"\" );\n  if ( end ) {     $div.slice( start, end ).css( \"background\", \"yellow\" );\n  } else {     $div.slice( start ).css( \"background\", \"yellow\" );\n  }\n  $( \"span\" ).text( \"$( 'div' ).slice( \" + start +\n    (end ? \", \" + end : \"\") +\n    \").css( 'background', 'yellow' );\" );\n}\n\n$( \"button\" ).click( colorEm );",
          "css":
            "div {     width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  span {     color: red;\n    font-weight: bold;\n  }\n  button {     margin: 5px;\n  }",
          "height": "240",
          "html":
            "<p><button>Turn slice yellow</button>\n  <span>Click the button!</span></p>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>"
        },
        {
          "desc":
            "Selects all paragraphs, then slices the selection to include only the first element.",
          "code": "$( \"p\" ).slice( 0, 1 ).wrapInner( \"<b></b>\" );"
        },
        {
          "desc":
            "Selects all paragraphs, then slices the selection to include only the first and second element.",
          "code": "$( \"p\" ).slice( 0, 2 ).wrapInner( \"<b></b>\" );"
        },
        {
          "desc":
            "Selects all paragraphs, then slices the selection to include only the second element.",
          "code": "$( \"p\" ).slice( 1, 2 ).wrapInner( \"<b></b>\" );"
        },
        {
          "desc":
            "Selects all paragraphs, then slices the selection to include only the second and third element.",
          "code": "$( \"p\" ).slice( 1 ).wrapInner( \"<b></b>\" );"
        },
        {
          "desc":
            "Selects all paragraphs, then slices the selection to include only the third element.",
          "code": "$( \"p\" ).slice( -1 ).wrapInner( \"<b></b>\" );"
        }
      ],
      "category": [
        {
          "slug": "traversing/filtering"
        },
        {
          "slug": "version/1.1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "slideDown",
      "return": "jQuery",
      "title": ".slideDown()",
      "desc": "Display the matched elements with a sliding motion.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".slideDown()"
          },
          {
            "code": ["'fast'", "'slow'", "200", "600", "duration", "400"]
          },
          "We can animate any element, such as a simple image:",
          "With the element initially hidden, we can show it slowly:",
          {
            "strong": "As of jQuery 1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() {   $( \"#book\" ).slideDown( \"slow\", function() {     // Animation complete.\n  });\n});"
          }
        ],
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_17.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_18.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_19.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_20.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "slideDown()"
          }
        },
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": [
        {
          "id": "jquery.fx.off",
          "type": "additional",
          "data-title": ".slideDown()"
        },
        {
          "id": "slide-in-ie",
          "type": "additional",
          "data-title": ".slideDown()"
        }
      ],
      "example": [
        {
          "desc":
            "Animates all divs to slide down and show themselves over 600 milliseconds.",
          "code":
            "$( document.body ).click(function () {   if ( $( \"div:first\" ).is( \":hidden\" ) ) {     $( \"div\" ).slideDown( \"slow\" );\n  } else {     $( \"div\" ).hide();\n  }\n});",
          "css":
            "div {     background: #de9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    display: none;\n    float: left;\n  }",
          "html": "Click me!\n<div></div>\n<div></div>\n<div></div>"
        },
        {
          "desc":
            "Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.",
          "code":
            "$( \"div\" ).click(function() {   $( this ).css({     borderStyle: \"inset\",\n    cursor: \"wait\"\n  });\n  $( \"input\" ).slideDown( 1000, function() {     $( this )\n      .css( \"border\", \"2px red inset\" )\n      .filter( \".middle\" )\n        .css( \"background\", \"yellow\" )\n        .focus();\n    $( \"div\" ).css( \"visibility\", \"hidden\" );\n  });\n});",
          "css":
            "div {     background: #cfd;\n    margin: 3px;\n    width: 50px;\n    text-align: center;\n    float: left;\n    cursor: pointer;\n    border: 2px outset black;\n    font-weight: bolder;\n  }\n  input {     display: none;\n    width: 120px;\n    float: left;\n    margin: 10px;\n  }",
          "html":
            "<div>Push!</div>\n<input type=\"text\">\n<input type=\"text\" class=\"middle\">\n<input type=\"text\">"
        }
      ],
      "category": [
        {
          "slug": "effects/sliding"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "slideToggle",
      "return": "jQuery",
      "title": ".slideToggle()",
      "desc": "Display or hide the matched elements with a sliding motion.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [
              ".slideToggle()",
              "display",
              "display",
              "inline",
              "inline",
              "display",
              "none"
            ]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600"]
          },
          "We can animate any element, such as a simple image:",
          {
            "code": ".slideToggle()"
          },
          "With the element initially shown, we can hide it slowly with the first click:",
          "A second click will show the element once again:",
          {
            "strong": "As of jQuery 1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() {   $( \"#book\" ).slideToggle( \"slow\", function() {     // Animation complete.\n  });\n});"
          }
        ],
        "figure": [
          {
            "img": [
              {
                "class": "column three",
                "src": "/resources/0042_06_25.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_26.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_27.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_28.png",
                "alt": ""
              }
            ],
            "figcaption": {
              "code": "slideToggle()"
            }
          },
          {
            "img": [
              {
                "class": "column three",
                "src": "/resources/0042_06_29.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_30.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_31.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_32.png",
                "alt": ""
              }
            ],
            "figcaption": {
              "code": "slideToggle()"
            }
          }
        ],
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": [
        {
          "id": "jquery.fx.off",
          "type": "additional",
          "data-title": ".slideToggle()"
        },
        {
          "id": "slide-in-ie",
          "type": "additional",
          "data-title": ".slideDown()"
        }
      ],
      "example": [
        {
          "desc":
            "Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).slideToggle( \"slow\" );\n});",
          "css": "p {     width: 400px;\n  }",
          "html":
            "<button>Toggle</button>\n<p>\n  This is the paragraph to end all paragraphs.  You\n  should feel <em>lucky</em> to have seen such a paragraph in\n  your life.  Congratulations!\n</p>"
        },
        {
          "desc":
            "Animates divs between dividers with a toggle that makes some appear and some disappear.",
          "code":
            "$( \"#aa\" ).click(function() {   $( \"div:not(.still)\" ).slideToggle( \"slow\", function() {     var n = parseInt( $( \"span\" ).text(), 10 );\n    $( \"span\" ).text( n + 1 );\n  });\n});",
          "css":
            "div {     background: #b977d1;\n    margin: 3px;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  div.still {     background: #345;\n    width: 5px;\n  }\n  div.hider {     display: none;\n  }\n  span {     color: red;\n  }\n  p {     clear: left;\n  }",
          "html":
            "<div></div>\n<div class=\"still\"></div>\n<div style=\"display:none;\">\n</div><div class=\"still\"></div>\n<div></div>\n<div class=\"still\"></div>\n<div class=\"hider\"></div>\n<div class=\"still\"></div>\n<div class=\"hider\"></div>\n<div class=\"still\"></div>\n<div></div>\n<p><button id=\"aa\">Toggle</button> There have been <span>0</span> toggled divs.</p>"
        }
      ],
      "category": [
        {
          "slug": "effects/sliding"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "slideUp",
      "return": "jQuery",
      "title": ".slideUp()",
      "desc": "Hide the matched elements with a sliding motion.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".slideUp()", "display", "none"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600", "duration", "400"]
          },
          "We can animate any element, such as a simple image:",
          "With the element initially shown, we can hide it slowly:",
          {
            "strong": "As of jQuery 1.4.3",
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          {
            "strong": "As of jQuery 1.6",
            "code": [
              {
                "a": {
                  "href": "/promise/",
                  "$t": ".promise()"
                }
              },
              {
                "a": {
                  "href": "/deferred.done/",
                  "$t": "deferred.done()"
                }
              }
            ],
            "em": "all",
            "a": {
              "href": "/promise/#example-1",
              "$t": "example for .promise()"
            }
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() {   $( \"#book\" ).slideUp( \"slow\", function() {     // Animation complete.\n  });\n});"
          }
        ],
        "figure": {
          "img": [
            {
              "class": "column three",
              "src": "/resources/0042_06_21.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_22.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_23.png",
              "alt": ""
            },
            {
              "class": "column three",
              "src": "/resources/0042_06_24.png",
              "alt": ""
            }
          ],
          "figcaption": {
            "code": "slideUp()"
          }
        },
        "h4": [
          {
            "id": "easing",
            "$t": "Easing"
          },
          {
            "id": "callback-function",
            "$t": "Callback Function"
          }
        ]
      },
      "note": [
        {
          "id": "jquery.fx.off",
          "type": "additional",
          "data-title": ".slideUp()"
        },
        {
          "id": "slide-in-ie",
          "type": "additional",
          "data-title": ".slideDown()"
        }
      ],
      "example": [
        {
          "desc":
            "Animates all divs to slide up, completing the animation within 400 milliseconds.",
          "code":
            "$( document.body ).click(function() {   if ( $( \"div:first\" ).is( \":hidden\" ) ) {     $( \"div\" ).show( \"slow\" );\n  } else {     $( \"div\" ).slideUp();\n  }\n});",
          "css":
            "div {     background: #3d9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    float: left;\n  }",
          "html":
            "Click me!\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>"
        },
        {
          "desc":
            "Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.",
          "code":
            "$( \"button\" ).click(function() {   $( this ).parent().slideUp( \"slow\", function() {     $( \"#msg\" ).text( $( \"button\", this ).text() + \" has completed.\" );\n  });\n});",
          "css": "div {    margin: 2px;\n  }",
          "html":
            "<div>\n  <button>Hide One</button>\n  <input type=\"text\" value=\"One\">\n</div>\n\n<div>\n  <button>Hide Two</button>\n  <input type=\"text\" value=\"Two\">\n</div>\n\n<div>\n  <button>Hide Three</button>\n  <input type=\"text\" value=\"Three\">\n</div>\n\n<div id=\"msg\"></div>"
        }
      ],
      "category": [
        {
          "slug": "effects/sliding"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "stop",
      "return": "jQuery",
      "title": ".stop()",
      "desc": "Stop the currently-running animation on the matched elements.",
      "signature": [
        {
          "added": "1.2",
          "argument": [
            {
              "name": "clearQueue",
              "type": "Boolean",
              "optional": "true",
              "default": "false",
              "desc": {
                "code": "false"
              }
            },
            {
              "name": "jumpToEnd",
              "type": "Boolean",
              "optional": "true",
              "default": "false",
              "desc": {
                "code": "false"
              }
            }
          ]
        },
        {
          "added": "1.7",
          "argument": [
            {
              "name": "queue",
              "type": "String",
              "optional": "true",
              "desc": "The name of the queue in which to stop animations."
            },
            {
              "name": "clearQueue",
              "type": "Boolean",
              "optional": "true",
              "default": "false",
              "desc": {
                "code": "false"
              }
            },
            {
              "name": "jumpToEnd",
              "type": "Boolean",
              "optional": "true",
              "default": "false",
              "desc": {
                "code": "false"
              }
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".stop()", ".slideUp()", ".stop()"]
          },
          {
            "code": [".stop()", "clearQueue", "true"]
          },
          {
            "code": ["jumpToEnd", "true", ".slideUp()"]
          },
          {
            "strong": "As of jQuery 1.7"
          },
          {
            "code": [".stop()", "mouseenter", "mouseleave"]
          },
          {
            "code": ".stop(true, true)"
          },
          {
            "strong": "As of jQuery 1.7,",
            "code": [".stop()", ".stop()"]
          }
        ],
        "pre": [
          {
            "code":
              "<div id=\"hoverme\">\n  Hover me\n  <img id=\"hoverme\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">\n</div>"
          },
          {
            "code":
              "$( \"#hoverme-stop-2\" ).hover(function() {   $( this ).find( \"img\" ).stop( true, true ).fadeOut();\n}, function() {   $( this ).find( \"img\" ).stop( true, true ).fadeIn();\n});"
          }
        ],
        "h2": "Toggling Animations",
        "div": {
          "class": "warning",
          "p": {
            "code": ["$.fx.off", "true"]
          }
        }
      },
      "example": [
        {
          "desc":
            "Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.",
          "code":
            "// Start animation\n$( \"#go\" ).click(function() {   $( \".block\" ).animate({ left: \"+=100px\" }, 2000 );\n});\n\n// Stop animation when button is clicked\n$( \"#stop\" ).click(function() {   $( \".block\" ).stop();\n});\n\n// Start animation in the opposite direction\n$( \"#back\" ).click(function() {   $( \".block\" ).animate({ left: \"-=100px\" }, 2000 );\n});",
          "html":
            "<button id=\"go\">Go</button>\n<button id=\"stop\">STOP!</button>\n<button id=\"back\">Back</button>\n<div class=\"block\"></div>",
          "css":
            "div {     position: absolute;\n    background-color: #abc;\n    left: 0px;\n    top: 30px;\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n  }"
        },
        {
          "desc":
            "Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.",
          "code":
            "var $block = $( \".block\" );\n\n// Toggle a sliding animation animation\n$( \"#toggle\" ).on( \"click\", function() {   $block.stop().slideToggle( 1000 );\n});",
          "html":
            "<button id=\"toggle\">slideToggle</button>\n<div class=\"block\"></div>",
          "css":
            ".block {     background-color: #abc;\n    border: 2px solid black;\n    width: 200px;\n    height: 80px;\n    margin: 10px;\n  }"
        }
      ],
      "category": [
        {
          "slug": "effects/custom-effects"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "version/1.7"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "submit",
      "return": "",
      "title": ":submit Selector",
      "sample": ":submit",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements of type submit.",
      "longdesc": {
        "p": {
          "code": [":submit", "<button>", "type=\"submit\"", "type"]
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":submit",
        "data-alt": "input[type=\"submit\"], button[type=\"submit\"]"
      },
      "example": {
        "desc":
          "Finds all submit elements that are descendants of a td element.",
        "code":
          "var submitEl = $( \"td :submit\" )\n  .parent( \"td\" )\n    .css({       background: \"yellow\",\n      border: \"3px red solid\"\n    })\n  .end();\n\n$( \"#result\" ).text( \"jQuery matched \" + submitEl.length + \" elements.\" );\n\n// Prevent form submission\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});\n\n// Extra JS to make the HTML easier to edit (None of this is relevant to the ':submit' selector)\n$( \"#exampleTable\" ).find( \"td\" ).each(function( i, el ) {   var inputEl = $( el ).children(),\n    inputType = inputEl.attr( \"type\" ) ? \" type='\" + inputEl.attr( \"type\" ) + \"'\" : \"\" ;\n  $( el ).before( \"<td>\" + inputEl[ 0 ].nodeName + inputType + \"</td>\" );\n})",
        "css": "textarea {     height: 45px;\n  }",
        "html":
          "<form>\n<table id=\"exampleTable\" border=\"1\" cellpadding=\"10\" align=\"center\">\n  <tr>\n    <th>\n      Element Type\n    </th>\n    <th>\n      Element\n    </th>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"button\" value=\"Input Button\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"checkbox\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"file\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"hidden\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"image\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"password\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"radio\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"reset\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"submit\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <input type=\"text\">\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <select><option>Option</option></select>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <textarea></textarea>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <button>Button</button>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <button type=\"submit\">Button type=\"submit\"</button>\n    </td>\n  </tr>\n</table>\n</form>\n<div id=\"result\"></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "submit",
      "return": "jQuery",
      "title": ".submit()",
      "desc":
        "Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element.",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute each time the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "An object containing data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on( \"submit\", handler )", ".trigger( \"submit\" )"]
          },
          {
            "code": [
              "submit",
              "<form>",
              "<input type=\"submit\">",
              "<input type=\"image\">",
              "<button type=\"submit\">"
            ],
            "kbd": "Enter"
          },
          "For example, consider the HTML:",
          "The event handler can be bound to the form:",
          {
            "code": [".preventDefault()", "false"]
          },
          {
            "samp": "Trigger the handler",
            "code": "submit"
          },
          {
            "code": ["submit", "submit"]
          }
        ],
        "div": {
          "class": "warning",
          "p":
            "Depending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key."
        },
        "pre": [
          {
            "code":
              "<form id=\"target\" action=\"destination.html\">\n  <input type=\"text\" value=\"Hello there\">\n  <input type=\"submit\" value=\"Go\">\n</form>\n<div id=\"other\">\n  Trigger the handler\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).submit(function( event ) {   alert( \"Handler for .submit() called.\" );\n  event.preventDefault();\n});"
          },
          {
            "code":
              "$( \"#other\" ).click(function() {   $( \"#target\" ).submit();\n});"
          }
        ]
      },
      "note": [
        {
          "id": "detach-shorthand",
          "type": "additional",
          "data-event": "submit"
        },
        {
          "id": "domlint",
          "type": "additional"
        }
      ],
      "example": [
        {
          "desc":
            "If you'd like to prevent forms from being submitted unless a flag variable is set, try:",
          "code":
            "$( \"form\" ).submit(function( event ) {   if ( $( \"input:first\" ).val() === \"correct\" ) {     $( \"span\" ).text( \"Validated...\" ).show();\n    return;\n  }\n\n  $( \"span\" ).text( \"Not valid!\" ).show().fadeOut( 1000 );\n  event.preventDefault();\n});",
          "css":
            "p {     margin: 0;\n    color: blue;\n  }\n  div,p {     margin-left: 10px;\n  }\n  span {     color: red;\n  }",
          "html":
            "<p>Type 'correct' to validate.</p>\n<form action=\"javascript:alert( 'success!' );\">\n  <div>\n    <input type=\"text\">\n    <input type=\"submit\">\n  </div>\n</form>\n<span></span>"
        },
        {
          "desc":
            "If you'd like to prevent forms from being submitted unless a flag variable is set, try:",
          "code":
            "$( \"form\" ).submit(function() {   return this.some_flag_variable;\n});"
        },
        {
          "desc":
            "To trigger the submit event on the first form on the page, try:",
          "code": "$( \"form:first\" ).submit();"
        }
      ],
      "category": [
        {
          "slug": "events/form-events"
        },
        {
          "slug": "forms"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "target",
      "return": "",
      "title": ":target Selector",
      "sample": ":target",
      "signature": {
        "added": "1.9"
      },
      "desc":
        "Selects the target element indicated by the fragment identifier of the document's URI.",
      "longdesc": {
        "p": [
          {
            "code": [":target", "$( \"p:target\" )", "<p id=\"foo\">"]
          },
          {
            "a": {
              "href": "http://www.w3.org/TR/css3-selectors/#target-pseudo",
              "$t": "W3C CSS specification"
            }
          }
        ]
      },
      "category": [
        {
          "slug": "selectors/basic-filter-selectors"
        },
        {
          "slug": "version/1.9"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "text",
      "return": "",
      "title": ":text Selector",
      "sample": ":text",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all input elements of type text.",
      "longdesc": {
        "p": [
          {
            "code": [
              "$( \":text\" )",
              "<input type=\"text\">",
              "$( \":text\" )",
              "$( \"*:text\" )",
              "$( \"input:text\" )"
            ]
          },
          {
            "strong": "Note:",
            "code": [":text", "input", "type", "type=\"text\""]
          },
          {
            "code": ["$( \":text\" )", "$( \"[type=text]\" )"]
          }
        ],
        "pre": {
          "code":
            "$( \"<input>\" ).is( \"[type=text]\" ); // false\n$( \"<input>\" ).is( \":text\" ); // true"
        }
      },
      "note": {
        "id": "jquery-selector-extension-alt",
        "type": "additional",
        "data-selector": ":text",
        "data-alt": "[type=\"text\"]"
      },
      "example": {
        "desc": "Finds all text inputs.",
        "code":
          "var input = $( \"form input:text\" ).css({   background: \"yellow\",\n  border: \"3px red solid\"\n});\n\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n\n// Prevent form submission\n$( \"form\" ).submit(function( event ) {   event.preventDefault();\n});",
        "css": "textarea {     height: 25px;\n  }",
        "html":
          "<form>\n  <input type=\"button\" value=\"Input Button\">\n  <input type=\"checkbox\">\n  <input type=\"file\">\n  <input type=\"hidden\">\n  <input type=\"image\">\n  <input type=\"password\">\n  <input type=\"radio\">\n  <input type=\"reset\">\n  <input type=\"submit\">\n  <input type=\"text\">\n  <select>\n    <option>Option</option>\n  </select>\n  <textarea></textarea>\n  <button>Button</button>\n</form>\n<div></div>"
      },
      "category": [
        {
          "slug": "selectors/form-selectors"
        },
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.",
      "entry": [
        {
          "type": "method",
          "name": "text",
          "return": "String",
          "title": ".text()",
          "signature": {
            "added": "1.0"
          },
          "desc":
            "Get the combined text contents of each element in the set of matched elements, including their descendants.",
          "longdesc": {
            "p": [
              {
                "code": [".html()", ".text()", ".text()"]
              },
              {
                "code": "$( \"div.demo-container\" ).text()"
              },
              {
                "code": "Demonstration Box list item 1 list item 2"
              },
              {
                "code": [".text()", "input", "textarea"],
                "a": [
                  {
                    "href": "/val/",
                    "code": ".val()"
                  },
                  {
                    "href": "/html/",
                    "code": ".html()"
                  }
                ]
              },
              {
                "code": ".text()"
              }
            ],
            "pre": {
              "code":
                "<div class=\"demo-container\">\n  <div class=\"demo-box\">Demonstration Box</div>\n  <ul>\n    <li>list item 1</li>\n    <li>list <strong>item</strong> 2</li>\n  </ul>\n</div>"
            }
          },
          "example": {
            "desc":
              "Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).",
            "code":
              "var str = $( \"p:first\" ).text();\n$( \"p:last\" ).html( str );",
            "css":
              "p {     color: blue;\n    margin: 8px;\n  }\n  b {     color: red;\n  }",
            "html": "<p><b>Test</b> Paragraph.</p>\n<p></p>"
          },
          "category": [
            {
              "slug": "manipulation/dom-insertion-inside"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "text",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "text",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  },
                  {
                    "name": "Boolean"
                  }
                ],
                "desc":
                  "The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation."
              }
            },
            {
              "added": "1.4",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "text",
                    "type": "String"
                  }
                ],
                "return": {
                  "type": "String"
                },
                "desc":
                  "A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments."
              }
            }
          ],
          "desc":
            "Set the content of each element in the set of matched elements to the specified text.",
          "longdesc": {
            "p": [
              {
                "code": [".html()", ".text()"]
              },
              {
                "code": ".createTextNode()"
              },
              {
                "code":
                  "$( \"div.demo-container\" ).text( \"<p>This is a test.</p>\" );"
              },
              "It will appear on a rendered page as though the tags were exposed, like this:",
              {
                "code": ".text()",
                "a": {
                  "href": "/val/",
                  "$t": ".val()"
                }
              },
              {
                "code": ".text()"
              },
              {
                "code": "<li>"
              }
            ],
            "pre": [
              {
                "code":
                  "<div class=\"demo-container\">\n  <div class=\"demo-box\">Demonstration Box</div>\n  <ul>\n    <li>list item 1</li>\n    <li>list <strong>item</strong> 2</li>\n  </ul>\n</div>"
              },
              {
                "code":
                  "<div class=\"demo-container\">\n  <p>This is a test.</p>\n</div>"
              },
              {
                "code": "<p>This is a test</p>"
              },
              {
                "code":
                  "$( \"ul li\" ).text(function( index ) {   return \"item number \" + ( index + 1 );\n});"
              },
              {
                "code":
                  "<ul>\n  <li>item number 1</li>\n  <li>item number 2</li>\n  <li>item number 3</li>\n</ul>"
              }
            ]
          },
          "example": {
            "desc":
              "Add text to the paragraph (notice the bold tag is escaped).",
            "code": "$( \"p\" ).text( \"<b>Some</b> new text.\" );",
            "css": "p {     color: blue;\n    margin: 8px;\n  }",
            "html": "<p>Test Paragraph.</p>"
          },
          "category": [
            {
              "slug": "manipulation/dom-insertion-inside"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "toArray",
      "return": "Array",
      "title": ".toArray()",
      "signature": {
        "added": "1.4"
      },
      "desc":
        "Retrieve all the elements contained in the jQuery set, as an array.",
      "longdesc": {
        "p": [
          {
            "code": ".toArray()"
          },
          "All of the matched DOM nodes are returned by this call, contained in a standard array:",
          {
            "span": {
              "class": "result",
              "$t": "[<li id=\"foo\">, <li id=\"bar\">]"
            }
          }
        ],
        "pre": {
          "code": "alert( $( \"li\" ).toArray() );"
        }
      },
      "example": {
        "desc":
          "Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.",
        "code":
          "function disp( divs ) {   var a = [];\n  for ( var i = 0; i < divs.length; i++ ) {     a.push( divs[ i ].innerHTML );\n  }\n  $( \"span\" ).text( a.join( \" \" ) );\n}\n\ndisp( $( \"div\" ).toArray().reverse() );",
        "css": "span {     color: red;\n  }",
        "html":
          "Reversed - <span></span>\n\n<div>One</div>\n<div>Two</div>\n<div>Three</div>"
      },
      "category": [
        {
          "slug": "miscellaneous/dom-element-methods"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "toggle",
      "return": "jQuery",
      "deprecated": "1.8",
      "removed": "1.9",
      "title": ".toggle()",
      "desc":
        "Bind two or more handlers to the matched elements, to be executed on alternate clicks.",
      "signature": {
        "added": "1.0",
        "argument": [
          {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc":
              "A function to execute every even time the element is clicked.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          },
          {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc":
              "A function to execute every odd time the element is clicked.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          },
          {
            "name": "handler",
            "optional": "true",
            "type": "Function",
            "$t": "",
            "desc": "Additional handlers to cycle through after clicks.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        ]
      },
      "longdesc": {
        "div": {
          "class": "warning",
          "p": {
            "a": {
              "href": "/toggle/",
              "$t": ".toggle()"
            }
          }
        },
        "p": [
          {
            "code": [".toggle()", "click", "click"]
          },
          "For example, consider the HTML:",
          {
            "code": "<div>"
          },
          "As the element is clicked repeatedly, the messages alternate:",
          {
            "samp": [
              "First handler for .toggle() called.",
              "Second handler for .toggle() called.",
              "First handler for .toggle() called.",
              "Second handler for .toggle() called.",
              "First handler for .toggle() called."
            ],
            "br": [{}, {}, {}, {}]
          },
          {
            "code": ".toggle()"
          },
          {
            "code": [
              ".toggle()",
              ".toggle()",
              ".toggle()",
              ".toggle()",
              "click",
              "click",
              ".toggle()",
              "click",
              ".preventDefault()",
              ".toggle()"
            ]
          }
        ],
        "pre": [
          {
            "code": "<div id=\"target\">\n  Click here\n</div>"
          },
          {
            "code":
              "$( \"#target\" ).toggle(function() {   alert( \"First handler for .toggle() called.\" );\n}, function() {   alert( \"Second handler for .toggle() called.\" );\n});"
          }
        ]
      },
      "example": {
        "desc":
          "Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):",
        "code":
          "$( \"td\" ).toggle(\n  function() {     $( this ).addClass( \"selected\" );\n  }, function() {     $( this ).removeClass( \"selected\" );\n  }\n);"
      },
      "category": [
        {
          "slug": "events/mouse-events"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "toggle",
      "return": "jQuery",
      "title": ".toggle()",
      "desc": "Display or hide the matched elements.",
      "signature": [
        {
          "added": "1.0",
          "xi:include": [
            {
              "href": "../includes/duration-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.0",
          "xi:include": {
            "href": "../includes/options-argument.xml",
            "xmlns:xi": "http://www.w3.org/2003/XInclude"
          }
        },
        {
          "added": "1.4.3",
          "argument": {
            "name": "duration",
            "default": "400",
            "desc":
              "A string or number determining how long the animation will run.",
            "type": [
              {
                "name": "Number"
              },
              {
                "name": "String"
              }
            ]
          },
          "xi:include": [
            {
              "href": "../includes/easing-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            },
            {
              "href": "../includes/complete-argument.xml",
              "xmlns:xi": "http://www.w3.org/2003/XInclude"
            }
          ]
        },
        {
          "added": "1.3",
          "argument": {
            "name": "display",
            "type": "Boolean",
            "desc": {
              "code": ["true", "false"]
            }
          }
        }
      ],
      "longdesc": {
        "div": {
          "class": "warning",
          "p": {
            "a": {
              "href": "/toggle-event/",
              "$t": ".toggle()"
            }
          }
        },
        "p": [
          {
            "code": ".toggle()"
          },
          {
            "code": ["display", "display", "display", "inline", "inline"]
          },
          {
            "em": "single",
            "code": [".toggle()", ".toggle()", "display", "none"]
          },
          {
            "code": ["'fast'", "'slow'", "200", "600"]
          },
          {
            "code": ["swing", "linear"],
            "a": {
              "href": "http://jqueryui.com",
              "$t": "jQuery UI suite"
            }
          },
          {
            "code": "this"
          },
          "We can animate any element, such as a simple image:",
          {
            "code": ".toggle()"
          },
          "With the element initially shown, we can hide it slowly with the first click:",
          "A second click will show the element once again:",
          {
            "code": ["true", "false"]
          },
          "is equivalent to:"
        ],
        "pre": [
          {
            "code": "$( \".target\" ).toggle();"
          },
          {
            "code":
              "<div id=\"clickme\">\n  Click here\n</div>\n<img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\">"
          },
          {
            "code":
              "$( \"#clickme\" ).click(function() {   $( \"#book\" ).toggle( \"slow\", function() {     // Animation complete.\n  });\n});"
          },
          {
            "code": "$( \"#foo\" ).toggle( display );"
          },
          {
            "code":
              "if ( display === true ) {   $( \"#foo\" ).show();\n} else if ( display === false ) {   $( \"#foo\" ).hide();\n}"
          }
        ],
        "figure": [
          {
            "img": [
              {
                "class": "column three",
                "src": "/resources/0042_06_09.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_10.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_11.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_12.png",
                "alt": ""
              }
            ],
            "figcaption": {
              "code": "toggle()"
            }
          },
          {
            "img": [
              {
                "class": "column three",
                "src": "/resources/0042_06_13.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_14.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_15.png",
                "alt": ""
              },
              {
                "class": "column three",
                "src": "/resources/0042_06_16.png",
                "alt": ""
              }
            ],
            "figcaption": {
              "code": "toggle()"
            }
          }
        ]
      },
      "note": {
        "id": "jquery.fx.off",
        "type": "additional",
        "data-title": ".toggle()"
      },
      "example": [
        {
          "desc": "Toggles all paragraphs.",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).toggle();\n});",
          "html":
            "<button>Toggle</button>\n<p>Hello</p>\n<p style=\"display: none\">Good Bye</p>"
        },
        {
          "desc":
            "Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.",
          "code":
            "$( \"button\" ).click(function() {   $( \"p\" ).toggle( \"slow\" );\n});",
          "css":
            "p {     background: #dad;\n    font-weight: bold;\n    font-size: 16px;\n  }",
          "html":
            "<button>Toggle 'em</button>\n<p>Hiya</p>\n<p>Such interesting text, eh?</p>"
        },
        {
          "desc": "Shows all paragraphs, then hides them all, back and forth.",
          "code":
            "var flip = 0;\n$( \"button\" ).click(function() {   $( \"p\" ).toggle( flip++ % 2 === 0 );\n});",
          "html":
            "<button>Toggle</button>\n<p>Hello</p>\n<p style=\"display: none\">Good Bye</p>"
        }
      ],
      "category": [
        {
          "slug": "effects/basics"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.3"
        },
        {
          "slug": "version/1.4.3"
        }
      ]
    }
  },
  {
    "entries": {
      "entry": [
        {
          "type": "method",
          "name": "toggleClass",
          "return": "jQuery",
          "title": ".toggleClass()",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "className",
                "type": "String",
                "desc":
                  "One or more class names (separated by spaces) to be toggled for each element in the matched set."
              }
            },
            {
              "added": "1.3",
              "argument": [
                {
                  "name": "className",
                  "type": "String",
                  "desc":
                    "One or more class names (separated by spaces) to be toggled for each element in the matched set."
                },
                {
                  "name": "state",
                  "type": "Boolean",
                  "desc":
                    "A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed."
                }
              ]
            },
            {
              "added": "1.4",
              "argument": [
                {
                  "name": "function",
                  "type": "Function",
                  "argument": [
                    {
                      "name": "index",
                      "type": "Integer"
                    },
                    {
                      "name": "className",
                      "type": "String"
                    },
                    {
                      "name": "state",
                      "type": "Boolean"
                    }
                  ],
                  "return": {
                    "type": "String"
                  },
                  "desc":
                    "A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the state as arguments."
                },
                {
                  "name": "state",
                  "optional": "true",
                  "type": "Boolean",
                  "desc":
                    "A boolean value to determine whether the class should be added or removed."
                }
              ]
            }
          ],
          "desc":
            "Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.",
          "longdesc": {
            "p": [
              {
                "code": [".toggleClass()", "<div>"]
              },
              {
                "code": "$( \"div.tumble\" ).toggleClass( \"bounce\" )"
              },
              {
                "code": [
                  "$( \"div.tumble\" ).toggleClass( \"bounce\" )",
                  "<div>",
                  "tumble"
                ]
              },
              {
                "code": [
                  ".toggleClass( \"bounce spin\" )",
                  "<div>",
                  "<div class=\"tumble bounce spin\">",
                  "<div class=\"tumble\">"
                ]
              },
              {
                "code": [".toggleClass()", "true", "false"]
              },
              "is equivalent to:",
              {
                "strong": "As of jQuery 1.4",
                "code": [".toggleClass()", ".toggleClass()"]
              },
              {
                "code": ["happy", "<div class=\"foo\">", "bar", "sad"]
              }
            ],
            "pre": [
              {
                "code": "<div class=\"tumble\">Some text.</div>"
              },
              {
                "code": "<div class=\"tumble bounce\">Some text.</div>"
              },
              {
                "code": "<div class=\"tumble\">Some text.</div>"
              },
              {
                "code": "$( \"#foo\" ).toggleClass( className, addOrRemove );"
              },
              {
                "code":
                  "if ( addOrRemove ) {   $( \"#foo\" ).addClass( className );\n} else {   $( \"#foo\" ).removeClass( className );\n}"
              },
              {
                "code":
                  "$( \"div.foo\" ).toggleClass(function() {   if ( $( this ).parent().is( \".bar\" ) ) {     return \"happy\";\n  } else {     return \"sad\";\n  }\n});"
              }
            ]
          },
          "example": [
            {
              "desc":
                "Toggle the class 'highlight' when a paragraph is clicked.",
              "code":
                "$( \"p\" ).click(function() {   $( this ).toggleClass( \"highlight\" );\n});",
              "css":
                "p {     margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {     color: blue;\n  }\n  .highlight {     background: yellow;\n  }",
              "html":
                "<p class=\"blue\">Click to toggle</p>\n<p class=\"blue highlight\">highlight</p>\n<p class=\"blue\">on these</p>\n<p class=\"blue\">paragraphs</p>"
            },
            {
              "desc":
                "Add the \"highlight\" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.",
              "code":
                "var count = 0;\n$( \"p\" ).each(function() {   var $thisParagraph = $( this );\n  var count = 0;\n  $thisParagraph.click(function() {     count++;\n    $thisParagraph.find( \"span\" ).text( \"clicks: \" + count );\n    $thisParagraph.toggleClass( \"highlight\", count % 3 === 0 );\n  });\n});",
              "css":
                "p {     margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {     color: blue;\n  }\n  .highlight {     background: red;\n  }",
              "html":
                "<p class=\"blue\">Click to toggle (<span>clicks: 0</span>)</p>\n<p class=\"blue highlight\">highlight (<span>clicks: 0</span>)</p>\n<p class=\"blue\">on these (<span>clicks: 0</span>)</p>\n<p class=\"blue\">paragraphs (<span>clicks: 0</span>)</p>"
            },
            {
              "desc":
                "Toggle the class name(s) indicated on the buttons for each div.",
              "css":
                ".wrap > div {     float: left;\n    width: 100px;\n    margin: 1em 1em 0 0;\n    padding-left: 3px;\n    border: 1px solid #abc;\n  }\n  div.a {     background-color: aqua;\n  }\n  div.b {     background-color: burlywood;\n  }\n  div.c {     background-color: cornsilk;\n  }",
              "html":
                "<div class=\"buttons\">\n  <button>toggle</button>\n  <button class=\"a\">toggle a</button>\n  <button class=\"a b\">toggle a b</button>\n  <button class=\"a b c\">toggle a b c</button>\n  <a href=\"#\">reset</a>\n</div>\n<div class=\"wrap\">\n  <div></div>\n  <div class=\"b\"></div>\n  <div class=\"a b\"></div>\n  <div class=\"a c\"></div>\n</div>",
              "code":
                "var cls = [ \"\", \"a\", \"a b\", \"a b c\" ];\nvar divs = $( \"div.wrap\" ).children();\nvar appendClass = function() {   divs.append(function() {     return \"<div>\" + ( this.className || \"none\" ) + \"</div>\";\n  });\n};\n\nappendClass();\n\n$( \"button\" ).on( \"click\", function() {   var tc = this.className || undefined;\n  divs.toggleClass( tc );\n  appendClass();\n});\n\n$( \"a\" ).on( \"click\", function( event ) {   event.preventDefault();\n  divs.empty().each(function( i ) {     this.className = cls[ i ];\n  });\n  appendClass();\n});"
            }
          ],
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "manipulation/class-attribute"
            },
            {
              "slug": "css"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.3"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "toggleClass",
          "return": "jQuery",
          "deprecated": "3.0",
          "signature": {
            "added": "1.4",
            "argument": {
              "name": "state",
              "optional": "true",
              "type": "Boolean",
              "desc":
                "A boolean value to determine whether the class should be added or removed."
            }
          },
          "longdesc": {
            "div": {
              "class": "warning",
              "strong": "This signature (only!) is deprecated as of jQuery 3.0"
            }
          }
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "trigger",
      "return": "jQuery",
      "title": ".trigger()",
      "desc":
        "Execute all handlers and behaviors attached to the matched elements for the given event type.",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc": {
                "code": ["click", "submit"]
              }
            },
            {
              "name": "extraParameters",
              "optional": "true",
              "type": [
                {
                  "name": "Array"
                },
                {
                  "name": "PlainObject"
                }
              ],
              "desc":
                "Additional parameters to pass along to the event handler."
            }
          ]
        },
        {
          "added": "1.3",
          "argument": [
            {
              "name": "event",
              "type": "Event",
              "desc": {
                "a": {
                  "href": "/category/events/event-object/",
                  "code": "jQuery.Event"
                }
              }
            },
            {
              "name": "extraParameters",
              "optional": "true",
              "type": [
                {
                  "name": "Array"
                },
                {
                  "name": "PlainObject"
                }
              ],
              "desc":
                "Additional parameters to pass along to the event handler."
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".on()", ".trigger()", ".trigger()"]
          },
          {
            "code": [".trigger()", "false", ".trigger()"],
            "a": {
              "href": "/event.stopPropagation/",
              "code": ".stopPropagation()"
            }
          },
          {
            "a": {
              "href": "/triggerHandler/",
              "code": ".triggerHandler()"
            }
          },
          {
            "code": [".on()", ".trigger()", "custom", "click"]
          },
          "The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.",
          {
            "code": [
              "eventData",
              "extraParameters",
              ".trigger()",
              "eventData",
              ".on()"
            ],
            "a": {
              "href": "/on/",
              "$t": ".on()"
            }
          },
          {
            "code": ".trigger()"
          }
        ],
        "pre": [
          {
            "code":
              "$( \"#foo\" ).on( \"click\", function() {   alert( $( this ).text() );\n});\n$( \"#foo\" ).trigger( \"click\" );"
          },
          {
            "code":
              "$( \"#foo\" ).on( \"custom\", function( event, param1, param2 ) {   alert( param1 + \"\\n\" + param2 );\n});\n$( \"#foo\").trigger( \"custom\", [ \"Custom\", \"Event\" ] );"
          }
        ],
        "div": [
          {
            "class": "warning",
            "strong": "Note:",
            "code": "window",
            "a": [
              {
                "href": "/event.preventDefault/",
                "code": "event.preventDefault()"
              },
              {
                "href": "/triggerHandler/",
                "code": ".triggerHandler()"
              }
            ]
          },
          {
            "class": "warning",
            "strong": "Note:",
            "a": {
              "href": "/triggerHandler/",
              "code": ".triggerHandler()"
            },
            "code": [".trigger()", "on", "click", "window", "onclick"]
          },
          {
            "class": "warning",
            "strong": "Note:",
            "code": ["length", "[ { length: 1 } ]"]
          }
        ]
      },
      "example": [
        {
          "desc": "Clicks to button #2 also trigger a click for button #1.",
          "code":
            "$( \"button:first\" ).click(function() {   update( $( \"span:first\" ) );\n});\n\n$( \"button:last\" ).click(function() {   $( \"button:first\" ).trigger( \"click\" );\n  update( $( \"span:last\" ) );\n});\n\nfunction update( j ) {   var n = parseInt( j.text(), 10 );\n  j.text( n + 1 );\n}",
          "css":
            "button {     margin: 10px;\n  }\n  div {     color: blue;\n    font-weight: bold;\n  }\n  span {     color: red;\n  }",
          "html":
            "<button>Button #1</button>\n<button>Button #2</button>\n<div><span>0</span> button #1 clicks.</div>\n<div><span>0</span> button #2 clicks.</div>"
        },
        {
          "desc":
            "To submit the first form without using the submit() function, try:",
          "code": "$( \"form:first\" ).trigger( \"submit\" );"
        },
        {
          "desc":
            "To submit the first form without using the submit() function, try:",
          "code":
            "var event = jQuery.Event( \"submit\" );\n$( \"form:first\" ).trigger( event );\nif ( event.isDefaultPrevented() ) {   // Perform an action...\n}"
        },
        {
          "desc": "To pass arbitrary data to an event:",
          "code":
            "$( \"p\" )\n  .click(function( event, a, b ) {     // When a normal click fires, a and b are undefined\n    // for a trigger like below a refers to \"foo\" and b refers to \"bar\"\n  })\n  .trigger( \"click\", [ \"foo\", \"bar\" ] );"
        },
        {
          "desc": "To pass arbitrary data through an event object:",
          "code":
            "var event = jQuery.Event( \"logged\" );\nevent.user = \"foo\";\nevent.pass = \"bar\";\n$( \"body\" ).trigger( event );"
        },
        {
          "desc": "Alternative way to pass data through an event object:",
          "code":
            "$( \"body\" ).trigger({   type:\"logged\",\n  user:\"foo\",\n  pass:\"bar\"\n});"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "triggerHandler",
      "return": "Object",
      "title": ".triggerHandler()",
      "desc": "Execute all handlers attached to an element for an event.",
      "signature": [
        {
          "added": "1.2",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc": {
                "code": ["click", "submit"]
              }
            },
            {
              "name": "extraParameters",
              "optional": "true",
              "type": [
                {
                  "name": "Array"
                },
                {
                  "name": "PlainObject"
                }
              ],
              "desc":
                "Additional parameters to pass along to the event handler."
            }
          ]
        },
        {
          "added": "1.3",
          "argument": [
            {
              "name": "event",
              "type": "Event",
              "desc": {
                "a": {
                  "href": "/category/events/event-object/",
                  "code": "jQuery.Event"
                }
              }
            },
            {
              "name": "extraParameters",
              "optional": "true",
              "type": [
                {
                  "name": "Array"
                },
                {
                  "name": "PlainObject"
                }
              ],
              "desc":
                "Additional parameters to pass along to the event handler."
            }
          ]
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": [".triggerHandler( eventType )", "on{ eventType}()"],
            "a": {
              "href": "/trigger/",
              "code": ".trigger()"
            }
          },
          {
            "code": {
              "a": {
                "href": "/trigger/",
                "$t": ".trigger()"
              }
            }
          }
        ],
        "ul": {
          "li": [
            {
              "code": [
                ".triggerHandler( \"event\" )",
                ".event()",
                ".triggerHandler( \"submit\" )",
                ".submit()"
              ]
            },
            {
              "code": [".trigger()", ".triggerHandler()"]
            },
            {
              "code": ".triggerHandler()"
            },
            {
              "code": [".triggerHandler()", "undefined"]
            }
          ]
        }
      },
      "example": {
        "desc":
          "If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.",
        "code":
          "$( \"#old\" ).click(function() {   $( \"input\" ).trigger( \"focus\" );\n});\n$( \"#new\" ).click(function() {   $( \"input\" ).triggerHandler( \"focus\" );\n});\n$( \"input\" ).focus(function() {   $( \"<span>Focused!</span>\" ).appendTo( \"body\" ).fadeOut( 1000 );\n});",
        "html":
          "<button id=\"old\">.trigger( \"focus\" )</button>\n<button id=\"new\">.triggerHandler( \"focus\" )</button><br><br>\n\n<input type=\"text\" value=\"To Be Focused\">"
      },
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.2"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "unbind",
      "return": "jQuery",
      "deprecated": "3.0",
      "title": ".unbind()",
      "desc": "Remove a previously-attached event handler from the elements.",
      "signature": [
        {
          "added": "1.0",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
            },
            {
              "name": "handler",
              "type": "Function",
              "optional": "true",
              "$t": "",
              "desc": "The function that is to be no longer executed.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names."
            },
            {
              "name": "false",
              "type": "Boolean",
              "desc": {
                "code": ".bind( eventType, false )"
              }
            }
          ]
        },
        {
          "added": "1.0",
          "argument": {
            "name": "event",
            "type": "Event",
            "desc": {
              "a": {
                "href": "/category/events/event-object/",
                "code": "jQuery.Event"
              }
            }
          }
        },
        {
          "added": "1.0"
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".unbind()",
            "a": {
              "href": "/off/",
              "code": ".off()"
            }
          },
          {
            "code": [".bind()", ".unbind()", ".unbind()"]
          },
          "This version removes the handlers regardless of type. To be more precise, we can pass an event type:",
          {
            "code": "click"
          },
          {
            "em": "not"
          },
          "Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.",
          {
            "code": [".bind()", "."]
          },
          "When a handler is bound in this fashion, we can still unbind it the normal way:",
          "However, if we want to avoid affecting other handlers, we can be more specific:",
          "We can also unbind all of the handlers in a namespace, regardless of event type:",
          "It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.",
          {
            "code": ".unbind()"
          },
          {
            "code": [".unbind()", "timesClicked"]
          }
        ],
        "pre": [
          {
            "code": "$( \"#foo\" ).unbind();"
          },
          {
            "code": "$( \"#foo\").unbind( \"click\" );"
          },
          {
            "code":
              "var handler = function() {   alert( \"The quick brown fox jumps over the lazy dog.\" );\n};\n$( \"#foo\" ).bind( \"click\", handler );\n$( \"#foo\" ).unbind( \"click\", handler );"
          },
          {
            "code":
              "$( \"#foo\" ).bind( \"click\", function() {   alert( \"The quick brown fox jumps over the lazy dog.\" );\n});\n\n// Will NOT work\n$( \"#foo\" ).unbind( \"click\", function() {   alert( \"The quick brown fox jumps over the lazy dog.\" );\n});"
          },
          {
            "code": "$( \"#foo\" ).bind( \"click.myEvents\", handler );"
          },
          {
            "code": "$( \"#foo\" ).unbind( \"click\" );"
          },
          {
            "code": "$( \"#foo\" ).unbind( \"click.myEvents\" );"
          },
          {
            "code": "$( \"#foo\" ).unbind( \".myEvents\" );"
          },
          {
            "code":
              "var timesClicked = 0;\n$( \"#foo\" ).bind( \"click\", function( event ) {   alert( \"The quick brown fox jumps over the lazy dog.\" );\n  timesClicked++;\n  if ( timesClicked >= 3 ) {     $( this ).unbind( event );\n  }\n});"
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "strong": "Note:",
            "code": ["click.proxy1", "click.proxy2"]
          }
        },
        "h4": ["Using Namespaces", "Using the Event Object"]
      },
      "example": [
        {
          "desc": "Can bind and unbind events to the colored button.",
          "code":
            "function aClick() {   $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {   $( \"#theone\" )\n    .bind( \"click\", aClick )\n    .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {   $( \"#theone\" )\n    .unbind( \"click\", aClick )\n    .text( \"Does nothing...\" );\n});",
          "css":
            "button {     margin: 5px;\n  }\n  button#theone {     color: red;\n    background: yellow;\n  }",
          "html":
            "<button id=\"theone\">Does nothing...</button>\n<button id=\"bind\">Bind Click</button>\n<button id=\"unbind\">Unbind Click</button>\n<div style=\"display:none;\">Click!</div>"
        },
        {
          "desc": "To unbind all events from all paragraphs, write:",
          "code": "$( \"p\" ).unbind();"
        },
        {
          "desc": "To unbind all click events from all paragraphs, write:",
          "code": "$( \"p\" ).unbind( \"click\" );"
        },
        {
          "desc":
            "To unbind just one previously bound handler, pass the function in as the second argument:",
          "code":
            "var foo = function() {   // Code to handle some kind of event\n};\n\n$( \"p\" ).bind( \"click\", foo ); // ... Now foo will be called when paragraphs are clicked ...\n\n$( \"p\" ).unbind( \"click\", foo ); // ... foo will no longer be called."
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "undelegate",
      "return": "jQuery",
      "deprecated": "3.0",
      "title": ".undelegate()",
      "desc":
        "Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.",
      "signature": [
        {
          "added": "1.4.2"
        },
        {
          "added": "1.4.2",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector which will be used to filter the event results."
            },
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing a JavaScript event type, such as \"click\" or \"keydown\""
            }
          ]
        },
        {
          "added": "1.4.2",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector which will be used to filter the event results."
            },
            {
              "name": "eventType",
              "type": "String",
              "desc":
                "A string containing a JavaScript event type, such as \"click\" or \"keydown\""
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc":
                "A function to execute at the time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "selector",
              "type": "String",
              "desc":
                "A selector which will be used to filter the event results."
            },
            {
              "name": "events",
              "type": "PlainObject",
              "desc":
                "An object of one or more event types and previously bound functions to unbind from them."
            }
          ]
        },
        {
          "added": "1.6",
          "argument": {
            "name": "namespace",
            "type": "String",
            "desc": "A string containing a namespace to unbind all events from."
          }
        }
      ],
      "longdesc": {
        "p": [
          {
            "code": ".undelegate()",
            "a": {
              "href": "/off/",
              "code": ".off()"
            }
          },
          {
            "code": ".undelegate()",
            "a": {
              "href": "/delegate/",
              "code": ".delegate()"
            }
          }
        ]
      },
      "example": [
        {
          "desc": "Can bind and unbind events to the colored button.",
          "code":
            "function aClick() {   $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {   $( \"body\" )\n    .delegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {   $( \"body\" )\n    .undelegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Does nothing...\" );\n});",
          "css":
            "button {     margin: 5px;\n  }\n  button#theone {     color: red;\n    background: yellow;\n  }",
          "html":
            "<button id=\"theone\">Does nothing...</button>\n<button id=\"bind\">Bind Click</button>\n<button id=\"unbind\">Unbind Click</button>\n<div style=\"display:none;\">Click!</div>"
        },
        {
          "desc": "To unbind all delegated events from all paragraphs, write:",
          "code": "$( \"p\" ).undelegate();"
        },
        {
          "desc":
            "To unbind all delegated click events from all paragraphs, write:",
          "code": "$( \"p\" ).undelegate( \"click\" );"
        },
        {
          "desc":
            "To undelegate just one previously bound handler, pass the function in as the third argument:",
          "code":
            "var foo = function () {   // Code to handle some kind of event\n};\n\n// ... Now foo will be called when paragraphs are clicked ...\n$( \"body\" ).delegate( \"p\", \"click\", foo );\n\n// ... foo will no longer be called.\n$( \"body\" ).undelegate( \"p\", \"click\", foo );"
        },
        {
          "desc": "To unbind all delegated events by their namespace:",
          "code":
            "var foo = function() {   // Code to handle some kind of event\n};\n\n// Delegate events under the \".whatever\" namespace\n$( \"form\" ).delegate( \":button\", \"click.whatever\", foo );\n\n$( \"form\" ).delegate( \"input[type='text'] \", \"keypress.whatever\", foo );\n\n// Unbind all events delegated under the \".whatever\" namespace\n$( \"form\" ).undelegate( \".whatever\" );"
        }
      ],
      "category": [
        {
          "slug": "events/event-handler-attachment"
        },
        {
          "slug": "version/1.4.2"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "version/1.6"
        },
        {
          "slug": "deprecated/deprecated-3.0"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "unload",
      "return": "jQuery",
      "deprecated": "1.8",
      "removed": "3.0",
      "title": ".unload()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "handler",
            "type": "Function",
            "$t": "",
            "desc": "A function to execute when the event is triggered.",
            "argument": {
              "name": "eventObject",
              "type": "Event"
            }
          }
        },
        {
          "added": "1.4.3",
          "argument": [
            {
              "name": "eventData",
              "type": "Anything",
              "optional": "true",
              "desc":
                "A plain object of data that will be passed to the event handler."
            },
            {
              "name": "handler",
              "type": "Function",
              "$t": "",
              "desc": "A function to execute each time the event is triggered.",
              "argument": {
                "name": "eventObject",
                "type": "Event"
              }
            }
          ]
        }
      ],
      "desc": "Bind an event handler to the \"unload\" JavaScript event.",
      "longdesc": {
        "p": [
          {
            "code": ".on( \"unload\", handler )"
          },
          {
            "code": ["unload", "window", "unload"]
          },
          {
            "code": ["unload", "window"]
          },
          {
            "code": [
              "alert()",
              "confirm()",
              "prompt()",
              "unload",
              ".preventDefault()"
            ]
          }
        ],
        "div": {
          "class": "warning",
          "p": {
            "code": ["unload", "beforeunload"]
          }
        },
        "pre": {
          "code":
            "$( window ).unload(function() {   return \"Handler for .unload() called.\";\n});"
        }
      },
      "note": {
        "id": "detach-shorthand",
        "type": "additional",
        "data-event": "unload"
      },
      "example": {
        "desc": "To display an alert when a page is unloaded:",
        "code": "$( window ).unload(function() {   return \"Bye now!\";\n});"
      },
      "category": [
        {
          "slug": "events/document-loading"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4.3"
        },
        {
          "slug": "deprecated/deprecated-1.8"
        },
        {
          "slug": "removed"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "unwrap",
      "return": "jQuery",
      "title": ".unwrap()",
      "signature": [
        {
          "added": "1.4"
        },
        {
          "added": "3.0",
          "argument": {
            "name": "selector",
            "type": "String",
            "optional": "true",
            "desc":
              "A selector to check the parent element against. If an element's parent does not match the selector, the element won't be unwrapped."
          }
        }
      ],
      "desc":
        "Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.",
      "longdesc": {
        "p": {
          "code": [
            ".unwrap()",
            {
              "a": {
                "href": "/wrap/",
                "$t": ".wrap()"
              }
            }
          ]
        }
      },
      "example": {
        "desc": "Wrap/unwrap a div around each of the paragraphs.",
        "code":
          "var pTags = $( \"p\" );\n$( \"button\" ).click(function() {   if ( pTags.parent().is( \"div\" ) ) {     pTags.unwrap();\n  } else {     pTags.wrap( \"<div></div>\" );\n  }\n});",
        "css":
          "div {     border: 2px solid blue;\n  }\n  p {     background: yellow;\n    margin: 4px;\n  }",
        "html":
          "<button>wrap/unwrap</button>\n<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
      },
      "category": [
        {
          "slug": "manipulation/dom-insertion-around"
        },
        {
          "slug": "manipulation/dom-removal"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current value of the first element in the set of matched elements or set the value of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "val",
          "return": [
            {
              "type": "String"
            },
            {
              "type": "Number"
            },
            {
              "type": "Array"
            }
          ],
          "title": ".val()",
          "signature": {
            "added": "1.0"
          },
          "desc":
            "Get the current value of the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [".val()", "input", "select", "textarea", "undefined"]
              },
              {
                "code": [
                  "select-multiple",
                  "select",
                  "multiple",
                  ".val()",
                  "null"
                ],
                "strong": ["As of jQuery 3.0", "prior to jQuery 3.0"]
              },
              {
                "a": {
                  "href": "/checked-selector/",
                  "$t": ":checked"
                }
              }
            ],
            "pre": [
              {
                "code":
                  "// Get the value from the selected option in a dropdown\n$( \"select#foo option:checked\" ).val();\n\n// Get the value from a dropdown select directly\n$( \"select#foo\" ).val();\n\n// Get the value from a checked checkbox\n$( \"input[type=checkbox][name=bar]:checked\" ).val();\n\n// Get the value from a set of radio buttons\n$( \"input[type=radio][name=baz]:checked\" ).val();"
              },
              {
                "code":
                  "$.valHooks.textarea = {   get: function( elem ) {     return elem.value.replace( /\\r?\\n/g, \"\\r\\n\" );\n  }\n};"
              }
            ],
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": [".val()", "<textarea>"]
              }
            }
          },
          "example": [
            {
              "desc":
                "Get the single value from a single select and an array of values from a multiple select and display their values.",
              "code":
                "function displayVals() {   var singleValues = $( \"#single\" ).val();\n  var multipleValues = $( \"#multiple\" ).val() || [];\n  // When using jQuery 3:\n  // var multipleValues = $( \"#multiple\" ).val();\n  $( \"p\" ).html( \"<b>Single:</b> \" + singleValues +\n    \" <b>Multiple:</b> \" + multipleValues.join( \", \" ) );\n}\n\n$( \"select\" ).change( displayVals );\ndisplayVals();",
              "css":
                "p {     color: red;\n    margin: 4px;\n  }\n  b {     color: blue;\n  }",
              "html":
                "<p></p>\n\n<select id=\"single\">\n  <option>Single</option>\n  <option>Single2</option>\n</select>\n\n<select id=\"multiple\" multiple=\"multiple\">\n  <option selected=\"selected\">Multiple</option>\n  <option>Multiple2</option>\n  <option selected=\"selected\">Multiple3</option>\n</select>"
            },
            {
              "desc": "Find the value of an input box.",
              "code":
                "$( \"input\" )\n  .keyup(function() {     var value = $( this ).val();\n    $( \"p\" ).text( value );\n  })\n  .keyup();",
              "css": "p {     color: blue;\n    margin: 8px;\n  }",
              "html": "<input type=\"text\" value=\"some text\">\n<p></p>"
            }
          ],
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "forms"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        },
        {
          "type": "method",
          "name": "val",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  },
                  {
                    "name": "Array"
                  }
                ],
                "desc":
                  "A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked."
              }
            },
            {
              "added": "1.4",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "value",
                    "type": "String"
                  }
                ],
                "return": {
                  "type": "String"
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the value of each element in the set of matched elements.",
          "longdesc": {
            "p": [
              "This method is typically used to set the values of form fields.",
              {
                "code": [
                  "val()",
                  "<input type=\"checkbox\">",
                  "<input type=\"radio\">",
                  "<option>",
                  "<select>",
                  "input",
                  "option",
                  "value",
                  "value",
                  "<input type=\"radio\">",
                  "<select>"
                ]
              },
              {
                "code": ["value", "change", ".trigger( \"change\" )"]
              },
              {
                "code": ".val()"
              },
              "This example removes leading and trailing whitespace from the values of text inputs with a \"tags\" class."
            ],
            "pre": {
              "code":
                "$( \"input[type=text].tags\" ).val(function( index, value ) {   return value.trim();\n});"
            }
          },
          "example": [
            {
              "desc": "Set the value of an input box.",
              "code":
                "$( \"button\" ).click(function() {   var text = $( this ).text();\n  $( \"input\" ).val( text );\n});",
              "css":
                "button {     margin: 4px;\n    cursor: pointer;\n  }\n  input {     margin: 4px;\n    color: blue;\n  }",
              "html":
                "<div>\n  <button>Feed</button>\n  <button>the</button>\n  <button>Input</button>\n</div>\n<input type=\"text\" value=\"click a button\">"
            },
            {
              "desc":
                "Use the function argument to modify the value of an input box.",
              "code":
                "$( \"input\" ).on( \"blur\", function() {   $( this ).val(function( i, val ) {     return val.toUpperCase();\n  });\n});",
              "html":
                "<p>Type something and then click or tab out of the input.</p>\n<input type=\"text\" value=\"type something\">"
            },
            {
              "desc":
                "Set a single select, a multiple select, checkboxes and a radio button .",
              "code":
                "$( \"#single\" ).val( \"Single2\" );\n$( \"#multiple\" ).val([ \"Multiple2\", \"Multiple3\" ]);\n$( \"input\").val([ \"check1\", \"check2\", \"radio1\" ]);",
              "css": "body {     color: blue;\n  }",
              "html":
                "<select id=\"single\">\n  <option>Single</option>\n  <option>Single2</option>\n</select>\n\n<select id=\"multiple\" multiple=\"multiple\">\n  <option selected=\"selected\">Multiple</option>\n  <option>Multiple2</option>\n  <option selected=\"selected\">Multiple3</option>\n</select>\n\n<br>\n<input type=\"checkbox\" name=\"checkboxname\" value=\"check1\"> check1\n<input type=\"checkbox\" name=\"checkboxname\" value=\"check2\"> check2\n<input type=\"radio\" name=\"r\" value=\"radio1\"> radio1\n<input type=\"radio\" name=\"r\" value=\"radio2\"> radio2"
            }
          ],
          "category": [
            {
              "slug": "attributes"
            },
            {
              "slug": "forms"
            },
            {
              "slug": "manipulation/general-attributes"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "selector",
      "name": "visible",
      "return": "",
      "title": ":visible Selector",
      "sample": ":visible",
      "signature": {
        "added": "1.0"
      },
      "desc": "Selects all elements that are visible.",
      "longdesc": {
        "p": [
          "Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.",
          {
            "code": ["visibility: hidden", "opacity: 0"]
          },
          "Elements that are not in a document are considered hidden; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.",
          {
            "a": {
              "href": "/hidden-selector/",
              "code": ":hidden"
            },
            "code": [":visible", ":hidden"]
          },
          {
            "code": ["option", "selected"]
          },
          "During animations that hide an element, the element is considered visible until the end of the animation. During animations to show an element, the element is considered visible at the start at the animation.",
          {
            "code": ":visible",
            "a": {
              "href":
                "http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/",
              "$t": "release notes"
            }
          },
          {
            "code": [":visible", ":visible", "br", ":visible"],
            "a": {
              "href": "/hidden-selector/",
              "code": ":hidden"
            }
          }
        ]
      },
      "note": [
        {
          "id": "jquery-selector-extension",
          "type": "additional",
          "data-selector": ":visible"
        },
        {
          "id": "hidden-forces-layout",
          "type": "additional"
        }
      ],
      "example": {
        "desc": "Make all visible divs turn yellow on click.",
        "code":
          "$( \"div:visible\" ).click(function() {   $( this ).css( \"background\", \"yellow\" );\n});\n$( \"button\" ).click(function() {   $( \"div:hidden\" ).show( \"fast\" );\n});",
        "css":
          "div {     width: 50px;\n    height: 40px;\n    margin: 5px;\n    border: 3px outset green;\n    float: left;\n  }\n  .starthidden {     display: none;\n  }",
        "html":
          "<button>Show hidden to see they don't change</button>\n<div></div>\n<div class=\"starthidden\"></div>\n<div></div>\n<div></div>\n<div style=\"display:none;\"></div>"
      },
      "category": [
        {
          "slug": "selectors/jquery-selector-extensions"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "selectors/visibility-filter-selectors"
        }
      ]
    }
  },
  {
    "entries": {
      "desc":
        "Get the current computed width for the first element in the set of matched elements or set the width of every matched element.",
      "entry": [
        {
          "type": "method",
          "name": "width",
          "return": "Number",
          "title": ".width()",
          "signature": {
            "added": "1.0"
          },
          "desc":
            "Get the current computed width for the first element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [".css(width)", ".width()", "400", "400px", ".width()"]
              },
              "This method is also able to find the width of the window and document.",
              {
                "code": [
                  ".width()",
                  "box-sizing",
                  "box-sizing",
                  "box-sizing: border-box",
                  ".css( \"width\" )",
                  ".width()"
                ]
              }
            ],
            "figure": {
              "img": {
                "src": "/resources/0042_04_04.png"
              },
              "figcaption": "Figure 1 - Illustration of the measured width"
            },
            "pre": {
              "code":
                "// Returns width of browser viewport\n$( window ).width();\n\n// Returns width of HTML document\n$( document ).width();"
            },
            "div": {
              "class": "warning",
              "p": {
                "strong": "Note:",
                "code": [
                  "style",
                  "script",
                  ".width()",
                  "height()",
                  "display:block"
                ]
              }
            }
          },
          "note": [
            {
              "id": "dimensions-number",
              "type": "additional",
              "data-title": ".width()"
            },
            {
              "id": "hidden-element-dimensions",
              "type": "additional",
              "data-title": ".width()"
            }
          ],
          "example": {
            "desc":
              "Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.",
            "code":
              "function showWidth( ele, w ) {   $( \"div\" ).text( \"The width for the \" + ele + \" is \" + w + \"px.\" );\n}\n$( \"#getp\" ).click(function() {   showWidth( \"paragraph\", $( \"p\" ).width() );\n});\n$( \"#getd\" ).click(function() {   showWidth( \"document\", $( document ).width() );\n});\n$(\"#getw\").click(function() {   showWidth( \"window\", $( window ).width() );\n});",
            "css":
              "body {     background: yellow;\n  }\n  button {     font-size: 12px;\n    margin: 2px;\n  }\n  p {     width: 150px;\n    border: 1px red solid;\n  }\n  div {     color: red;\n    font-weight: bold;\n  }",
            "html":
              "<button id=\"getp\">Get Paragraph Width</button>\n<button id=\"getd\">Get Document Width</button>\n<button id=\"getw\">Get Window Width</button>\n<div>&nbsp;</div>\n<p>\n  Sample paragraph to test width\n</p>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4.1"
            }
          ]
        },
        {
          "type": "method",
          "name": "width",
          "return": "jQuery",
          "signature": [
            {
              "added": "1.0",
              "argument": {
                "name": "value",
                "type": [
                  {
                    "name": "String"
                  },
                  {
                    "name": "Number"
                  }
                ],
                "desc":
                  "An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string)."
              }
            },
            {
              "added": "1.4.1",
              "argument": {
                "name": "function",
                "type": "Function",
                "argument": [
                  {
                    "name": "index",
                    "type": "Integer"
                  },
                  {
                    "name": "value",
                    "type": "Integer"
                  }
                ],
                "return": {
                  "type": [
                    {
                      "name": "String"
                    },
                    {
                      "name": "Number"
                    }
                  ]
                },
                "desc": {
                  "code": "this"
                }
              }
            }
          ],
          "desc":
            "Set the CSS width of each element in the set of matched elements.",
          "longdesc": {
            "p": [
              {
                "code": [
                  ".width(\"value\")",
                  "100px",
                  "50%",
                  "auto",
                  "box-sizing"
                ]
              },
              "If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed.",
              {
                "code": [".width(\"value\")", "box-sizing"]
              }
            ]
          },
          "example": {
            "desc":
              "Change the width of each div the first time it is clicked (and change its color).",
            "code":
              "var modWidth = 50;\n$( \"div\" ).one( \"click\", function() {   $( this ).width( modWidth ).addClass( \"mod\" );\n  modWidth -= 8;\n});",
            "css":
              "div {     width: 70px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {     background: blue;\n    cursor: default;\n  }",
            "html":
              "<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>\n<div>d</div>"
          },
          "category": [
            {
              "slug": "css"
            },
            {
              "slug": "dimensions"
            },
            {
              "slug": "manipulation/style-properties"
            },
            {
              "slug": "version/1.0"
            },
            {
              "slug": "version/1.4.1"
            }
          ]
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "wrap",
      "return": "jQuery",
      "title": ".wrap()",
      "signature": [
        {
          "added": "1.0",
          "argument": {
            "name": "wrappingElement",
            "type": [
              {
                "name": "Selector"
              },
              {
                "name": "htmlString"
              },
              {
                "name": "Element"
              },
              {
                "name": "jQuery"
              }
            ],
            "desc":
              "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": {
              "name": "index",
              "type": "Integer"
            },
            "return": {
              "type": [
                {
                  "name": "String"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          }
        }
      ],
      "desc":
        "Wrap an HTML structure around each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [".wrap()", "$()"]
          },
          "Consider the following HTML:",
          {
            "code": [".wrap()", "<div>"]
          },
          {
            "code": ["<div>", "<div>"]
          },
          "The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:",
          {
            "code": "<div>"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).wrap( \"<div class='new'></div>\" );"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"new\">\n    <div class=\"inner\">Hello</div>\n  </div>\n  <div class=\"new\">\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>"
          },
          {
            "code":
              "$( \".inner\" ).wrap(function() {   return \"<div class='\" + $( this ).text() + \"'></div>\";\n});"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"Hello\">\n    <div class=\"inner\">Hello</div>\n  </div>\n  <div class=\"Goodbye\">\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>"
          }
        ]
      },
      "example": [
        {
          "desc": "Wrap a new div around all of the paragraphs.",
          "code": "$( \"p\" ).wrap( \"<div></div>\" );",
          "css":
            "div {     border: 2px solid blue;\n  }\n  p {     background: yellow;\n    margin: 4px;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the <strong> (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.>",
          "code":
            "$( \"span\" ).wrap( \"<div><div><p><em><b></b></em></p></div></div>\" );",
          "css":
            "div {     border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {     background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {     color: red;\n  }",
          "html":
            "<span>Span Text</span>\n<strong>What about me?</strong>\n<span>Another One</span>"
        },
        {
          "desc": "Wrap a new div around all of the paragraphs.",
          "code": "$( \"p\" ).wrap( document.createElement( \"div\" ) );",
          "css":
            "div {     border: 2px solid blue;\n  }\n  p {     background: yellow;\n    margin: 4px;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.",
          "code": "$( \"p\" ).wrap( $( \".doublediv\" ) );",
          "css":
            "div {     border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {     border-color: red;\n  }\n  p {     background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }",
          "html":
            "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n<div class=\"doublediv\"><div></div></div>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-around"
        },
        {
          "slug": "version/1.0"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "wrapAll",
      "return": "jQuery",
      "title": ".wrapAll()",
      "signature": [
        {
          "added": "1.2",
          "argument": {
            "name": "wrappingElement",
            "type": [
              {
                "name": "Selector"
              },
              {
                "name": "htmlString"
              },
              {
                "name": "Element"
              },
              {
                "name": "jQuery"
              }
            ],
            "desc":
              "A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements."
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this",
              "strong": "Prior to jQuery 3.0"
            },
            "return": {
              "type": [
                {
                  "name": "String"
                },
                {
                  "name": "jQuery"
                }
              ]
            }
          }
        }
      ],
      "desc":
        "Wrap an HTML structure around all elements in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [".wrapAll()", "$()"]
          },
          "Consider the following HTML:",
          {
            "code": [".wrapAll()", "<div>"]
          },
          {
            "code": ["<div>", "<div>"]
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).wrapAll( \"<div class='new' />\");"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"new\">\n    <div class=\"inner\">Hello</div>\n    <div class=\"inner\">Goodbye</div>\n  </div>\n</div>"
          }
        ]
      },
      "example": [
        {
          "desc": "Wrap a new div around all of the paragraphs.",
          "code": "$( \"p\" ).wrapAll( \"<div></div>\" );",
          "css":
            "div {     border: 2px solid blue;\n  }\n  p {     background: yellow;\n    margin: 4px;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the <strong> (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.",
          "code":
            "$( \"span\").wrapAll( \"<div><div><p><em><b></b></em></p></div></div>\" );",
          "css":
            "div {     border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {     background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {     color: red;\n  }",
          "html":
            "<span>Span Text</span>\n<strong>What about me?</strong>\n<span>Another One</span>"
        },
        {
          "desc": "Wrap a new div around all of the paragraphs.",
          "code": "$( \"p\" ).wrapAll( document.createElement( \"div\" ) );",
          "css":
            "div {     border: 2px solid blue;\n  }\n  p {     background: yellow;\n    margin: 4px;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.",
          "code": "$( \"p\" ).wrapAll( $( \".doublediv\" ) );",
          "css":
            "div {     border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {     border-color: red;\n  }\n  p {     background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }",
          "html":
            "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>\n<div class=\"doublediv\"><div></div></div>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-around"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  },
  {
    "entry": {
      "type": "method",
      "name": "wrapInner",
      "return": "jQuery",
      "title": ".wrapInner()",
      "signature": [
        {
          "added": "1.2",
          "argument": {
            "name": "wrappingElement",
            "desc":
              "An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.",
            "type": [
              {
                "name": "htmlString"
              },
              {
                "name": "Selector"
              },
              {
                "name": "jQuery"
              },
              {
                "name": "Element"
              }
            ]
          }
        },
        {
          "added": "1.4",
          "argument": {
            "name": "function",
            "type": "Function",
            "desc": {
              "code": "this"
            },
            "argument": {
              "name": "index",
              "type": "Integer"
            },
            "return": {
              "type": "String"
            }
          }
        }
      ],
      "desc":
        "Wrap an HTML structure around the content of each element in the set of matched elements.",
      "longdesc": {
        "p": [
          {
            "code": [".wrapInner()", "$()"]
          },
          "Consider the following HTML:",
          {
            "code": [".wrapInner()", "<div>"]
          },
          {
            "code": ["<div>", "<div>"]
          },
          "The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:",
          {
            "code": "<div>"
          },
          {
            "strong": "Note:",
            "code": ".wrapInner()"
          }
        ],
        "pre": [
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">Hello</div>\n  <div class=\"inner\">Goodbye</div>\n</div>"
          },
          {
            "code": "$( \".inner\" ).wrapInner( \"<div class='new'></div>\");"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">\n    <div class=\"new\">Hello</div>\n  </div>\n  <div class=\"inner\">\n    <div class=\"new\">Goodbye</div>\n  </div>\n</div>"
          },
          {
            "code":
              "$( \".inner\" ).wrapInner(function() {   return \"<div class='\" + this.nodeValue + \"'></div>\";\n});"
          },
          {
            "code":
              "<div class=\"container\">\n  <div class=\"inner\">\n    <div class=\"Hello\">Hello</div>\n  </div>\n  <div class=\"inner\">\n    <div class=\"Goodbye\">Goodbye</div>\n  </div>\n</div>"
          },
          {
            "code":
              "$( elem ).wrapInner( \"<div class='test'></div>\" );\n$( elem ).wrapInner( \"<div class=\\\"test\\\"></div>\" );"
          }
        ]
      },
      "example": [
        {
          "desc":
            "Selects all paragraphs and wraps a bold tag around each of its contents.",
          "code": "$( \"p\" ).wrapInner( \"<b></b>\" );",
          "css": "p {     background: #bbf;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Wraps a newly created tree of objects around the inside of the body.",
          "code":
            "$( \"body\" ).wrapInner( \"<div><div><p><em><b></b></em></p></div></div>\" );",
          "css":
            "div {     border: 2px green solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {     background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }",
          "html": "Plain old text, or is it?"
        },
        {
          "desc":
            "Selects all paragraphs and wraps a bold tag around each of its contents.",
          "code": "$( \"p\" ).wrapInner( document.createElement( \"b\" ) );",
          "css": "p {     background: #9f9;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        },
        {
          "desc":
            "Selects all paragraphs and wraps a jQuery object around each of its contents.",
          "code": "$( \"p\" ).wrapInner( $( \"<span class='red'></span>\" ) );",
          "css":
            "p {     background: #9f9;\n  }\n  .red {     color: red;\n  }",
          "html": "<p>Hello</p>\n<p>cruel</p>\n<p>World</p>"
        }
      ],
      "category": [
        {
          "slug": "manipulation/dom-insertion-around"
        },
        {
          "slug": "version/1.2"
        },
        {
          "slug": "version/1.4"
        }
      ]
    }
  }
]
